% \iffalse
%
% NOTE: This file still contains very long lines (up to approx 270 characters).
%       I haven't wrapped them since I won't do that by hand, and I haven't
%       written any program doing the work.
%
%       If you want to read this .dtx file, you might get in trouble with
%       such long lines!
%
% Trademarks appear throughout this documentation without any trademark
% symbol, so you can't assume that a name is free. There is no intention
% of infringement; the usage is to the benefit of the trademark owner.
%
%
%  S O F T W A R E   L I C E N S E
% =================================
%
% The files  listings.dtx  and  listings.ins  and all files generated
% from only these two files are referred to as `the listings package'
% or simply `the package'. A `driver' is generated from  lstdrvrs.dtx.
%
% Copyright.
%   The listings package is copyright 1996--1999 Carsten Heinz.
%   The language drivers are copyright 1997/1998/1999 any individual
%   author listed in the driver files.
%
% Distribution and warranty.
%   The listings package as well as lstdrvrs.dtx and all drivers are
%   distributed under the terms of the LaTeX Project Public License
%   from CTAN archives in directory  macros/latex/base/lppl.txt.
%   Either version 1.0 or, at your option, any later version.
%
% Use of the package.
%   The listings package is free software. However, if you distribute the
%   package as part of a commercial product or if you use the package to
%   prepare a document and sell the document (books, journals, and so on),
%   I'd like to encourage you to make a donation to the LaTeX3 fund. The
%   size of this `license fee' should depend on the value of the package
%   for your product.
%
%   If you use the package to typeset a non-commercial document, please
%   send me a copy of the document (hardcopy, .dvi, .ps, .pdf, etc.) to
%   support further development.
%
% Modification advice.
%   Permission is granted to change the listings package as well as
%   lstdrvrs.dtx. You are not allowed to distribute any changed version
%   of the package or any changed version of lstdrvrs.dtx, neither under
%   the same name nor under a different one. Tell the author of the
%   package about your local changes: other users will welcome removed
%   bugs, new features and additional programming languages.
%
% Contacts.
%   Send comments and ideas on the package, error reports and additional
%   programming languages to
%
%       Carsten Heinz
%       Tellweg 6
%       42275 Wuppertal
%       Germany
%
%   or preferably to
%
%       cheinz@gmx.de
%
% end of software license
%
%
%<*driver>
\documentclass{ltxdoc}

\usepackage[writefile]{listings}[2000/08/23]
\usepackage{lstdoc}
\IfFileExists{fancyvrb.sty}{\usepackage{fancyvrb}}{}
\csname @ifundefined\endcsname{pdfoutput}{}
    {\IfFileExists{hyperref.sty}{\usepackage{hyperref}}{}}
\IfFileExists{color.sty}{\usepackage{color}}{}
\IfFileExists{lgrind.sty}{\usepackage{lgrind}}{}
\IfFileExists{algorithmic.sty}{\usepackage{algorithmic}}{}

%\EnableCrossrefs
%\CodelineIndex
\DisableCrossrefs
\OnlyDescription

\begin{document}
    \DocInput{listings.dtx}
\end{document}
%</driver>
% \fi
%
% \def\lstemail{\texttt{cheinz@gmx.de}}
% \def\lstemail{\href{mailto:cheinz@gmx.de}{\texttt{cheinz@gmx.de}}}
%
%^^A
%^^A check which packages are available
%^^A
% \newif\iffancyvrb
% \IfFileExists{fancyvrb.sty}{\fancyvrbtrue}{}
% \newif\ifcolor
% \IfFileExists{color.sty}{\colortrue}{}
% \newif\iflgrind
% \IfFileExists{lgrind.sty}{\lgrindtrue}{}
% \newif\ifalgorithmic
% \IfFileExists{algorithmic.sty}{\algorithmictrue}{}
% \newif\ifhyper
% \csname @ifundefined\endcsname{pdfoutput}{}
%    {\IfFileExists{hyperref.sty}{\hypertrue}{}}
%
% \makeatletter
%
%^^A
%^^A Some commands to be used within `syntax' and the environment itself.
%^^A
% \newcommand*\syntaxbreak{\hfill\kern0pt\discretionary{}{\kern\labelwidth}{}}
% \newcommand*\syntaxnewline{\newline\hbox{}\kern\labelwidth}
% \newcommand*\syntaxor{\qquad or\qquad}
% \newenvironment{syntax}
%    {\list{}{\itemindent-\leftmargin \def\makelabel##1{\hss\lstmklab##1,,,,\relax}}}
%    {\endlist}
% \def\lstmklab#1,#2,#3,#4\relax{^^A
%    \llap{\scriptsize\itshape#3}^^A
%    \def\lst@temp{#2}^^A
%    \expandafter\lstmklab@\meaning\lst@temp\relax
%    \rlap{\hskip-\itemindent\hskip\itemsep\hskip\linewidth
%          \llap{\lst@temp}\hskip\labelwidth
%          #1}}
% \def\lstmklab@#1->#2\relax{\edef\lst@temp{\noexpand\ttfamily\zap@space#2 \@empty}}
%
%
% \iffalse
%
% Redefine sectioning
%=============================
%
%   part          (toc): less vertical space afterwards
%   section       (toc): no \bfseries
%   subsection    (toc): no indention
%   subsubsection (toc): no indention
%   paragraph          : less horizontal space afterwards
%
% \fi
%\def\@part[#1]#2{\addcontentsline{toc}{part}{#1}%
%    {\parindent\z@ \raggedright \interlinepenalty\@M
%     \normalfont \huge \bfseries #2\markboth{}{}\par}%
%    \nobreak\vskip 3ex\@afterheading}
%\renewcommand*\l@section[2]{^^A
%    \addpenalty\@secpenalty
%    \addvspace{.25em \@plus\p@}^^A
%    \setlength\@tempdima{1.5em}^^A
%    \begingroup
%      \parindent \z@ \rightskip \@pnumwidth
%      \parfillskip -\@pnumwidth
%      \leavevmode ^^A \bfseries
%      \advance\leftskip\@tempdima
%      \hskip -\leftskip
%      #1\nobreak\hfil \nobreak\hb@xt@\@pnumwidth{\hss #2}\par
%    \endgroup}
%\renewcommand*\l@subsection{\@dottedtocline{2}{0pt}{2.3em}}
%\renewcommand*\l@subsubsection{\@dottedtocline{3}{0pt}{3.2em}}
%\renewcommand\paragraph{\@startsection{paragraph}{4}{\z@}^^A
%                                      {1.25ex \@plus1ex \@minus.2ex}^^A
%                                      {-1em}^^A
%                                      {\normalfont\normalsize\bfseries}}
%
% \iffalse
%
% Ensure unique styles
%======================
%
%   \lstthanks{<forename~lastname>}{email}
%   \lsthelper{<forename~lastname>}{<date of report>}{<description>}
%
%   \lst                 : prints `lst' in typewriter type
%   \packagename{<name>} : prints package name
%   \aspectname{<name>}  : ditto
%   \keyname{<name>}     : ditto
%   \hookname{<name>}    : ditto
%
% \fi
%\gdef\lst@emails{}
%\newcommand*\lstthanks[2]{#1\lst@AddTo\lst@emails{,#1,<#2>}\ifx\@empty#2\@empty\typeout{Missing email for #1}\fi}
%\newcommand*\lsthelper[3]{{\let~\ #1}\lst@IfOneOf#1\relax\lst@emails
%     {}{\typeout{^^JWarning: Unknown helper #1.^^J}}}
%\let\lstenv@DroppedWarning\relax
%\newcommand\lstok{$+$}
%
%\newcommand*\lst{\texttt{lst}}
%\newcommand*\Cpp{C\texttt{++}}
%\def\switchfontfamily#1#2{^^A
%    \begingroup\xdef\@gtempa{#1}\endgroup
%    \ifx\f@family\@gtempa\fontfamily#2^^A
%                    \else\fontfamily#1\fi
%    \selectfont}
%\DeclareRobustCommand\packagename[1]{^^A
%    {\leavevmode\text@command{#1}^^A
%     \switchfontfamily\sfdefault\rmdefault
%     \check@icl #1\check@icr
%     \expandafter}}%
%\let\keyname\texttt
%\let\hookname\texttt
%\newcommand*\aspectname[1]{{\normalfont\sffamily#1}}
%\newcommand\rkeyname[1]{^^A
%    \@bsphack
%    \lstkeyindex{#1}{\encapchar main}^^A
%    \lstaspectindex{#1}{\encapchar main}^^A
%    \@esphack\keyname{#1}}
%
%\newcommand\rcmdname[1]{^^A
%    \@bsphack
%    \lstaspectindex{#1}{\encapchar main}^^A
%    \@esphack\texttt{\string#1}}
%\newcommand\icmdname[1]{^^A
%    \@bsphack
%    \lstaspectindex{#1}{}^^A
%    \@esphack\texttt{\string#1}}
%
%\@ifundefined{pdfoutput}{\let\href\@gobble}{}
%\let\lstlabel\label
%\def\lstref#1#2{^^A
%    \ifx\@empty#2\@empty \ref{#1}\else
%                   \emph{\ref{#1}\nobreakspace#2}\fi}
%
%\def\advisespace{\hbox{}\qquad}
%\def\labeladvise{$\to$}
%\def\advise{\par\list\labeladvise
%    {\let\small\footnotesize \small\sffamily
%     \parsep \z@ \@plus\z@ \@minus\z@
%     \topsep6\p@ \@plus1\p@\@minus2\p@
%     \def\makelabel##1{\hss\llap{##1}}}}
%\let\endadvise\endlist
%
% \def\alternative#1{\let\lst@temp\@undefined \alternative@#1,\relax,}
% \def\alternative@#1,{^^A
%    \ifx\relax#1\@empty
%        \expandafter\@gobble
%    \else
%        \ifx\@empty#1\@empty\else
%            \ifx\lst@temp\@undefined \let\lst@temp\@empty
%                               \else $\vert$\fi
%            \textup{\texttt{#1}}^^A
%        \fi
%    \fi
%    \alternative@}
%
% \iffalse
%
% Definitions for indexing
%==========================
%
% \fi
%\def\lstisaspect[#1]#2{^^A
%    \@for\lst@temp:=#2\do
%    {\ifx\@empty\lst@temp\else
%         \global\@namedef{lstisaspect@\lst@temp}{#1}^^A
%     \fi}}
%\def\lstaspectindex#1#2{^^A
%    \@ifundefined{lstisaspect@\string#1}{\index{unknown\levelchar\protect\texttt{\protect\string\string#1}#2}}{^^A
%    \index{\@nameuse{lstisaspect@\string#1}\levelchar\protect\texttt{\protect\string\string#1}#2}^^A
%    }}
%\def\lstkeyindex#1#2{^^A
%^^A    \index{key\levelchar\protect\keyname{#1}#2}^^A
%    }
%\newcommand\ikeyname[1]{^^A
%    \@bsphack
%    \lstkeyindex{#1}{}^^A
%    \lstaspectindex{#1}{}^^A
%    \@esphack\keyname{#1}}
%\newcommand\ekeyname[1]{^^A
%    \@bsphack
%    \lstkeyindex{#1}{\encapchar usage}^^A
%    \lstaspectindex{#1}{\encapchar usage}^^A
%    \@esphack}
%
%\lstisaspect[strings]{string,stringstyle,stringspaces,stringtest}
%\lstisaspect[comments]{comment,commentstyle}
%\lstisaspect[pod]{printpod,podcomment}
%\lstisaspect[escape]{texcl,escapebegin,escapeend,escapechar,escapeinside,mathescape}
%\lstisaspect[style]{\string\lstdefinestyle,style}
%\lstisaspect[language]{\string\lstalias,defaultdialect,\string\lstlanguagefiles,\string\lstloadlanguages,\string\lstdefinelanguage,\string\lst@definelanguage,language}
%\lstisaspect[keywords]{keywords,morekeywords,deletekeywords,keywordstyle,ndkeywords,morendkeywords,deletendkeywords,ndkeywordstyle,otherkeywords,sensitive,specialscan}
%\lstisaspect[emph]{emph,moreemph,deleteemph,emphstyle}
%\lstisaspect[html]{keywordsinside,usekeywordsinside}
%\lstisaspect[tex]{texcs,moretexcs,texcsstyle}
%\lstisaspect[directives]{directives,directivestyle}
%\lstisaspect[index]{index,moreindex,deleteindex,indexstyle,\string\lstindexmacro}
%\lstisaspect[procnames]{procnamekeys,procnamestyle,indexprocnames}
%\lstisaspect[keywordcomments]{keywordcomment,keywordcommentsemicolon}
%\lstisaspect[labels]{labelstyle,labelsep,labelstep,firstlabel,advancelabel,\string\thelstlabel}
%\lstisaspect[lineshape]{wholeline,indent,spread,lineskip}
%\lstisaspect[breaklines]{breaklines,breakindent,breakautoindent,prebreak,postbreak}
%\lstisaspect[frames]{frame,frameround,framerulewidth,framerulesep,frametextsep,framespread,frameshape}
%\lstisaspect[make]{makemacrouse}
%\lstisaspect[doc]{lstsample}^^A environment
%\lstisaspect[fancyvrb]{fancyvrb}
%\lstisaspect[lgrind]{lgrindef,\string\lstlgrindeffile}
%\lstisaspect[hyper]{hyperref,morehyperref,deletehyperref,hyperanchor,hyperlink}
%\lstisaspect[kernel]{aboveskip,abovecaptionskip,alsodigit,alsoletter,alsoother,^^A
%    basewidth,basicstyle,belowskip,belowcaptionskip,boxpos,caption,captionpos,^^A
%    continue,extendedchars,fancyvrb,first,flexiblecolumns,float,fontadjust,^^A
%    formfeed,gobble,identifierstyle,label,last,literate,\string\lstinline,^^A
%    \string\lstinputlisting,lstlisting,\string\lstlistingname,^^A
%    \string\lstlistlistingname,\string\lstlistoflistings,^^A
%    \string\lstloadaspects,\string\lstnewenvironment,\string\lstset,^^A
%    MoreSelectCharTable,outputpos,post,pre,print,SelectCharTable,showlines,^^A
%    tab,tabsize,visiblespaces,visibletabs}
%
%\makeatother
%
% \iffalse
%
% Required programming languages and styles
%===========================================
%
% \fi
%
%\lstdefinelanguage[doc]{Pascal}{^^A
%  morekeywords={alfa,and,array,begin,boolean,byte,case,char,const,div,^^A
%      do,downto,else,end,false,file,for,function,get,goto,if,in,^^A
%      integer,label,maxint,mod,new,not,of,or,pack,packed,page,program,^^A
%      procedure,put,read,readln,real,record,repeat,reset,rewrite,set,^^A
%      text,then,to,true,type,unpack,until,var,while,with,write,writeln},^^A
%  sensitive=false,^^A
%  morecomment=[d]{(*}{*)}{\{}{\}},^^A
%  morestring=[d]{'}}^^A
%\lstdefinestyle{}
%    {basicstyle={},%
%     keywordstyle=\bfseries,identifierstyle={},%
%     commentstyle=\itshape,stringstyle={},%
%     labelstyle={},labelstep=0}
%\lstset{defaultdialect=[doc]Pascal,language=Pascal,style={}}
%
% \iffalse
%
% The long awaited beginning of documentation
%=============================================
%
% \fi
%\newbox\abstractbox
%\setbox\abstractbox=\vbox{
%	\begin{abstract}
%	The \packagename{listings} package is a source code printer for \LaTeX.
%	You can typeset stand alone files as well as listings with an environment
%   similar to \texttt{verbatim} as well as you can print code snippets using
%   a command similar to |\verb|.
%	Many parameters control the output and if your preferred programming
%   language isn't already supported, you can make your own definition.
%	\end{abstract}}
%
% \title{The \packagename{Listings} Package}
% \author{Copyright 1996--2000\\ Carsten Heinz $<$\lstemail$>$}
% \date{2000/08/23\enspace Version 0.21\\ \box\abstractbox}
%
% \csname @twocolumntrue\endcsname
% \maketitle
% \csname @starttoc\endcsname{toc}
%^^A \vfill
%^^A \noindent \textbf{Minor incompatibilities!}
%^^A And again there will be teething troubles since some sensitive parts have been rewritten.
% \onecolumn
%
%
% \section*{Preface}
%
% \paragraph{Trademarks}
% Trademarks appear throughout this documentation without any trademark
% symbol. So you can't assume that names are free. There is no intention of
% infringement; the usage is to the benefit of the trademark owner.
%
% \paragraph{Reading this manual}
% If you are experienced with the \packagename{listings} package, you should
% read the paragraph ``\emph{News and changes}'' below. Otherwise read section
% \lstref{uGettingStarted}{Getting started} step by step and then go on with
% section \lstref{uTheNextSteps}{}.
%
% Please note: In this release I haven't cared much about the reference
% guide. So some information might be old.
%
% \paragraph{News and changes}
% The features `\aspectname{breaklines}' and `\aspectname{index}' aren't
% experimental any longer. Both's functionality have been extended (but I
% removed some indexing keys which are now obsolete).
% `\aspectname{emph}' is new and a collection of keyword classes. Its
% introduction should solve all highlighting problems: you can specify
% hundreds of different identifier lists and styles---if \TeX's memory
% suffices.
%
% I've added the experimental features `\aspectname{hyper}' (references) and
% `\aspectname{lgrind}' (language definitions), and some other keys labelled as
% \emph{new} as usual. The user's guide has been totally rewritten, but
% neither the developer's guide nor the documentation of implementation is
% up-to-date.
%
% The commands and keys |\lststorekeywords|, \keyname{pre}, \keyname{post},
% |\lstname| and |\lstintname| have been removed. They are obsolete since
% version 0.20. But I plan to reintroduce some funtionality via
% \keyname{everydisplay} and \keyname{everytext}, which are undefined yet.
%
% \paragraph{Thanks}
% There are many people I have to thank for fruitful communication, posting
% their ideas, giving error reports, adding programming languages to
% \texttt{lstdrvrs.dtx}, and so on. Their names are listed in section
% \lstref{uClosingAndCredits}.
%
%
% \clearpage
%
%
% \part{User's guide}
%
%
% \section{Getting started}\lstlabel{uGettingStarted}
%
%
% \subsection{A minimal file}\lstlabel{uAMinimalFile}
%
% Before using the \packagename{listings} package, you should be familiar with
% the \LaTeX\ typesetting system. You need not to be an expert.
% Here is a minimal file for \packagename{listings}.
% \begin{verbatim}
%    \documentclass{article}
%    \usepackage{listings}
%
%    \begin{document}
%
%    \lstset{language=Pascal}% activate Pascal
%    % Examples can be inserted here.
%
%    \end{document}\end{verbatim}
% Now type in this first example and run it through \LaTeX.
% \begin{advise}
% \item Must I do that really?
%       \advisespace
%       Yes and no. Some books about programming say this is good.
%       What a mistake! Typing takes time---wasted if the code is clear to
%       you. And if you need that time to understand what is going on, the
%       author of the book should reconsider the concept of presenting the
%       crucial things---you might want to say that about this guide even---or
%       you're simply unexperienced with programming. If only the latter case
%       applies, you should spend more time on reading (good) books about
%       programming, (good) documentations, and (good) source code from other
%       people. Of course you should also make your own experiments.
%       You will learn a lot. However, running the example through \LaTeX\ 
%       shows whether the \packagename{listings} package is installed.
% \item The example doesn't work.
%       \advisespace
%       Are the two packages \packagename{listings} and \packagename{keyval}
%       installed on your system? Read section \lstref{uInstallation}{} on the
%       installation process. If this doesn't help, you should consult your
%       system administrator and/or the local \TeX\ and \LaTeX\ guides.
% \item Should I read the software license before using this package?
%       \advisespace
%       Yes, but read this \emph{Getting started} section first to decide
%       whether you are willing to use this package.^^A ;-)
% \end{advise}
%
%
% \subsection{Typesetting listings}
%
% Three types of source codes are supported: code snippets inside paragraphs
% and code segments or listings of stand alone files as separate paragraphs.
% The difference between inside and separate paragraph is the same as between
% text style and display style formulas.
%
% \paragraph{Code snippets}
% The well-known \LaTeX\ command |\verb| typesets code snippets verbatim.
% The new command |\lstinline| pretty-prints the code, for example
% `\lstinline!var i:integer;!' is typeset by `|\lstinline!var i:integer;!|'.
% The exclamation marks delimit the code and can be replaced by any character
% not in the code, i.e.~|\lstinline$var i:integer;$| gives the same result.
% \begin{advise}
% \item Don't even try the code as an argument:
%       `|\lstinline{var i:integer;}|' \emph{will not work.}
% \end{advise}
%
% \paragraph{Displayed code}
% The \texttt{lstlisting} environment typesets the enclosed source code. Like
% most examples, the following one shows verbatim \LaTeX\ code on the right
% and the result on the left. You might take the right-hand side, put it into
% the minimal file, and run it through \LaTeX.
% \begin{lstsample}{}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% It can't be easier.
% \begin{advise}
% \item That's not true. The name `\texttt{listing}' is be shorter.
%       \advisespace
%       Indeed. But other packages already define environments with that name.
%       To be compatible with such packages, all commands and environments of
%       the \packagename{listings} package use the prefix `\texttt{lst}'.
% \item Okay, but it's still not true. The environment takes an argument and
%       all these arguments on the next few pages are empty.
%       \advisespace
%       It's a name argument and has something to do with line numbers.
% \item I see---I've read the section about line numbers. Wouldn't it be
%       easier to define another environment for that purpose?
%       \advisespace
%       No, no, no. Never do that again! Read this \emph{Getting started}
%       section from the beginning to the end. However, here is an answer to
%       your question: No, it's a matter of taste.
% \end{advise}
% The environment provides an optional argument. It tells the package to
% perform special tasks, for example, to print only the lines 2--5:
% \begin{lstsample}{\lstset{frame=trbl,frametextsep=0pt}\lstlabel{gFirstKey=ValueList}}{}
%    \begin{lstlisting}[first=2,last=5]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item Hold on! I've several questions.
%       Where comes the frame from and what is it good for?
%       \advisespace
%       You can put frames around all listings except code fragments.
%       You will learn it later. The frame shows that empty lines at the end
%       of listings aren't printed. This is line 5 in the example.
% \item Hey, you can't drop my empty lines!
%       \advisespace
%       You can tell the package not to drop them:
%       The key `\ikeyname{showlines}' controls these empty lines and is
%       described in section \lstref{rTypesettingListings}{}. Warning: First
%       read ahead on how to use keys in general.
% \item I get obscure error messages when using `\ikeyname{first}'.
%       \advisespace
%       That shouldn't happen. Make a bug report as described in section
%       \lstref{uTroubleshooting}{Troubleshooting}.
% \end{advise}
%
% \paragraph{Stand alone files}
% Finally we come to |\lstinputlisting|, the command to pretty-print stand
% alone files. It has one optional and one file name argument.
% Note that you possibly need to specify the (relative) path to the file.
% Here now the result is printed below the verbatim code since both together
% don't fit the text width.
% \begin{lstsample}{\lstset{comment=[l]\%,flexiblecolumns,basewidth=0pt,keepspaces}}{}
%    \lstinputlisting[last=4]{listings.sty}
% \end{lstsample}
% \begin{advise}
% \item The spacing is different in this example.
%       \advisespace
%       Yes. The two previous examples have aligned columns, i.e.~columns with
%       identical numbers have the same horizontal position---this package
%       makes small adjustments only. The columns in the example here are not
%       aligned. It is the effect of three parameters, which are explained
%       later (keyword: flexible column format).
% \end{advise}
%
% Now you know all pretty-printing commands and environments. It remains
% to learn the parameters which control the work of the \packagename{listings}
% package. This is, however, the main problem. Here are some of them.
%
%
% \subsection{Figure out the appearance}\lstlabel{gFigureOutTheAppearance}
%
% Keywords are typeset bold, comments in italic shape, and spaces in strings
% appear as \textvisiblespace. You don't like these settings? Look at this:
%\ifcolor
% \begin{verbatim}
%   \lstset{% general command to set parameter(s)
%       basicstyle=\small,          % print whole listing small
%       keywordstyle=\color{red}\bfseries\underbar,
%                                   % underlined bold red keywords
%       identifierstyle=,           % nothing happens
%       commentstyle=\color{white}, % white comments
%       stringstyle=\ttfamily,      % typewriter type for strings
%       stringspaces=false}         % no special string spaces\end{verbatim}
% \def\lsttemp{\lstset{basicstyle=\small,^^A
%        keywordstyle=\color{red}\bfseries\underbar,identifierstyle={},^^A
%        commentstyle=\color{white},^^A
%        stringstyle=\ttfamily,stringspaces=false}}
%\else
% \begin{verbatim}
%   \lstset{% general command to set parameter(s)
%       basicstyle=\small,          % print whole listing small
%       keywordstyle=\bfseries\underbar,
%                                   % underlined bold keywords
%       identifierstyle=,           % nothing happens
%       commentstyle=\itshape,      % default
%       stringstyle=\ttfamily,      % typewriter type for strings
%       stringspaces=false}         % no special string spaces\end{verbatim}
% \def\lsttemp{\lstset{basicstyle=\small,^^A
%        keywordstyle=\bfseries\underbar,identifierstyle=,^^A
%        commentstyle=\itshape,^^A
%        stringstyle=\ttfamily,stringspaces=false}}
%\fi
% \begin{lstsample}{\lsttemp}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
%\ifcolor
% \begin{advise}
% \item You've requested white coloured comments, but I can see the comment
%       on the left side.
%       \advisespace
%       There are a couple of possible reasons:
%       (1) You've printed the documentation on nonwhite paper.
%       (2) If you are viewing this documentation as a \texttt{.dvi}-file, your
%           viewer seems to have problems with colour specials. Try to print
%           the page on white paper.
%       (3) If a printout on white paper shows the comment, the colour
%           specials aren't suitable for your printer or printer driver.
%           Recreate the documentation and try it again---and ensure that
%           the \packagename{color} package is well-configured.
% \end{advise}
%\fi
% The styles use two different kinds of commands. |\ttfamily| and |\bfseries|
% both take no arguments and |\underbar| underlines the argument following up.
% In general, the \emph{very last} command might read exactly one argument,
% namely some material the package typesets. There's one exception. The last
% command of \ikeyname{basicstyle} \emph{must not} read following tokens---or
% you will get deep in trouble.
% \begin{advise}
% \item `|basicstyle=\small|' looks fine, but comments look really bad with
%       `|commentstyle=\small|' and empty basic style.
%       \advisespace
%       The package adjusts internal data after selecting the basic style at
%       the beginning of each listing. This can be a problem if you change
%       the font size for comments or strings, for example. In this case you
%       might want to use `|fontadjust=true|' to update the internal data every
%       font selection. Don't use this parameter otherwise!
% \end{advise}
%
% \paragraph{Warning}\label{wStrikingStyles}
% You should be very careful with striking styles; the last example is rather
% moderate---it can get horrible. \emph{Always use decent highlighting.}
% Unfortunately it is difficult to give more recommendations since they depend
% on the type of document you're creating. Slides or other presentations often
% require more striking styles than books, for example.
% In the end, it's \emph{you} who have to find the golden mean!
%
%
% \subsection{Seduce to use}\lstlabel{gSeduceToUse}
%
% You know all pretty-printing commands and some main parameters. Here now
% comes a small and incomplete overview of other features. The table of
% contents also provides information.
%
% \paragraph{Line numbers}
% Apart from code fragments you can get numbered code lines, e.g.~tiny
% numbers, each second line, with 5pt distance to the listing:
% \begin{verbatim}
%   \lstset{labelstyle=\tiny, labelstep=2, labelsep=5pt}%             <===\end{verbatim}
% \begin{lstsample}{\lstset{labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item I can't get rid of line numbers in subsequent listings.
%       \advisespace
%       `|labelstep=0|' turns them off.
% \item Can I use these parameters in the optional arguments?
%       \advisespace
%       Of course. Note that optional arguments modify values for one
%       particular listing only, i.e.~you change the appearance, step or
%       distance of line numbers for a single listing. The previous values
%       are restored afterwards.
% \end{advise}
% The \texttt{lstlisting} environment allows you to interrupt your listings:
% you can end a listing and continue it later with the correct line number
% even if there are listings in between. Read section \lstref{uLineNumbers}{}
% for a thorough discussion.
%
% \paragraph{Floating listings}
% Program listings except code fragments may float:
% \begin{lstsample}{\lstset{frame=tb}}{}
%    \begin{lstlisting}[float,caption=A floating example]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% Don't care about the parameter \ikeyname{caption} now. And if you put the
% example into the minimal file and run it through \LaTeX, please don't wonder:
% you'll miss the horizontal rules since they are described elsewhere.
% \begin{advise}
% \item \LaTeX's float mechanism allows to determine the placement of floats.
%       What's about that?
%       \advisespace
%       You can write `|float=tp|', for example.
% \end{advise}
%
% \paragraph{Other features}
% There are still features not mentioned so far: automatic breaking of long
% lines, the possibility to use \LaTeX\ code in listings, automated indexing,
% or personal language definitions.
% One more little teaser? Here you are. But note that the result is not
% produced by the \LaTeX\ code on the right alone. The main parameter is
% hidden.
% \begin{lstsample}{\lstset{literate={:=}{{$\gets$}}1 {<=}{{$\leq$}}1 {>=}{{$\geq$}}1 {<>}{{$\neq$}}1}}{}
%    \begin{lstlisting}{}
%    if (i<=0) then i := 1;
%    if (i>=0) then i := 0;
%    if (i<>0) then i := 0;
%    \end{lstlisting}
% \end{lstsample}
%
% You're not sure whether you should use \packagename{listings}?
% Read the next section.
%
%
% \subsection{Alternatives}
%
% This package is certainly not the final utility for typesetting source code.
% Other programs do their job very well---if you are not satisfied with
% \packagename{listings}. Some are independent of \LaTeX, other come as
% separate program plus \LaTeX\ package, and other more are packages which
% don't pretty-print the source code. The second type inlcudes converters,
% cross compilers, and preprocessors. Such programs create \LaTeX\ files
% you can use in your document or stand alone ready-to-run \LaTeX\ files.
%
% Note that I'm not dealing with any literate programming tool here, which
% could also be an alternative. However, you should have heard of the
% \texttt{WEB} system, the tool Prof.~Donald E.~Knuth developed and made use
% of to document and implement \TeX.
%
% \paragraph{\packagename{a2ps}}
% started as `ASCII to PostScript' converter, but today you can invoke the
% program with \texttt{--pretty-print=}\meta{language} option. If your
% favourite programming language is not already supported, you can write your
% own so-called style sheet. You can request line numbers, borders, headers,
% multiple pages per sheet, and many more. You can even print symbols like
% $\forall$ or $\alpha$ instead of their verbose forms. If you just want
% program listings and not a document with some listings, this is the best
% choice.
%
% Visit the home page at
% \href{http://www-inf.enst.fr/~demaille/a2ps}
%      {www-inf.enst.fr/\textasciitilde demaille/a2ps}.
%
% \paragraph{\packagename{cvt2ltx}}
% is a family of `source code to \LaTeX' converters for C, Objective C, \Cpp,
% IDL and Perl. Other programming languages can be added, but currently it
% isn't documented how this is done.
%
% Available via ftp from
% \href{ftp://axp3.sr.fh-mannheim.de/cvt2latex}
%            {axp3.sr.fh-mannheim.de/cvt2latex}.
%
% \paragraph{\packagename{LGrind}}
% is a cross compiler and comes with many predefined programming languages.
% For example, you can put the code on the right in your document, invoke
% \packagename{LGrind} with \texttt{-e} option (and file names), and run the
% created file through \LaTeX. You should get a result similar to the
% left-hand side.
% \begin{center}
% \begin{minipage}{0.45\linewidth}
%\iflgrind
%    \LGindent=0pt
%    \LGinlinefalse\LGbegin\lgrinde
%    \L{\LB{\K{for}_\V{i}:=\V{maxint}_\K{to}_\N{0}_\K{do}}}
%    \L{\LB{\K{begin}}}
%    \L{\LB{____\C{}\{_do_nothing_\}\CE{}}}
%    \L{\LB{\K{end};}}
%    \L{\LB{}}
%    \L{\LB{\V{Write}(\S{}{'}Case_insensitive_{'}\SE{});}}
%    \L{\LB{\V{WritE}(\S{}{'}Pascal_keywords.{'}\SE{});}}
%    \endlgrinde\LGend
%\else
%    \packagename{LGrind} not installed.
%\fi
% \end{minipage}
% \begin{minipage}{0.45\linewidth}
% \begin{verbatim}
% %[
% for i:=maxint to 0 do
% begin
%     { do nothing }
% end;
%
% Write('Case insensitive ');
% WritE('Pascal keywords.');
% %]\end{verbatim}
% \end{minipage}
% \end{center}
% If you use |%(| and |%)| instead of |%[| and |%]|, you get a code snippet
% instead of a displayed listing. Line numbers to the left or right, arbitrary
% \LaTeX\ code in the source code, printing symbols instead of verbose names,
% font setup, and more is supported. You will (have to) like it (if you don't
% like \packagename{listings}).
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/support/lgrind}
%      {CTAN/support/lgrind}.
%
% \paragraph{\packagename{\Cpp2\LaTeX}}
% is a C/\Cpp\ to \LaTeX\ converter. You can specify the fonts for comments,
% directives, keywords, and strings, or the size of a tabulator.^^A But as far as
%^^A I know you can't number lines.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/support/C++2LaTeX-1_1pl1}
%      {CTAN/support/C++2LaTeX-1\textunderscore1pl1}.
%
% \paragraph{\packagename{S\LaTeX}}
% is a pretty-printing Scheme program (invokes \LaTeX\ automatically)
% especially designed for Scheme and other Lisp dialects. It supports stand
% alone files, text and display listings, and you can even nest the
% commands/environments if you use \LaTeX\ code in comments, for example.
% Keywords, constants, variables, and symbols are definable and use of
% different styles is possible. No line numbers.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/support/slatex}
%      {CTAN/support/slatex}.
%
% \paragraph{\packagename{tiny\textunderscore c2ltx}}
% is a C/\Cpp\ to \LaTeX\ converter based on \packagename{cvt2ltx} (or the
% other way round?). It supports block comments, \LaTeX\ code in/as comments,
% and smart line breaking. The package does not provide line numbers. Font
% selection and tabulators are hard-coded, i.e.~you have to rebuild the
% program if you want to change the appearance.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/support/tiny_c2l}
%      {CTAN/support/tiny\textunderscore c2l}.
%
% \paragraph{\packagename{listing}}
% ---note the missing \packagename{s}---is not a pretty-printer and the
% aphorism about documentation at the end of \texttt{listing.sty} is not
% true.\space ^^A :-)
% It defines |\listoflistings| and a nonfloating environment for listings.
% All font selection and indention must be done by hand. However, it's
% useful if you have another tool doing that work, e.g.~\packagename{LGrind}.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/other/misc}
%      {CTAN/macros/latex/contrib/other/misc}.
%
% \paragraph{\packagename{alg}}
% provides essentially the same functionality as \packagename{algorithms}.
% So read the next paragraph and note that the syntax will be different.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/other/alg}
%      {CTAN/macros/latex/contrib/other/alg}.
%
% \paragraph{\packagename{algorithms}}
% goes a quite different way. You describe an algorithm and the package
% formats it, for example
% \begin{center}
% \begin{minipage}{0.45\linewidth}
%\ifalgorithmic
%    \begin{algorithmic}
%    \IF {$i\leq0$}
%    \STATE $i\gets1$
%    \ELSE\IF {$i\geq0$}
%    \STATE $i\gets0$
%    \ENDIF\ENDIF
%    \end{algorithmic}
%\else
%    \packagename{algorithms} not installed.
%\fi
% \end{minipage}
% \begin{minipage}{0.45\linewidth}
% \begin{verbatim}
%\begin{algorithmic}
%\IF{$i\leq0$}
%\STATE $i\gets1$
%\ELSE\IF{$i\geq0$}
%\STATE $i\gets0$
%\ENDIF\ENDIF
%\end{algorithmic}\end{verbatim}
% \end{minipage}
% \end{center}
% As this example shows, you get a good looking algorithm even from a bad
% looking input. The package provides a lot more constructs like |for|-loops,
% |while|-loops, or comments. You can request line numbers, `ruled', `boxed'
% and floating algorithms, a list of algorithms, and you can customize the
% terms \textbf{if}, \textbf{then}, and so on.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/supported/algorithms}
%      {CTAN/macros/latex/contrib/supported/algorithms}.
%
% \paragraph{\packagename{pretprin}}
% is a package for pretty-printing texts in formal languages---as the title
% in TUGboat, Volume 19 (1998), No.~3 states. It provides environments which
% pretty-print \emph{and} format the source code. Analyzers for Pascal and
% Prolog are defined; adding other languages is easy---if you are or get a bit
% familiar with automatons and formal languages.
%
%^^A Available via ftp from
%^^A \href{}
%^^A      {???}.
%
% \paragraph{\packagename{alltt}}
% defines an environment similar to \texttt{verbatim} except that |\|, |{| and
% |}| have their usual meanings. This means that you can use commands in the
% verbatims, e.g.~select different fonts or enter math mode.
%
% This package is part of the \LaTeX\ base distribution.
%
% \paragraph{\packagename{moreverb}}
% requires \packagename{verbatim} and provides verbatim output to a file,
% `boxed' verbatims and line numbers.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/supported/moreverb}
%      {CTAN/macros/latex/contrib/supported/moreverb}.
%
% \paragraph{\packagename{verbatim}}
% defines an improved version of the standard \texttt{verbatim} environment and
% a command to input files verbatim.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/required/tools}
%      {CTAN/macros/latex/required/tools}.
%
% \paragraph{\packagename{fancyvrb}}
% is, roughly spoken, a super set of \packagename{alltt},
% \packagename{moreverb}, and \packagename{verbatim}, but many more parameters
% control the output. The package provides frames, line numbers on the left or
% on the right, automatic line breaking (difficult), and more. For example, an
% interface to \packagename{listings} exists, i.e.~you can pretty-print source
% code automatically.
% The package \packagename{fvrb-ex} builds above \packagename{fancyvrb} and
% defines environments to present examples similar to the ones in this guide.
%
% Available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/supported/fancyvrb}
%      {CTAN/macros/latex/contrib/supported/fancyvrb}.
%
% \begin{advise}
% \item Why do you list all these alternatives?
%       \advisespace
%       Well, it's always good to know the competitors. And trying a different
%       package and coming back is better than the other way round.^^A :-)
% \end{advise}
%
%
% \section{The next steps}\lstlabel{uTheNextSteps}
%
%
% \subsection{Software license}\lstlabel{uSoftwareLicense}
%
% The files \texttt{listings.dtx} and \texttt{listings.ins} and all
% files generated from only these two files are referred to as `the
% \packagename{listings} package' or simply `the package'. A `driver'
% is generated from \texttt{lstdrvrs.dtx}.
%
% \paragraph{Copyright}
%   The \packagename{listings} package is copyright 1996--2000 Carsten Heinz.
%   The drivers are copyright 1997/1998/1999/2000 any individual author
%   listed in the driver files.
%
% \paragraph{Distribution and warranty}
%   The \packagename{listings} package as well as \texttt{lstdrvrs.dtx} and all
%   drivers are distributed under the terms of the \LaTeX\ Project Public
%   License from CTAN archives in directory |macros/latex/base/lppl.txt|,
%   either version 1.0 or any later version.
%
% \paragraph{Use of the package}
%   The \packagename{listings} package is free software. However, if you
%   distribute the package as part of a commercial product or if you use the
%   package to prepare a commercial document (books, journals, and so on),
%   I'd like to encourage you to make a donation to the \LaTeX3 fund.
%   The size of this `license fee' should depend on the value of the package
%   for your product. For more information about \LaTeX3 see
% \href{http://www.latex-project.org}
%      {http://www.latex-project.org}.
%
%   If you use the package to typeset a commercial or non-commercial document,
%   please send me a copy of the document (\texttt{.dvi}, \texttt{.ps},
%   \texttt{.pdf}, hardcopy, etc.) to support further development.
%
% \paragraph{Modification advice}
%   Permission is granted to modify the \packagename{listings} package as well
%   as \texttt{lstdrvrs.dtx}. You are not allowed to distribute any changed
%   version of the package or any changed version of \texttt{lstdrvrs.dtx},
%   neither under the same name nor under a different one. Instead contact the
%   address below. Other users will welcome removed bugs, new features, and
%   additional programming languages.
%
% \paragraph{Contacts}
%   Send your comments, ideas, bug reports and additional programming languages
%   to \emph{Carsten Heinz, Tellweg 6, 42275 Wuppertal, Germany} or preferably
%   to \lstemail\ using \texttt{listings} in the subject.
%
% \paragraph{Mailing list}
%   This is mainly an announcement list regarding new versions, bugs, patches,
%   and work-arounds. So I recommend it for system administrators, maintainers
%   of \LaTeX\ installations, or people who absolutely need the latest bugs.
%   To join the list, send an email to \lstemail\ with subject
%   \texttt{subscribe listings}.
%
%
% \subsection{Installation}\lstlabel{uInstallation}
%
%
% \paragraph{Software installation}
% \begin{enumerate}
% \item Following the \TeX\ directory structure (TDS), you should put the files
%       of the \packagename{listings} package into directories as follows:
%       \begin{center}
%       \begin{tabular}{lcl}
%       \texttt{listings.dvi}&$\to$&\texttt{texmf/doc/latex/listings}\\
%       \texttt{listings.dtx}, \texttt{listings.ins},\\
%       \texttt{lstdrvrs.dtx},
%       \texttt{lstpatch.sty}&$\to$&\texttt{texmf/source/latex/listings}
%       \end{tabular}
%       \end{center}
%       Note that you possibly don't have a patch file \texttt{lstpatch.sty}.
%       If you don't use the TDS, simply adjust the directories below.
% \item	Create the directory \texttt{texmf/tex/latex/listings} or remove all
%       files except \texttt{lst}\meta{whatever}\texttt{0.sty} and
%       \texttt{lstlocal.cfg} from that directory.
% \item	Change the working directory to \texttt{texmf/source/latex/listings}
%       and run \texttt{listings.ins} through \TeX.
% \item Move the generated files to \texttt{texmf/tex/latex/listings} if this
%       is not already done.
%       \begin{center}
%       \begin{tabular}{lcl}
%       \texttt{listings.sty}, \texttt{lstmisc.sty},
%           &&\qquad(kernel and add-ons)\\
%       \texttt{listings.cfg},
%           &&\qquad(configuration file)\\
%       \texttt{lstlang}\meta{number}\texttt{.sty},
%           &&\qquad(language drivers)\\
%       \texttt{lstpatch.sty}&$\to$&\texttt{texmf/tex/latex/listings}
%       \end{tabular}
%       \end{center}
% \item If your \TeX\ implementation uses a file name database, update it.
% \item If you receive a patch file later on, put it where
%       \texttt{listings.sty} is (and update file name database).
% \end{enumerate}
% Note that \packagename{listings} requires at least version 1.10 of the
% \packagename{keyval} package included in the \packagename{graphics} bundle by
% David Carlisle. This bundle is available via ftp from
% \href{ftp://ftp.dante.de/tex-archive/macros/latex/required/graphics}
%      {CTAN/macros/latex/required/graphics}.
%
%
% \paragraph{Software configuration}
% Read this only if you encounter problems with the standard configuration or
% if you want the package to suit foreign languages, for example.
%
% Never modify a file from the \packagename{listings} package, in particular
% not the configuration file. Each new installation or new version overwrites
% it. The software license allows modification, but I can't recommend it.
% It's better to create one or more of the files
% \begin{center}
% \begin{tabular}{lcl}
% \texttt{lstmisc0.sty} & for & local add-ons
%                               (see developer's guide),\\
% \texttt{lstlang0.sty} & for & local language definitions
%                               (see \lstref{rLanguageDefinitions}{}), and\\
% \texttt{lstlocal.cfg} & as  & local configuration file
% \end{tabular}
% \end{center}
% and put it/them to the other \packagename{listings} files. These three files
% are not touched by a new installation except you remove them.
% If \texttt{lstlocal.cfg} exists, it is loaded after \texttt{listings.cfg}.
% You might want to change one of the following parameters.
% \begin{syntax}
% \item[,,data] \rcmdname\lstaspectfiles\quad contains~\rlap{\texttt{\lstaspectfiles}}
% \item[,,data] \rcmdname\lstlanguagefiles\quad contains~\rlap{\texttt{\lstlanguagefiles}}
%
%       The package uses the specified files to find language definitions and
%       add-ons ($=$ aspects).
% \end{syntax}
% \begin{advise}
% \item What does the label ``data'' mean?
%       \advisespace
%       It indicates that the definition isn't a usual command. If you want to
%       adjust this parameter, you have to redefine it via `|\renewcommand|'.
%       For example, after `|\renewcommand\lstaspectfiles{}|' the package won't
%       find required add-ons. Note that such redefinitions must not take any
%       arguments!
% \end{advise}
% \begin{syntax}
% \item[,,data] \icmdname\lstlistlistingname\quad contains\quad \texttt{\lstlistlistingname}
%
%       The header name for the list of listings.
%
% \item[,,data] \icmdname\lstlistingname\quad contains\quad \texttt{\lstlistingname}
%
%       It's the string used to label the caption.
%
% \item \ikeyname{defaultdialect}|=|\oarg{dialect}\meta{language}
%
%       defines \meta{dialect} as default dialect for \meta{language}.
%       This dialect will be used for \meta{language} if no dialect is given
%       explicitly. Table \lstref{uPredefinedLanguages}{} shows all predefined
%       languages and dialects.
% \end{syntax}
% \begin{advise}
% \item `\ikeyname{defaultdialect}' isn't a command. How can I use it?
%       \advisespace
%       Remember the parameters in section \lstref{gFigureOutTheAppearance}{}:
%       take the name plus equality sign plus value and use this as argument to
%       `|\lstset|'. If you separate such ``key$=$value''s by commas, you can
%       set two or more default dialects with a single command. The standard
%       configuration file `\texttt{listings.cfg}' serves as example.
% \end{advise}
% \begin{syntax}
% \item \icmdname\lstalias\marg{alias}\marg{language}
%
%       defines an alias for a programming language. Each \meta{alias} dialect
%       is redirected to the same dialect of \meta{language}.
%       It's also possible to define an alias for one particular dialect only:
%
% \item \icmdname\lstalias\oarg{alias dialect}\marg{alias}\oarg{dialect}\marg{language}
%
%       Here all four parameters are \emph{nonoptional} and an alias with empty
%       \meta{dialect} will select the default dialect. Note that aliases
%       can't be nested: the two aliases `|\lstalias{foo1}{foo2}|' and
%       `|\lstalias{foo2}{foo3}|' redirect |foo1| \emph{not} to |foo3|.
% \end{syntax}
%
%
% \subsection{Package loading}
%
% As usual in \LaTeX, the package is loaded by
%    |\usepackage[|\meta{options}|]{listings}|,
% where |[|\meta{options}|]| is optional and gives a comma separated list of
% options. Each option loads an additional \packagename{listings} aspect
% (collection of commands and parameters). Usually you don't have to take care
% of such aspect loading. But in some cases it could be necessary: if you want
% to compile documents created with an earlier version of this package or if
% you use very special features.
% \begin{description}
%^^A \item[\normalfont\texttt{0.17}]\leavevmode
%^^A
%^^A       Use this option to compile documents created with version 0.17 of the
%^^A       \packagename{listings} package. Note that you can't use old driver
%^^A       files and that the option \emph{does not guarantee full compatibility}.
%
% \item[\normalfont\texttt{0.19}]\leavevmode
%
%       to compile documents created with version 0.19. This should be fully
%       compatible except that the command |\lststorekeywords| doesn't exist.
%       In fact, one should write ``This is going to be \ldots\ in some later
%       version'' since I haven't cared much about the compatibility mode.
%
% \item[\normalfont\texttt{savemem}]\leavevmode
%
%       tries to save some of \TeX's memory. If you switch between languages
%       often, it could also reduce compile time. But all this depends on the
%       particular document and its listings.
%
% \item[\normalfont\texttt{procnames}]\leavevmode
%
%       defines the keys of this experimental aspect, see
%       \ref{rExportOfIdentifiers}.
%
% \item[\normalfont\texttt{hyper}]\leavevmode
%
%       defines keys for hyper referencing with \packagename{hyperref}, see
%       \ref{rHyperReferences}.
%
% \item[\normalfont\texttt{lgrind}]\leavevmode
%
%       defines the \ikeyname{lgrindef} key, see \ref{rLGrindDefinitions}.
% \end{description}
%
% \medbreak
% After package loading I recommend to load all used dialects of programming
% languages with the following command. It is faster to load several languages
% with one command than loading each language on demand.
% \begin{syntax}
% \item \icmdname\lstloadlanguages\marg{comma separated list of languages}
%
%       loads all specified languages. Each programming language is given in
%       the form \oarg{dialect}\meta{language}. Without the optional
%       \oarg{dialect} the package loads a default dialect.
%       So write `|[Visual]C++|' if you want Visual \Cpp\ and `|[ANSI]C++|'
%       for ANSI \Cpp.
% \end{syntax}
% After or even before language loading, you might want to define default
% dialects---just to be independent of configurations files.
%
%
% \subsection{The ``key=value'' interface}\lstlabel{uTheKey=ValueInterface}
%
% This package uses the \packagename{keyval} package from the
% \packagename{graphics} bundle by David Carlisle. Each parameter is
% controlled by an associated key and a user supplied value. For example,
% \ikeyname{first} is a key and |2| a valid value for this key. The command
% |\lstset| gets a comma separated list of ``key|=|value'' pairs. The first
% list with more than a single entry is on page \pageref{gFirstKey=ValueList}:
% |first=2,last=5|.
% \begin{advise}
% \item So I can write `|\lstset{first=2,last=5}|' once for all?
%       \advisespace
%       No. `\ikeyname{first}' and `\ikeyname{last}' belong to a small set of
%       keys which are used on individual listings. However, your command is
%       not illegal---it has no effect. You have to use these keys inside the
%       optional argument of the environment or input command.
% \item What's about a better example of a key|=|value list?
%       \advisespace
%       There is one in section \lstref{gFigureOutTheAppearance}{}.
% \item `|language=[77]Fortran|' does not work inside an optional argument.
%       \advisespace
%       You must put braces around the value if a value with optional argument
%       is used inside an optional argument. In the case here write
%       `|language={[77]Fortran}|' to select Fortran 77.
% \item If I use the `\ikeyname{language}' key inside an optional argument, the
%       language isn't active when I typeset the next listing.
%       \advisespace
%       All parameters set via `|\lstset|' keep their values up to the end of
%       the current environment or group. Afterwards the previous values are
%       restored. The optional parameters of the two pretty-printing commands
%       and the `\texttt{lstlisting}' environment take effect on the particular
%       listing only, i.e.~values are restored immediately. For example, you
%       can select a main language and change it for special listings.
% \item \icmdname\lstinline\ has an optional argument?
%       \advisespace
%       Yes. And from this fact comes a limitation: you can't use the left
%       bracket `|[|' as delimiter except you specify at least an empty
%       optional argument as in `|\lstinline[][var i:integer;[|'.
%       If you forget this, you will either get a ``runaway argument'' error
%       from \TeX, or an error message from the \packagename{keyval} package.
% \end{advise}
%
%
% \subsection{Languages and styles}\lstlabel{uLanguagesAndStyles}
%
% You already know that the key \ikeyname{language} activates programming
% languages---at least Pascal. The key provides an optional parameter to
% select particular dialects $=$ versions or implementations of a language:
%    \ikeyname{language}|=|\oarg{dialect}\meta{language}.
% |language=[77]Fortran| selects Fortran 77 and |language=[XSC]Pascal| does
% the same for Pascal XSC.
% Table \lstref{uPredefinedLanguages}{} shows all predefined languages and
% dialects. Use the names as \meta{language} and \meta{dialect}, respectively.
% After |language={}| as argument to |\lstset| or as optional argument, no
% keywords are detected, no comments, no strings, and so on.
%^^A
%^^A  Make table of predefined languages.
%^^A
%\let\lstlanguages\empty
%\makeatletter
%\@for\lst@temp:={lstlang1.sty,lstlang2.sty,lstlang3.sty}\do
%    {\IfFileExists\lst@temp{}{\let\lstlanguages\relax}}
%\makeatother
%\ifx\lstlanguages\relax
%    \PackageWarningNoLine{Listings}
%        {Standard drivers not available.\MessageBreak
%         Please check your installation.\MessageBreak
%         Compilation aborted}
%    \csname @@end\expandafter\endcsname
%\fi
%\lstscanlanguages\lstlanguages{lstlang1.sty,lstlang2.sty,lstlang3.sty}{}^^A
%\def\topfigrule{\hrule\kern-0.4pt\relax}^^A
%\let\botfigrule\topfigrule
%\belowcaptionskip=\smallskipamount
% \begin{table}[tb]
% \caption{Predefined languages}\lstlabel{uPredefinedLanguages}^^A
% \makeatletter
% \setbox\@tempboxa\hbox{^^A
%    \InputIfFileExists{listings.cfg}{\lst@InputCatcodes}{}}^^A
% \lstprintlanguages\lstlanguages
% \end{table}
%^^A
%^^A end of table
%^^A
%\lstset{defaultdialect=[doc]Pascal}^^A restore
%
% Each underlined dialect in the table is default dialect; it is selected if
% you leave out the optional argument. But note that predefined default
% dialects might change: it's either a standard dialect or the newest version.
% Moreover, a local configuration file can also change settings. Thus: If you
% make use of default dialects, define them in your document.
% \begin{advise}
% \item I have C code mixed with assembler lines. Can \packagename{listings}
%       pretty-print such source code, i.e.~highlight keywords and comments of
%       both languages?
%       \advisespace
%       `\ikeyname{alsolanguage}|=|\oarg{dialect}\meta{language}' selects a
%       language additionally to the active one. So you only have to write a
%       language definition for your assembler dialect, which doesn't interfere
%       with the definition of C, say.
% \item Where should I put my language definition?
%       \advisespace
%       If you need the language for one particular document, put it into
%       the preamble of that document. Otherwise create the local file
%       `\texttt{lstlang0.sty}' or add the definition to that file, but use
%       `|\lst@definelanguage|' instead of `|\lstdefinelanguage|'. However,
%       you might want to send the definition to the address in section
%       \ref{uSoftwareLicense}. Then it will be published under the \LaTeX\ 
%       Project Public License.
% \end{advise}
%
% \medbreak
% It's obvious that a pretty-printing tool requires some kind of language
% selection and definition. And it is very convenient to have the same for
% printing styles:
%    |\lstdefinestyle|\marg{style name}\marg{key=value list}
% stores a key$=$value list and the key
%    \ikeyname{style}|=|\meta{style name}
% activates it. For example, you could write
% \begin{verbatim}
%   \lstdefinestyle{number}
%       {labelstep=1, labelstyle=\tiny, labelsep=10pt}
%   \lstdefinestyle{nonumber}
%       {labelstep=0}\end{verbatim}
% and switch from listings with line numbers (|style=number|) to listings
% without ones (|style=nonumber|). The advantage: styles at a central place
% of your document can be modified easily and the changes take effect on all
% listings.
%
% Eventually note that the arguments \meta{style name}, \meta{language} and
% \meta{dialect} are case insensitive and that spaces have no effect.
%
%
% \subsection{Special characters}
%
%
% \paragraph{Tabulators}
% You might get unexpected output if your sources contain tabulators.
% The package assumes tabulator stops at columns 9, 17, 25, 33, and so on.
% This is predefined via |tabsize=8|. If you change the eight to the number
% $n$, you will get tabulator stops at columns $n+1,2n+1,3n+1,$ and so on.
% \begin{lstsample}{}{}
%    \lstset{tabsize=2}
%    \begin{lstlisting}{}
%    123456789
%    	{ one tabulator }
%    		{ two tabs }
%    123		{ 123 + two tabs }
%    \end{lstlisting}
% \end{lstsample}
% The left-hand side uses |tabsize=2| but the verbatim code |tabsize=4|.
% Note that |\lstset| modifies the values for all following listings in the
% same environment or group. If you want to change settings for a single
% listing, use the optional argument.
%
% Read also the paragraph about visible tabulators below.
%
%
% \paragraph{Form feeds}
% Another special character is a form feed causing an empty line by default.
% |formfeed=\newpage| would result in a new page every form feed. Please note
% that such definitions (even the default) might get in conflict with frames.
%
%
% \paragraph{National characters}
% If you type in such characters (of code 128--255) directly and use these
% characters also in listings, let the package know it---or you'll get really
% funny results. |extendedchars=true| allows and |extendedchars=false|
% prohibits extended characters in listings. If you use them, you should load
% \packagename{fontenc}, \packagename{inputenc} or any other package which
% defines the characters.
% \begin{advise}
% \item I have problems using \packagename{inputenc} together with
%       \packagename{listings}.
%       \advisespace
%       This could be a compatibility problem. Make a bug report as described
%       in section \lstref{uTroubleshooting}{Troubleshooting}.
% \end{advise}
% The extended characters don't cover Arabic, Chinese, Hebrew, Japanese, and so
% on. Read section \ref{uNationalCharacters} for details on work-arounds.
%
%
% \paragraph{How to gobble characters}
% To make your \LaTeX\ code more readable, you might want to indent your
% \texttt{lstlisting} listings. This indention must be removed for
% pretty-printing. If you indent each code line by three characters, you can
% remove them via |gobble=3|:
% \begin{lstsample}{}{\lstset{visiblespaces}}
%    \begin{lstlisting}[gobble=3]{}
%    1  for i:=maxint to 0 do
%     2 begin
%      3    { do nothing }
%    123end;
%
%       Write('Case insensitive ');
%       WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% Note that empty lines as well as the beginning and the end of the environment
% need not to respect the indention. But never indent the end by more than
% `\ikeyname{gobble}' characters. Moreover note that tabulators expand to
% |tabsize| spaces before we gobble.
% \begin{advise}
% \item Could I use `\ikeyname{gobble}' together with `|\lstinputlisting|'?
%       \advisespace
%       Yes, but it has no effect.
% \end{advise}
%
%
% \paragraph{Visible tabulators and spaces}
% The verbatim part of the last example shows all spaces explicitly. This is
% also possible with tabulators.
% \begin{lstsample}{}{}
%    \lstset{visiblespaces=true, % <===
%            visibletabs=true,   % <===
%            tab=\rightarrowfill}% <===
%    \begin{lstlisting}{}
%        for i:=maxint to 0 do
%        begin
%    	{ do nothing }
%        end;
%    \end{lstlisting}
% \end{lstsample}
% If you request \ikeyname{visiblespaces} but no \ikeyname{visibletabs},
% tabulators are converted to visible spaces.
% The default definition of \ikeyname{tab} produces a `wide visible space'
% \lstinline[visibletabs]!	!. So you might want to use |$\to$|, |$\dashv$|
% or something else instead.
% \begin{advise}
% \item Some sort of advice: (1) You should really indent lines of source code
%       to make listings more readable. (2) Don't indent some lines with
%       spaces and others via tabulators. Changing the tabulator size (of your
%       editor or pretty-printing tool) completely disturbs the columns.
%       (3) As a consequence, never share your files with differently tab sized
%       people!^^A true only if you use tabulators, just :-)
% \end{advise}
%
%
% \subsection{Line numbers}\lstlabel{uLineNumbers}
%
% You already know the keys \ikeyname{labelstyle}, \ikeyname{labelstep}, and
% \ikeyname{labelsep} from section \lstref{gSeduceToUse}{}. Here now we begin
% with continued listings. Remember that the \texttt{lstlisting} environment
% has a name argument. Listings with identical names (case sensitive!) have a
% common line counter.
% \begin{lstsample}{\lstset{labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    \begin{lstlisting}{Test}%   <===
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    \end{lstlisting}
%    And we continue the listing:
%    \begin{lstlisting}{Test}%   <===
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% The next |Test| listing goes on with line number {\makeatletter\lstno@Test},
% no matter whether there are other listings in between. Note that the empty
% line at the end of the first part is not printed here, but it counts for line
% numbering. The continue mechanism has two exceptions: an empty named
% ($=$ |{}|) listing always starts with line number 1, a space named
% ($=$ |{ }|) listing continues the last empty or space named one.
%
% In fact, that's not true. The key \ikeyname{firstlabel} controls the line
% number of the first printed line:
% \begin{lstsample}{\lstset{labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    \begin{lstlisting}[firstlabel=2]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%
%    \end{lstlisting}
%    And we continue the listing:
%    \begin{lstlisting}[firstlabel=1]{ }
%    Write('Case insensitive ');
%    WritE('Pascal keywords.');
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item Okay. And how can I get decreasing line numbers?
%       \advisespace
%       Sorry, what?
%       \advisespace
%       Decreasing line numbers as on page \pageref{rDecreasingLabels}.
%       \advisespace
%       May I suggest to demonstrate your individuality by other means?
%       If you differ, you should try a negative `\ikeyname{labelstep}'
%       (together with `\ikeyname{firstlabel}').
% \end{advise}
%
% Read section \ref{uHowTo} on how to reference line numbers.
%
%
% \subsection{Layout elements}
%
% It's always a good idea to structure the layout by vertical space,
% horizontal lines, or different type sizes and typefaces. The best to stress
% whole listings are---not all at once---colours, frames, vertical space, and
% captions. The latter are also good to refer to listings, of course.
%
% \paragraph{Vertical space}
% The keys \ikeyname{aboveskip} and \ikeyname{belowskip} control the vertical
% space above and below displayed listings. Both keys get a dimension or skip
% as value and are initialized to |\medskipamount|.
%
% \paragraph{Captions}
% Now we come to \ikeyname{caption} and \ikeyname{label}. You might guess that
% they can be used in the same manner as \LaTeX's |\caption| and |\label|
% commands:
% \begin{lstsample}{\lstset{spread=-.1\linewidth}}{}
%    \begin{lstlisting}[caption=Useless code,label=useless]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% Afterwards you could refer to the listing via |\ref{useless}|. The optional
% argument of \ikeyname{caption} can be used to specify a short caption for the
% list of listings. If this short caption is empty then the listing will
% neither appear in that list nor it gets a number. But hold on. You've got
% to be aware that the key is used on an individual listing. Therefore you
% can't type |caption=[short]long| since the right bracket after |short| ends
% the optional argument of the pretty-printing command. It works if you enclose
% the whole value in braces: |caption={[short]long}|.
% By the way: the list of listings is printed via |\lstlistoflistings|.
%
% If you want to drop the label \texttt{\lstlistingname} and the number, you
% should use \ikeyname{title}:
% \begin{lstsample}{\lstset{spread=-.1\linewidth}}{}
%    \begin{lstlisting}[frame=tb,title=`Caption' without label]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
%
% \paragraph{Frames}
% The main key for frames is \ikeyname{frame}. If you use any subset of
% \texttt{trbl} as value, you get rules at the \texttt{t}op, \texttt{r}ight,
% \texttt{b}ottom, and/or \texttt{l}eft. Upper case letters will draw double
% rules.
% \begin{lstsample}{}{}
%    \begin{lstlisting}[frame=trBL]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item The rules aren't aligned.
%       \advisespace
%       This could be a bug of this package or a problem with your
%       \texttt{.dvi} driver. \emph{Before} sending a bug report to the package
%       author, modify the parameters described in section \ref{rFrames}
%       heavily. And do this step by step!
%       For example, begin with `|framerulewidth=10mm|'. If the rules are
%       misaligned by the same (small) amount as before, the problem does not
%       come from the rule width. So continue with the next parameter.
% \end{advise}
% Note that a corner is drawn if and only if both adjacent rules are requested.
% You might think that the lines should be drawn up to the edge. But what's
% about round corners? The key \ikeyname{frameround} must get exactly four
% characters as value. The first character is attached to the upper right
% corner and it continues clockwise. `\texttt{t}' as character makes the
% corresponding corner round.
% \begin{lstsample}{}{}
%    \lstset{frameround=fttt}
%    \begin{lstlisting}[frame=trBL]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% Note that \ikeyname{frameround} has been used together with |\lstset| and thus
% the value affects all following listings in the same group or environment.
% Since the listing is inside a \texttt{minipage} here, this is no problem.
% \begin{advise}
% \item Dont' use frames all the time, in particular not with short listings.
%       This would emphasize nothing. Use frames for $10\%$ or even less of
%       your listings, for your most important ones.
% \item If you use frames on floating listings, do you really want frames?
%       \advisespace
%       No, I want to separate floats from text.
%       \advisespace
%       Then it is better to redefine \LaTeX's `|\topfigrule|' and
%       `|\botfigrule|'. For example, you could write
%       `|\renewcommand*\topfigrule{\hrule\kern-0.4pt\relax}|' and make the
%       same definition for |\botfigrule|.
% \end{advise}
%
% \paragraph{Colours}
% One more element. You need the \packagename{color} package and can then
% request coloured background via
% \ikeyname{backgroundcolor}|=|\oarg{colour model}\meta{colour}.
%\ifcolor
% \definecolor{lightgray}{rgb}{0.75,0.75,0.75}
% \def\lsttemp{\lstset{backgroundcolor=lightgray}}
%\else
% \def\lsttemp{\packagename{color} not installed.
%              \csname @gobble\endcsname}
%\fi
% \begin{verbatim}
%    \definecolor{lightgray}{rgb}{0.75,0.75,0.75}
%    \lstset{backgroundcolor=lightgray}\end{verbatim}
% \begin{lstsample}{\lsttemp}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        j:=square(root(i));
%    end;
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item Great! I love colours.
%       \advisespace
%       Fine, yes, really. And I like to remind you of the warning about
%       striking styles on page \pageref{wStrikingStyles}.
% \item I want coloured space around the whole listing and can't get it, even
%       not with the keys described in section \ref{uListingAlignment}.
%       \advisespace
%       Try frames with framerule and background colour being equal.
% \end{advise}
%
%
% \subsection{Emphasize identifiers}
%
% Recall the pretty-printing commands and environment. |\lstinline| prints
% code fragments, |\lstinputlisting| whole files, and \texttt{lstlisting}
% prints pieces of code which reside in the \LaTeX\ file. And what are these
% different `types' of source code good for? Well, it just happens that a
% sentence contains a code fragment. Whole files are typically included in or
% as an appendix. Nevertheless some books about programming also include such
% listings in normal text sections---to increase the number of pages.
% Nowadays source code should be shipped on disk or CD-ROM and only the main
% header or interface files should be typeset for reference. So, please, don't
% misuse the \packagename{listings} package. Back to the topic.
%
% Obviously `\texttt{lstlisting} source code' isn't used to make an executable
% program from. Such source code has some kind of educational purpose or even
% didactic.
% \begin{advise}
% \item What's the difference between educational and didactic?
%       \advisespace
%       Something educational can be good or bad, true or false.
%       Didactic is true by definition.^^A :-)
% \end{advise}
% Usually \emph{keywords} are highlighted if the package typesets a piece of
% source code. This isn't necessary for readers knowing the programming
% language well. The main matter is the presentation of interface, library or
% other functions or variables. If this is your concern, here come the right
% keys. Let's say, you want to emphasize the function names |square| and
% |root|, for example, by underlining them. Then you could do it like this:
% \begin{lstsample}{}{}
%    \lstset{emph={square,root},
%            emphstyle=\underbar}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        j:=square(root(i));
%    end;
%    \end{lstlisting}
% \end{lstsample}
% Note that the list of identifiers |{square,root}| is enclosed in braces.
% Otherwise the \packagename{keyval} package would complain about an undefined
% key \keyname{root} since the comma finishes the key$=$value pair.
% And before you ask your next question, here is the answer: Yes, there is
% more than one \ikeyname{emph} `class' and each class has its own style.
%
% Both keys have an optional \meta{class number} argument. Please note again:
% If you use a list of identifiers or if you use an optional argument of a key
% inside an optional argument of a pretty-printing command, you \emph{must} put
% braces around the value. Though it is not necessary, the following example
% uses these braces. They are typically forgotten when they become necessary,
% after copy\&paste or extending a list of identifiers, for example.
%\ifcolor
% \begin{verbatim}
%    \lstset{emph={square},emphstyle=\color{red},
%            emph={[2]root},emphstyle={[2]\color{blue}}}\end{verbatim}
% \def\lsttemp{\lstset{emphstyle=\color{red},emphstyle=[2]\color{blue}}}
%\else
% \begin{verbatim}
%    \lstset{emph={square},emphstyle=\underbar,
%            emph={[2]root},emphstyle={[2]\fbox}}\end{verbatim}
% \def\lsttemp{\lstset{emphstyle=\underbar,emphstyle=[2]\fbox}}
%\fi
% \begin{lstsample}{\lstset{emph={square},emph={[2]root}}\lsttemp}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        j:=square(root(i));
%    end;
%    \end{lstlisting}
% \end{lstsample}
% \begin{advise}
% \item What is the maximal \meta{class number}?
%       \advisespace
%       $2^{31}-1=2\,147\,483\,647$. But \TeX's memory will exceed before you
%       can define so many different classes.
% \end{advise}
%
% One final hint: Keep the lists of identifiers disjoint. Never use a keyword
% in an `emphasize' list or one name in two different lists. Even if your
% source code is highlighted as expected, there is no guarantee that it is
% still the case if you change the order of your listings or if you use the
% next release of this package.
%
%
% \subsection{Listing alignment}\lstlabel{uListingAlignment}
%
% The examples are typeset with centered \texttt{minipage}s. That's the reason
% why you can't see that line numbers are printed in the margin. Now we
% separate the minipage margin and the minipage by a vertical rule:
% \begin{lstsample}{\lstset{frame=l,frametextsep=0pt,labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    Some text before
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% The listing is lined up with the normal text. The parameter \ikeyname{indent}
% moves the listing to the right (or left if the dimension is negative).
% \begin{lstsample}{\lstset{frame=l,frametextsep=0pt,labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    Some text before
%    \begin{lstlisting}[indent=15pt]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
%
%    \begin{lstlisting}{ }
%    Write('Insensitive');
%    WritE('keywords.');
%    \end{lstlisting}
% \end{lstsample}
% Note again that optional arguments change settings for single listings.
%
% If you use environments like \texttt{itemize} or \texttt{enumerate}, there
% is `natural' indention coming from these environments. By default the
% \packagename{listings} package respects this. But you might use
% |wholeline=true| (or |false|) to make your own decision. You can use it
% together with |indent|, of course.
% \begin{advise}
% \item I get heavy overfull |\hbox|es from some listings.
%       \advisespace
%       This comes from long lines in your listings. You have some options
%       to get rid of the overful |\hbox|es. Firstly I recommend to typeset
%       listings in smaller fonts than the surrounding text, for example
%       `|basicstyle=\small|'. Secondly you might want to use the flexible
%       column format. Thirdly you can `\ikeyname{spread}' the line width or
%       set it explicitly, refer section \lstref{rLineShapeAndBreaking}{}.
%       If all this doesn't help, you might want to change
%       `\ikeyname{basewidth}', but be careful! The two unknown items are
%       explained in the next section.
% \end{advise}
%
% You might need to control the vertical position of listings with the
% \ikeyname{boxpos} key, for example, if you use them in \texttt{minipage} or
% \texttt{tabular} environments. Here `listings' means \texttt{lstlisting} or
% |\lstinputlisting|. As the following example shows, you can even place such
% listings inside paragraphs, but you must force the package to do this by
% enclosing the listing in |\hbox{| and |}|.
% \begin{advise}
% \item Is it good form to use the \TeX-primitive `|\hbox|' in a \LaTeX\ 
%       document?
%       \advisespace
%       No, it's not. But \LaTeX's `|\mbox|' does not work in this example:
% \end{advise}
% \begin{lstsample}{}{}
%    Here are some multi-line listings inside a paragraph.
%    The `boxpos' key controls their vertical alignment:
%    \hbox{\begin{lstlisting}[boxpos=c]{}           % <===
%    center
%    center
%    \end{lstlisting}}
%    \hbox{\begin{lstlisting}[boxpos=b]{}           % <===
%    bottom baseline
%    bottom baseline
%    \end{lstlisting}}
%    \hbox{\begin{lstlisting}[boxpos=t]{}           % <===
%    top baseline
%    top baseline
%    \end{lstlisting}}
% \end{lstsample}
%
%
% \subsection{Fixed and flexible columns}\lstlabel{uFixedAndFlexibleColumns}
%
% \begingroup \lstset{gobble=6,indent=\leftmargini}
% The first thing a reader notices---except different styles for keywords,
% etc.---is bad column alignment like this:
% \begin{lstlisting}[flexiblecolumns,basewidth=0pt,keepspaces]{}
%     if x=y then write('align')
%            else print('align');
% \end{lstlisting}
% This is not an illustration of the flexible column format. But the piece
% of code has been typeset with the \packagename{listings} package using some
% unusual settings. However, the column alignment can't be disturbed if we put
% the characters in boxes of identical width:
% \makeatletter
%^^A  Make \fbox around each output unit.
% \fboxsep=0pt
%^^A \def\lst@alloverstyle#1{\fbox{\kern-\fboxrule\strut#1}\kern-\fboxrule}
%^^A  Here each character is an output unit.
% \begingroup
% \def\lst@ProcessLetter{\lst@PrintToken \lst@Append}
% \def\lst@ProcessOther{\lst@PrintToken \lst@AppendOther}
% \def\lst@ProcessSpace{\lst@PrintToken \lst@AppendOther\lst@outputspace}
% \begin{lstlisting}[basewidth=\baselineskip]{}
%     if x=y then write('align')
%            else print('align');
% \end{lstlisting}
% \endgroup
% \noindent
% The default procedure of this package works with a slight modification. All
% input will be cut up in units to find keywords. We put each unit in a box,
% which width is multiplied by the number of characters we put in, of course.
% The result is
% \begin{lstlisting}[basewidth=.6em]{}
%     if x=y then write('align')
%            else print('align');
% \end{lstlisting}
% Since we put wide and thin characters in the same box, the width of a single
% character box need not to be the width of the widest character. The
% empirical value {\makeatletter\lst@widthfixed} (which is called `base width'
% later) is a compromise between overlapping characters and the number of boxes
% not exceeding the line width, i.e.~how many characters fit a line without
% getting an overfull |\hbox|.
% \endgroup
%
% \begingroup
% But overlapping characters are a problem if you use many upper case letters,
% e.g.~\hbox to 3em{\hss W\hss O\hss M\hss E\hss N\hss}---blame me and not the
% women, in fact \hbox to 1.8em{\hss M\hss E\hss N\hss} doesn't look better.
% The flexible column format typesets all characters at their natural width.
% In particular characters never overlap. If a word requires more space than
% reserved, the rest of the line simply moves to the right. If a following
% word needs less space than reserved or if there are spaces following each
% other, this space is used to fix the column alignment.
% Arne John Glenstrup (whose idea the format was) pointed out that he had good
% experience with flexible columns and assembler listings.
% The differences can be summed up as follows: The fixed column format ruins
% the nice spacing intended by the font designer, and the flexible format ruins
% the column alignment (possibly) intended by the programmer.
% We illustrate that.
%   \lstset{style={},language={}}
%   \def\sample{\begin{lstlisting}{}^^J WOMEN\ \ are^^A
%                                   ^^J \ \ \ \ \ \ \ MEN^^A
%                                   ^^J WOMEN are^^A
%                                   ^^J better MEN^^J \end{lstlisting}}
%   \begin{center}\begin{tabular}{c@{\qquad\quad}c@{\qquad\quad}c}
%   verbatim & fixed columns                       & flexible columns\\
%            & with {\makeatletter\lst@widthfixed}
%            & with {\makeatletter\lst@widthflexible}\\
%   \noalign{\medskip}
%     \setkeys{lst}{basicstyle=\ttfamily,basewidth=0.51em}\sample
%   & \lstset{flexiblecolumns=false}\sample
%   & \lstset{flexiblecolumns=true}\sample
%   \end{tabular}\end{center}
% Hope this helps. In flexible mode, one of the two blanks in the first line
% is used to fix the column alignment. This is unlike \TeX's glue: the first
% `crumple zones' take it all. There is never a crumble zone if 0em is the
% base width. In this case the first `MEN' would had to the left since the
% preceding spaces were $7\cdot 0\mathrm{em}=0\mathrm{em}$ wide.
% If you use such extreme values, you should try |keepspaces=true| to protect
% the spaces.
% \endgroup
% \begin{advise}
% \item Why are women better men?
%       \advisespace
%       Do you want to philosophize? Well, have I ever said that the
%       statement ``women are better men'' is true? I can't even remember this
%       about ``women are men'' \ldots ^^A ;-))
% \end{advise}
%
% \ikeyname{flexiblecolumns}|=|\meta{\alternative{true,false}} turns the flexible
% columns on and off, respectively. The predefinition of the `base width' is
% |basewidth={0.6em,0.45em}|, where the first value is for fixed mode and the
% second for flexible columns. Change it if you like, but be very careful!
%
%
% \subsection{Indexing}
%
% is just like emphasizing identifiers---I mean the usage:
% \begin{lstsample}{}{}
%    \lstset{index={square},
%            index={[2]root}}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        j:=square(root(i));
%    end;
%    \end{lstlisting}
% \end{lstsample}
% Of course, you can't see anything here.
% You will have to look at the index file.
% \begin{advise}
% \item Why the `\ikeyname{index}' key is able to work with multiple identifier
%       lists?
%       \advisespace
%       This question is strongly related to the `\ikeyname{indexstyle}' key.
%       Someone might want to create multiple indexes or want to insert
%       prefixes like `|constants|', `|functions|', `|keywords|', and so on.
%       The `\ikeyname{indexstyle}' key works like the other style keys except
%       that the last token \emph{must} take an argument, namely the
%       (printable form of the) current identifier.
%
%       You can define `|\newcommand\indexkeywords[1]{\index{keywords, #1}}|'
%       and make similar definitions for constant or function names. Then
%       `|indexstyle=[1]\indexkeywords|' might meet your purpose. This becomes
%       easier if you want to create multiple indexes with the
%       \packagename{index} package
% (\href{ftp://ftp.dante.de/tex-archive/macros/latex/contrib/supported/camel}
%       {CTAN/macros/latex/contrib/supported/camel}).
%       If you have defined appropriate new indexes, it is possible to write
%       `|indexstyle=\index[keywords]|', for example.
%
% \item Let's say, I want to index all keywords. It would be annoying to
%       type in all the keywords again, specifically if the used programming
%       language changes frequently.
%       \advisespace
%       Just read ahead.
% \end{advise}
% The \ikeyname{index} key has in fact two optional arguments. The first is the
% well-known \meta{class number}, the second is a comma separated list of other
% keyword classes whose identifiers are indexed. The indexed identifiers then
% change automatically with the defined keywords---not automagically, it's not
% an illusion.^^A :-)
%
% Eventually you need to know the names of the keyword classes. It's usually
% the key name followed by a class number, for example, |emph2|, |emph3|,
% \ldots, |keywords2| or |index5|. But there is no number for the first order
% classes |keywords|, |emph|, |directives|, and so on.
% \begin{advise}
% \item `|index=[keywords]|' does not work.
%       \advisespace
%       The package can't guess which optional argument you mean. Hence you
%       must specify both if you want to use the second one. You should try
%       `|index=[1][keywords]|'.
% \end{advise}
%
%
% \subsection{Closing and credits}\lstlabel{uClosingAndCredits}
%
% You've seen a lot of keys but you are far away from knowing all of them.
% The next step would be real use of the \packagename{listings} package.
% If you encounter any problems or need some special things, come back to this
% documentation. Look up the known commands and keys in the reference guide;
% then you should be able to understand and use all the other. Complain if this
% is not true: email to \lstemail.
%
% \smallskip
% There is one question `you' haven't asked all the last pages: who is to
% blame. I've written the guides, coded the \packagename{listings} package and
% some language drivers. Other people defined more languages or contributed
% their ideas; many other people made bug reports (first bug finder is listed).
%^^A
%^^A Thanks for error reports (first bug finder only), new programming
%^^A languages, etc.
%^^A Special thanks for communication which lead to kernel extensions.
%^^A
% Special thanks go to (alphabetical order)
% \begin{quote}
% \hyphenpenalty=10000\relax \rightskip=0pt plus \linewidth\relax
%   \lstthanks{Andreas~Bartelt}{Andreas.Bartelt@Informatik.Uni-Oldenburg.DE},
%   \lstthanks{Jan~Braun}{Jan.Braun@tu-bs.de},
%   \lstthanks{Denis~Girou}{Denis.Girou@idris.fr},
%   \lstthanks{Arne~John~Glenstrup}{panic@diku.dk},
%   \lstthanks{Rolf~Niepraschk}{niepraschk@PTB.DE},
%   \lstthanks{Rui~Oliveira}{rco@di.uminho.pt} and
%   \lstthanks{Boris~Veytsman}{boris@plmsc.psu.edu}.
% \end{quote}
% Moreover I wish to thank
% \begin{quote}
% \hyphenpenalty=10000\relax \rightskip=0pt plus \linewidth
%   \lstthanks{Bj{\o}rn~{\AA}dlandsvik}{bjorn@imr.no},
%   \lstthanks{Gaurav~Aggarwal}{gaurav@ics.uci.edu},
%   \lstthanks{Jason~Alexander}{jalex@ea.oac.uci.edu},
%   \lstthanks{Donald~Arseneau}{ASND@erich.triumf.ca},
%   \lstthanks{Claus~Atzenbeck}{Claus.Atzenbeck@stud.uni-regensburg.de},
%   \lstthanks{Peter~Bartke}{bartke@inf.fu-berlin.de},
%   \lstthanks{Olaf~Trygve~Berglihn}{olafb@pvv.org},^^A {1999/11/29}{3-char comment delimiter don't work (Python)}
%   \lstthanks{Peter~Biechele}{peter.biechele@physik.uni-freiburg.de},
%   \lstthanks{Kai~Below}{below@tu-harburg.de},
%   \lstthanks{David~Carlisle}{carlisle@cs.man.ac.uk},
%   \lstthanks{Patrick~Cousot}{Patrick.Cousot@wanadoo.fr},
%   \lstthanks{Holger~Danielsson}{dani@fbg.schwerte.de},
%   \lstthanks{Detlev~Dr\"oge}{droege@informatik.uni-koblenz.de},
%   \lstthanks{Anders~Edenbrandt}{Anders.Edenbrandt@dna.lth.se},
%   \lstthanks{David~John~Evans}{Matrix.Software@dial.pipex.com},
%   \lstthanks{Harald~Harders}{h.harders@tu-bs.de},
%   \lstthanks{Christian~Haul}{haul@dvs1.informatik.tu-darmstadt.de},
%   \lstthanks{Aidan~Philip~Heerdegen}{Aidan.Heerdegen@anu.edu.au},
%   \lstthanks{Jim~Hefferon}{jhefferon@smcvt.edu},
%   \lstthanks{J\"urgen~Heim}{heim@astro.uni-tuebingen.de},
%   \lstthanks{Dr.~Jobst~Hoffmann}{HOFFMANN@rz.rwth-aachen.de},
%   \lstthanks{Torben~Hoffmann}{toho@it.dtu.dk},
%   \lstthanks{Berthold~H\"ollmann}{bhoel@starship.python.net},
%   \lstthanks{Ralf~Imh\"auser}{snoopy@tribal.line.org},
%   \lstthanks{R.~Isernhagen}{R.Isernhagen@FH-Wolfenbuettel.DE},
%   \lstthanks{Marcin~Kasperski}{Marcin.Kasperski@softax.com.pl},
%   \lstthanks{Dr.~Peter~Leibner}{Peter.Leibner@sta.siemens.de},
%   \lstthanks{Thomas~Leduc}{email?},
%   \lstthanks{Magnus~Lewis-Smith}{Magnus.Lewis-Smith@pace.co.uk},
%   \lstthanks{Andreas~Matthias}{amat@kabsi.at},
%   \lstthanks{Knut~M\"uller}{knut@physik3.gwdg.de},
%   \lstthanks{Torsten~Neuer}{tneuer@inwise.de},
%   \lstthanks{Heiko~Oberdiek}{oberdiek@ruf.uni-freiburg.de},
%   \lstthanks{Zvezdan~V.~Petkovic}{zpetkovic@acm.org},
%   \lstthanks{Michael~Piotrowski}{mxp@linguistik.uni-erlangen.de},
%   \lstthanks{Manfred~Piringer}{sz0490@rrze.uni-erlangen.de},
%   \lstthanks{Vincent~Poirriez}{Vincent.Poirriez@univ-valenciennes.fr},
%   \lstthanks{Ralf~Quast}{rquast@hs.uni-hamburg.de},
%   \lstthanks{Aslak~Raanes}{araanes@ifi.ntnu.no},
%   \lstthanks{Detlef~Reimers}{dreimers@aol.com},
%   \lstthanks{Magne~Rudshaug}{magne@ife.no},
%   \lstthanks{Andreas~Stephan}{Andreas.Stephan@victoria.de},
%   \lstthanks{Gregory~Van~Vooren}{Gregory.VanVooren@rug.ac.be},
%   \lstthanks{Dominique~de~Waleffe}{ddw@miscrit.be},
%   \lstthanks{Michael~Weber}{mweber@informatik.hu-berlin.de},
%   \lstthanks{Sonja~Weidmann}{Sonja.Weidmann@gmx.de},
%   \lstthanks{Herbert~Weinhandl}{weinhand@grz08u.unileoben.ac.at},
%   \lstthanks{Michael~Wiese}{wiese@itwm.uni-kl.de},
%   \lstthanks{J\"orn~Wilms}{wilms@rocinante.colorado.edu} and
%   \lstthanks{Kai~Wollenweber}{kai@ece.WPI.EDU}.
% \end{quote}
% This list is probably not complete since I have't updated it at all.
% I'll use the next release to do so.
%
%
% \section{Tips and tricks}
%
%
% \subsection{Troubleshooting}\lstlabel{uTroubleshooting}
%
% Before you make a bug report, consult the reference guide whether the problem
% is already known. If not, please try to locate the problem. Start from the
% minimal in section \ref{uAMinimalFile}. If you use other packages, load only
% the required ones. Then add the \LaTeX\ code which causes the problem, but
% keep it short and eliminate packages not necessary. Remove some code from the
% file until the problem disappears.
% Then you've found a crucial piece. Start over with removing until all code
% is substantial. Then send a bug report via email to \lstemail\ and include
% the now modified minimal file and the created \texttt{.log}-file.
% If you use a very special package (i.e.~not on CTAN), also include the
% package if its software license allows it.
%
%
% \subsection{National characters}\lstlabel{uNationalCharacters}
%
% Apart from typing in national characters directly, you can use the `escape'
% feature described in section \ref{rEscapingToLaTeX}.
% The keys \ikeyname{escapechar}, \ikeyname{escapeinside}, and \ikeyname{texcl}
% allow partial usage of \LaTeX\ code, for example:
% \begin{lstsample}{}{}
%    \begin{lstlisting}[escapechar=`]{}
%    `\"a \`e {\=\i} {\oe} \u u`
%    \end{lstlisting}
% \end{lstsample}
% The escape character delimits the \LaTeX\ code: the first reverse apostrophe
% starts the escape, the second belongs to the grave accent command, and the
% third eventually ends the escape.
%
% If you use $\Lambda$ (Lambda, the \LaTeX\ pendant to Omega) and want, for
% example, Arabic comment lines, you need not to write |\begin{arab}| \ldots\ 
% |\end{arab}| each comment line. This can be automated:
% \begin{verbatim}
%    \lstset{escapebegin=\begin{arab},escapeend=\end{arab}}
%
%    \begin{lstlisting}[texcl]{}
%    // Replace text by Arabic comment.
%    for (int i=0; i<1; i++) { };
%    \end{lstlisting}\end{verbatim}
% If your programming language doesn't have comment lines, you'll have to use
% \ikeyname{escapechar} or \ikeyname{escapeinside}:
% \begin{verbatim}
%    \lstset{escapebegin=\begin{greek},escapeend=\end{greek}}
%
%    \begin{lstlisting}[escapeinside=`']{}
%    /* `Replace text by Greek comment.' */
%    for (int i=0; i<1; i++) { };
%    \end{lstlisting}\end{verbatim}
% Note that the delimiters |`| and |'| are essential here. The example doesn't
% work without them. There is a more clever way if the comment delimiters of
% the programming language are single characters like the braces in Pascal:
% \begin{verbatim}
%    \lstset{escapebegin=\textbraceleft\begin{arab},
%            escapeend=\end{arab}\textbraceright}
%
%    \begin{lstlisting}[escapeinside=\{\}]{}
%    for i:=maxint to 0 do
%    begin
%        { Replace text by Arabic comment. }
%    end;
%    \end{lstlisting}\end{verbatim}
% Please note that the `interface' to $\Lambda$ is completely untested.
% Reports are welcome!
%
%
% \subsection{Listings with graphics}
%
% \lsthelper{Herbert~Weinhandl}{1999/09/06}{listings + eps} found a very easy
% way to include graphics in listings. Thanks for contributing this idea---an
% idea I never have had.
%
% Some programming languages allow the dollar sign to be part of an identifier.
% But except for intermediate function names or library functions, this
% character is most often unused. The \packagename{listings} package defines
% the \ikeyname{mathescape} key, which (if on) lets `|$|' escape to \TeX's math
% mode. This makes the dollar character an excellent candidate for our purpose
% here: use a package which can include a graphic, set \ikeyname{mathescape}
% true, and include the graphic between two dollar signs, which are inside a
% comment.
%
% The following example is originally from a header file I got from Herbert.
% For the presentation here I use the \texttt{lstlisting} environment and an
% excerpt from the header file. The |\includegraphics| command is from
% David Carlisle's \packagename{graphics} bundle.
% \begin{verbatim}
%   \begin{lstlisting}[mathescape=true]{}
%   /*
%    $ \includegraphics[height=1cm]{defs-p1.eps} $
%    */
%   typedef struct {
%     Atom_T          *V_ptr;   /* pointer to Vacancy in grid    */
%     Atom_T          *x_ptr;   /* pointer to (A|B) Atom in grid */
%   } ABV_Pair_T;
%   \end{lstlisting}\end{verbatim}
% The result looks pretty good. Unfortunately you can't see it.
%
%
% \subsection{Bold typewriter fonts}
%
% Many people asked for bold typewriter fonts since they aren't included in
% the \LaTeX\ standard distribution. Here now one answer on how to use them
% in spite of that.
% Firstly you'll need Metafont source files for bold typewriter, e.g.~
% \texttt{cmbtt8.mf}, \texttt{cmbtt9.mf} and \texttt{cmbtt10.mf} from
% \href{ftp://ftp.dante.de/tex-archive/fonts/cm/mf-extra/bold}
%      {CTAN/fonts/cm/mf-extra/bold}.
% Secondly you have to create \texttt{.tfm}-files, i.e.~run the Metafont
% program on these sources. This is possibly done automatically when you use
% the fonts in a document. Finally you must tell \LaTeX\ that you've installed
% bold typewriter fonts. Just use
% \begin{verbatim}
%    \DeclareFontShape{OT1}{cmtt}{bx}{n}
%         {<5><6><7><8>cmbtt8%
%          <9>cmbtt9%
%          <10><10.95>cmbtt10%
%          <12><14.4><17.28><20.74><24.88>cmbtt10%
%          }{}\end{verbatim}
% (before |\begin{document}|). That's all!
%
%
% \subsection{How to}\label{uHowTo}
%
%
% \paragraph{Reference line numbers}
% You want to put |\label{|\meta{whatever}|}| into a \LaTeX\ escape which is
% inside a comment whose delimiters aren't printed? The compiler won't see the
% \LaTeX\ code since inside a comment, and the \packagename{listings} package
% won't print anything since the delimiters are dropped and |\label| doesn't
% produce any printable output. Well, your wish is granted.
%
% In Pascal, for example, you could make the package recognize the `special'
% comment delimiters |(*@| and |@*)| as begin-escape and end-escape sequences.
% Then you can use this special comment for |\label|s and other things.
% \begin{lstsample}{\lstset{labelstyle=\tiny,labelstep=2,labelsep=5pt}}{}
%    \lstset{escapeinside={(*@}{@*)}}
%
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { comment }(*@\label{comment}@*)
%    end;
%    \end{lstlisting}
%    Line \ref{comment} shows a comment.
% \end{lstsample}
% \begin{advise}
% \item Can I use `|(*@|' and `|*)|' instead?
%       \advisespace
%       Yes.
% \item Can I use `|(*|' and `|*)|' instead?
%       \advisespace
%       Sure. If you want this.
% \item Can I use `|{@|' and `|@}|' instead?
%       \advisespace
%       No, never! The second delimiter is not allowed. The character `|@|' is
%       defined to check whether the escape is over. But reading the lonely
%       `end-argument' brace, \TeX\ encounters the error `\texttt{Argument of @
%       has an extra \char125}'. Sorry.
% \item Can I use `|{|' and `|}|' instead?
%       \advisespace
%       No. Again the second delimiter is not allowed. Here now \TeX\ would
%       give you a `\texttt{Runaway argument}' error. Since `|}|' is defined to
%       check whether the escape is over, it won't work as `end-argument' brace.
% \item And how can I use a comment line?
%       \advisespace
%       For example, write `|escapeinside={//*}{\^^M}|'. Here |\^^M| represents
%       the end of line character.
% \end{advise}
%
%
% \part{Reference guide}
%
%
% \section{Main reference}\lstlabel{rMainReference}
%
% Your first training is completed. Now that you've left the user's guide, the
% friend telling you what to do has gone. Get more practice and become a
% journeyman!^^A :-)
% \begin{advise}
% \item Actually, the friend hasn't gone. There are still some advices, but
%       only from time to time.
% \end{advise}
%
%
%
% \subsection{Data types}
%
%
% \paragraph{General notes}
% The parameters of commands and keys are specified either by their type or
% via explicitly given arguments. For example, a key is presented either as
% `key$=$value' pair or as `key$=$data type'. Both value and data type will be
% enclosed in \meta{\space}. Most data types and values are self-explanatory.
% However some hints can't be wrong.
% \begin{enumerate}
% \item A list always means a comma separated list. You must put braces around
%       such a list. Otherwise you'll get in trouble with the
%       \packagename{keyval} package; it complains about an undefined key.
% \item If you use an optional argument of a key inside an optional key$=$value
%       list, you must put braces around the whole value.
% \item A vertical rule indicates an alternative, e.g.~
%       \meta{\alternative{true,false}} allows \texttt{true} or \texttt{false}
%       as arguments.
% \item If you need one of the special characters |{}#%\| in or as an argument,
%       the character(s) must be preceded by a backslash. This means that you
%       must write |\}| for the single character `right brace', for example.
% \end{enumerate}
%
%
% \paragraph{Some data types}
% \begin{syntax}
% \item \meta{basic style}---token sequence for type selection
%           (size, typeface, colour, etc.)
% \item \meta{character}---a single character
% \item \meta{character sequence}---a character string
% \item \meta{delimiter}---a character string used as delimiter
% \item \meta{dimension}---a \TeX\ dimension
% \item \meta{identifiers}---a list of identifiers
% \item \meta{key=value list}---a list of key$=$value pairs
% \item \meta{keywords}---a list of keywords
% \item \meta{keyword classes}---a list of keyword classes;
%           keyword classes are, for example, \texttt{keywords},
%           \texttt{keywords2}, and \texttt{texcs}
% \item \meta{number}---a \TeX\ number
% \item \meta{style}---like \meta{basic style} but the very last token
%           \emph{might} take exactly one argument, namely the character
%           string to typeset
% \item \meta{subset of \ldots}---any combination of the characters
% \item \meta{tokens}---arbitrary token sequence
%           (potentially unsafe since arbitrary, so use it wisely)
% \end{syntax}
%
%
% \paragraph{Scheme of presentation}
% \begin{syntax}
% \item[version,default,hints] \texttt{command}, \texttt{environment} or
%       \keyname{key} with \meta{parameters}
%
%       explanation and more details
% \end{syntax}
% The label in the left margin (if present) provides information about the
% command, environment or key: `\textit{addon}' indicates additional
% functionality, `\textit{new}' a new and `\textit{changed}' a modified key,
% `\textit{data}' a data containing command (which is therefore adjustable via
% |\renewcommand|), and so on.
%
% The label in the right margin is the introductory version number.
% If you find verbatim text next to the number then this is the predefined
% value. Note that some keys are reset every listing, namely the keys which
% can be used on individual listings only.
%
%
% \subsection{Languages and styles}\lstlabel{rLanguagesAndStyles}
%
% Table \lstref{uPredefinedLanguages}{} on page \pageref{uPredefinedLanguages}
% shows all languages and dialects provided by \texttt{lstdrvrs.dtx}. They have
% all bugs coming from the language defining commands described in section
% \ref{rLanguageDefinitions}, e.g.~in Ada and Matlab it is still possible that
% the package assumes a string where none exists.
% \begin{advise}
% \item Err, have you just said thet the package isn't suitable to typeset Ada
%       or Matlab code?
%       \advisespace
%       No, sometimes the highlighting isn't correct. These rare cases are
%       defined in section \lstref{rLanguageDefinitions}{} in the paragraph
%       about strings.
% \end{advise}
% The `empty' language detects
% no keywords, no comments, no strings, and so on. Note that the arguments
% \meta{language}, \meta{dialect}, and \meta{style name} are case insensitive
% and that spaces have no effect.
% \begin{syntax}
% \item[0.17,{{}}] \rkeyname{language}|=|\oarg{dialect}\meta{language}
%
%       activates a (dialect of a) programming language.
%
% \item[0.19] \rkeyname{defaultdialect}|=|\oarg{dialect}\meta{language}
%
%       defines \meta{dialect} as default dialect for \meta{language}.
%       This dialect will be used for \meta{language} if no dialect is given
%       explicitly. If you have defined a default dialect other than empty,
%       for example |defaultdialect=[iama]fool|, you can't select the `empty'
%       dialect, even not with |language=[]fool|.
%
% \item[0.18,{{}}] \rkeyname{style}|=|\meta{style name}
%
%       activates the key$=$value list stored with |\lstdefinestyle|.
%
% \item[0.19] \rcmdname\lstdefinestyle\marg{style name}\marg{key=value list}
%
%       stores the key$=$value list.
% \end{syntax}
% \begin{advise}
% \item It's easy to crash the package with `\ikeyname{style}'. Write
%       '|\lstdefinestyle{crash}{style=crash}|' and '|\lstset{style=crash}|'.
%       \TeX's capacity will exceed, sorry [parameter stack size]. Only bad
%       boys use such recursive calls, but only good girls use this package.
%       Thus the problem is of minor interest.
% \end{advise}
%
%
% \subsection{Typesetting listings}\lstlabel{rTypesettingListings}
%
% Please note that all optional \meta{key=value list}s modify parameters for
% single listings only.
% \begin{syntax}
% \item[0.19] \rcmdname\lstset\marg{key=value list}
%
%       sets the values of the specified keys, see also section
%       \ref{uTheKey=ValueInterface}.
%
% \item[0.18] \rcmdname\lstinline\oarg{key=value list}
%
%       works like |\verb| but uses the active language and style.
%       You can write `|\lstinline!var i:integer;!|' and get
%       `\lstinline!var i:integer;!'. Note that these listings use flexible
%       columns except |flexiblecolumns=false| is a key$=$value pair in the
%       optional argument.
%
% \item[0.1] \rcmdname\lstinputlisting\oarg{key=value list}\marg{file name}
%
%       typesets the stand alone source code file as a displayed listing,
%       i.e.~the command starts a new paragraph for the listing.
%
% \item[0.15] |lstlisting|\oarg{key=value list}\marg{name}
%
%       typesets the code between |\begin{lstlisting}| (+ arguments + line
%       break) and |\end{lstlisting}| as a displayed listing. Source code
%       directly before and \LaTeX\ code after the end of environment is
%       typeset respectively executed.
%
%       Same named listings have common line counters, i.e.~the second (same
%       named) listing continues the first, the third continues the second, and
%       so on. There are two exceptions: An empty-named listing starts with
%       line number 1 and is continued with space-named listings (= |{ }|).
%
% \item[0.18,false] \rkeyname{extendedchars}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{extendedchars}
%
%       allows or prohibits extended characters in listings, i.e.~characters
%       with codes 128--255. If you use extended characters, you should use the
%       \packagename{fontenc} or \packagename{inputenc} package.
%
% \item[0.19,0,changed] \rkeyname{gobble}|=|\meta{number}
%
%       gobbles \meta{number} characters at the beginning of each \emph{environment}
%       code line. Tabulators might expand to |tabsize| spaces before they are
%       gobbled. Code lines with less than \meta{number} characters are viewed
%       empty.
%
%       Don't indent the end of environment by more than \ikeyname{gobble}
%       characters, but less characters are allowed.
%
% \item[0.1,1] \rkeyname{first}|=|\meta{number}
% \item[0.1,9999999] \rkeyname{last}|=|\meta{number}
%
%       can be used on individual listings only. They determine the (relative)
%       physical input lines used to print displayed listings.
%
% \item[0.12,true] \rkeyname{print}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{print}
%
%       controls whether displayed listings are typeset.
%       If you use |print=false| at the beginning of a document to compile a
%       draft version, you might use |print| in optional arguments to typeset
%       particular listings despite of that.
%
% \item[0.20,false] \rkeyname{showlines}=\meta{\alternative{true,false}}\syntaxor\rkeyname{showlines}
%
%       If true, the package prints empty lines at the end of listings.
%       Otherwise these lines are dropped (but they count for line numbering).
%
% \item[0.20,tbp] \rkeyname{float}|=|\meta{subset of \textup{\texttt{tbph}}}\syntaxor\rkeyname{float}
%
%       makes sense with individual displayed listings only and lets them
%       float. The argument controls where \LaTeX\ is allowed to put the
%       float: at the top or bottom of the current/next page, on a separate
%       page, or here $=$ where the listing is.
%
%^^A \item[0.21,,new] \rkeyname{floatplacement}|=|\meta{place specifiers}
%
% \item[0.18,c] \rkeyname{boxpos}|=|\meta{\alternative{b,c,t}}
%
%       Sometimes the \packagename{listings} package puts a |\hbox| around a
%       listing---or it couldn't be printed or even processed correctly.
%       The key determines the vertical alignment to the surrounding material:
%       bottom baseline, centered or top baseline.
%
%       Note that |\hbox|ed listings don't use \ikeyname{spread}, for example.
%
% \item[0.21,,new] \rkeyname{aboveskip}|=|\meta{dimension}
% \item[0.21,,new] \rkeyname{belowskip}|=|\meta{dimension}
%
%       define the space above and below displayed listings.
%
% \item[0.17,0pt] \rkeyname{lineskip}|=|\meta{dimension}
%
%       specifies the additional space between lines in listings.
%
%\iffalse
% \item[0.20] \rkeyname{continue}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{continue}
%
%       puts the package over to (not) continued listings.
%       This affects \ikeyname{pre} and \ikeyname{post} (both obsolete) and the
%       list of listings:
%       If you don't specifiy a caption, continued listings get no entry.
%\fi
% \end{syntax}
%
%
% \subsection{Figure out the appearance}\lstlabel{rFigureOutTheAppearance}
%
% \begin{syntax}
% \item[0.18,{{}}] \rkeyname{basicstyle}|=|\meta{basic style}
% \item[0.18,{{}}] \rkeyname{identifierstyle}|=|\meta{style}
% \item[0.11,\itshape] \rkeyname{commentstyle}|=|\meta{style}
% \item[0.12,{{}}] \rkeyname{stringstyle}|=|\meta{style}
% \item[0.11,\bfseries] \rkeyname{keywordstyle}|=|\meta{style}
% \item[0.19,keywordstyle] \rkeyname{ndkeywordstyle}|=|\meta{style}
% \item[0.20,keywordstyle,optional] \rkeyname{texcsstyle}|=|\meta{style}
% \item[0.20,keywordstyle,optional] \rkeyname{directivestyle}|=|\meta{style}
%
%       determine the style in which special parts of a listing appear.
%       The \emph{last} token (except \ikeyname{basicstyle}) might be an
%       one-parameter command like |\textbf| or |\underbar|.
%
% \item[0.21,,new] \rkeyname{emph}|=|\oarg{number}\marg{identifiers}
% \item[0.21,,new] \rkeyname{moreemph}|=|\oarg{number}\marg{identifiers}
% \item[0.21,,new] \rkeyname{deleteemph}|=|\oarg{number}\marg{identifiers}
%
%       define, add and remove \meta{identifiers} from `emphasize class
%       \meta{number}'. If you don't give an optional argument, the
%       package assumes \meta{number} $=1$.
%
% \item[0.21,,new] \rkeyname{emphstyle}|=|\oarg{number}\marg{style}
%
%       defines the style for class \meta{number}.
%
% \item[0.12,true] \rkeyname{stringspaces}|=|\meta{\alternative{true,false}}
%
%       lets blank spaces in strings appear {\textvisiblespace} or as blank
%       spaces.
%
% \item[0.20,false] \rkeyname{visiblespaces}|=|\meta{\alternative{true,false}}
%
%       lets all blank spaces appear {\textvisiblespace} or as blank spaces.
%
% \item[0.20,false] \rkeyname{visibletabs}|=|\meta{\alternative{true,false}}
%
%       make tabulators visible or invisible. A visible tabulator looks like
%       \lstinline[visibletabs]!	!, but that can be changed. If you choose
%       invisible tabulators but visible spaces, tabulators are converted to
%       an appropriate number of spaces.
%
% \item[0.20] \rkeyname{tab}|=|\meta{tokens}
%
%       \meta{tokens} is used to print a visible tabulator. You might want to use |$\to$|, |$\mapsto$|, |$\dashv$| or something like that instead of the strange default definition.
%
% \item[0.12,8] \rkeyname{tabsize}|=|\meta{number}
%
%       sets tabulator stops at columns $\meta{number}+1$, $2\cdot\meta{number}+1$, $3\cdot\meta{number}+1$, and so on.
%       Each tabulator in a listing moves the current column to the next
%       tabulator stop.
%
% \item[0.19,\bigbreak] \rkeyname{formfeed}|=|\meta{tokens}
%
%       Whenever a listing contains a form feed \meta{tokens} is executed.
% \end{syntax}
%
%
% \subsection{Frames}\lstlabel{rFrames}
%
% \begin{syntax}
% \item[0.19,{{}}] \rkeyname{frame}|=|\meta{subset of \textup{\texttt{trblTRBL}}}
%
%		The characters \texttt{trblTRBL} are attached to lines at the top and
%       bottom of a listing and to lines on the right and left. There are two
%       lines if you use upper case letters. If you want a single frame around
%       a listing, write |frame=tlrb| or |frame=bltr|, for example. If you want
%       double lines at the top and on the left and no other lines, write
%       |frame=TL|.
%
%       Note that frames reside outside the listing's space.
%       Use |spread| if you want to shrink frames (to |\linewidth| for example)
%       and use |indent| to move line numbers inside frames.
%
% \item[0.19,0.4pt] \rkeyname{framerulewidth}|=|\meta{dimension}
% \item[0.19,2pt] \rkeyname{framerulesep}|=|\meta{dimension}
%
%		These keys control the width of the rules and the space between double
%       rules.
%
% \item[0.19,3pt] \rkeyname{frametextsep}|=|\meta{dimension}
%
%		controls the space between frame and listing.
%
% \item[0.20,0pt] \rkeyname{framespread}|=|\meta{dimension}
%
%       makes the frame on each side half \meta{dimension} wider.
%
% \item[0.20,ffff] \rkeyname{frameround}|=|\meta{\alternative{t,f}}\meta{\alternative{t,f}}\meta{\alternative{t,f}}\meta{\alternative{t,f}}
%
%       The four letters are attached to the top right, bottom right, bottom
%       left and top left corner. In this order. \texttt{t} makes the
%       according corner round. If you use round corners, the rule width is
%       controlled via |\thinlines| and |\thicklines|.
%
%       Note: The size of the quarter circles depends on \ikeyname{frametextsep}
%       and is independent from \ikeyname{framespread}. The size is possibly
%       adjusted to fit \LaTeX's circle sizes.
%
% \item[0.21,,new] \rkeyname{backgroundcolor}|=|\marg{color model}\meta{color}
% \item[0.21,,new] \rkeyname{framerulecolor}|=|\marg{color model}\meta{color}
%
%       specify the colour of the background and the rules respectively.
%       Note that you need the \packagename{color} package to use these keys.
% \end{syntax}
% \ikeyname{frame} does not work with |fancyvrb=true| or when the package
% internally makes a |\hbox| around the listing! And there are certainly more
% problems with other commands. Take the time to report in.
% \begin{lstsample}{}{}
%    \lstset{framespread=5mm}
%    \begin{lstlisting}[frame=trbl]{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
%
% Do you want exotic frames?
% Try the following key if you want for example
% \begin{lstsample}{\lstset{frameshape={RYRYNYYYY}{yny}{yny}{RYRYNYYYY}}}{}
%    \begin{lstlisting}{}
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% \begin{syntax}
% \item[0.20] \rkeyname{frameshape}|=|\marg{top shape}\marg{left shape}\marg{right shape}\marg{bottom shape}
%
%       gives you full control over the drawn frame parts.
%       The arguments are not case sensitive.
%
%       Both \meta{left shape} and \meta{right shape} are `left-to-right'
%       \alternative{y,n} character sequences (or empty). Each |y| lets the
%       package draw a rule, otherwise the rule is blank. These vertical rules
%       are drawn `left-to-right' according to the specified shapes.
%       The example above uses |yny|.
%
%       \meta{top shape} and \meta{bottom shape} are `left-rule-right'
%       sequences (or empty). The first `left-rule-right' sequence is attached
%       to the most inner rule, the second to the next, and so on.
%       Each sequence has three characters: `rule' is either |y| or |n|;
%       `left' and `right' are |y|, |n| or |r| (which makes a corner round).
%       The example uses |RYRYNYYYY| for both shapes:
%       |RYR| describes the most inner (top and bottom) frame shape, |YNY|
%       the middle, and |YYY| the most outer.
% \end{syntax}
% To summarize, the example above used
% \begin{verbatim}
%    \lstset{frameshape={RYRYNYYYY}{yny}{yny}{RYRYNYYYY}}\end{verbatim}
% Note that you are not resticted to two or three levels.
% However you'll get in trouble if you use round corners when they are too big.
%
%
% \subsection{Captions}
%
% In despite of \LaTeX\ standard behaviour captions and floats are independent
% from each other here. You can use captions with non-floating listings.
% It's your choice whether a titled listing also gets a number, how the number
% looks like, and so on.
% \begin{syntax}
% \item[0.21] \rkeyname{title}|=|\meta{title text}
%
%       can be used on individual displayed listings only. \meta{title text}
%       is used for a title without any numbering and without a header.
%
% \item[0.20] \rkeyname{caption}|={|\oarg{short}\meta{caption text}|}|
%
%       can be used on individual displayed listings only. If you don't use
%       \oarg{short}, the package assumes \meta{short}$=$\meta{caption text}.
%       If \meta{short} is empty, the listing is neither numbered nor it
%       appears in the list of listings.
%
%       Note: The braces around the value are necessary if and only if you use
%       the optional \meta{short} argument (or if \meta{caption text} contains
%       |]|).
%
% \item[0.21,,new] \rkeyname{label}|=|\meta{name}
%
%       makes a listing with non-empty \meta{short} referable via
%       |\ref|\marg{name}.
%
% \item[0.16] \rcmdname\lstlistoflistings
%
%       prints a list of listings. The names are the (short) captions,
%       file names or names of the listings.
%
% \item[0.16,Listings,data] \rcmdname\lstlistlistingname
%
%       The header name for the list of listings.
%
% \item[0.20,Listing,data] \rcmdname\lstlistingname
%
%       The header name for listings with captions.
%
% \item[0.20,\arabic{lstlisting},data] \rcmdname\thelstlisting
%
%       prints the caption's label number.
%
% \item[0.20,t] \rkeyname{captionpos}|=|\meta{subset of \textup{\texttt{tb}}}
%
%       specifies the position(s) of the caption.
%
% \item[0.20,\smallskipamount] \rkeyname{abovecaptionskip}|=|\meta{dimension}
% \item[0.20,\smallskipamount] \rkeyname{belowcaptionskip}|=|\meta{dimension}
%
%       is the vertical space above respectively below each caption.
% \end{syntax}
%
%
% \subsection{Labels}
%
% \begin{syntax}
% \item[0.16,0] \rkeyname{labelstep}|=|\meta{number}
%
%       All lines with ``line number $\equiv 0$ modulo \meta{number}'' get a
%       label. Usually this label is the line number, but it's controlled by
%       |labelstyle| and |\thelstlabel|.
%       \meta{number} $=0$ turns the labels off.
%
% \item[0.16,{{}}] \rkeyname{labelstyle}|=|\meta{style}
%
%       determines the font and size of the labels.
%
% \item[0.20,\arabic{lstlabel},data] \rcmdname\thelstlabel
%
%       prints the lines' label numbers.
%
% \item[0.19,10pt] \rkeyname{labelsep}|=|\meta{dimension}
%
%       is the distance between label and listing.
%
% \item[0.20] \rkeyname{firstlabel}|=|\meta{number}
% \item[0.19,0] \rkeyname{advancelabel}|=|\meta{number}
%
%       sets respectively advances the number of the first label.
%       Both keys must be used in the optional key$=$value list.
% \end{syntax}
% We show an example on how to redefine |\thelstlabel|. But if you test the
% example, you won't get the result shown on the left.
% \begin{verbatim}
%    \renewcommand*\thelstlabel{\oldstylenums{\the\value{lstlabel}}}\end{verbatim}
% \begin{lstsample}{\lstset{labelstep=-1}\label{rDecreasingLabels}\renewcommand*\thelstlabel{\oldstylenums{\the\value{lstlabel}}}}{}
%    \begin{lstlisting}[firstlabel=753]{}
%    begin { empty lines }
%
%
%
%
%
%
%    end; { empty lines }
%    \end{lstlisting}
% \end{lstsample}
%
% \textbf{Exercise:}
% The example shows a sequence $n,n+1,\ldots,n+7$ of 8 three-digit figures such that the sequence contains each digit $0,1,\ldots,9$.
% But 8 is not minimal with that property.
% Find the minimal number and prove that it is minimal.
% Minimal means nonnegative number here.
% How many minimal sequences do exist?
%
% Now look at the generalized problem:
% Let $k\in\{1,\ldots,10\}$ be given.
% Find the minimal number $m\in\{1,\ldots,10\}$ such that there is a sequence $n,{n+1},\ldots,{n+m-1}$ of $m$ $k$-digit figures which contains each digit $\{0,\ldots,9\}$.
% Prove that the number is minimal.
% How many minimal sequences do exist?
%
% If you solve this problem with a computer, write a \TeX\ program!
%
%
% \subsection{Indexing}
%
% \begin{syntax}
% \item[0.19,,addon] \rkeyname{index}|=|\oarg{number}\oarg{keyword classes}\marg{identifiers}
% \item[0.21,,new] \rkeyname{moreindex}|=|\oarg{number}\oarg{keyword classes}\marg{identifiers}
% \item[0.21,,new] \rkeyname{deleteindex}|=|\oarg{number}\oarg{keyword classes}\marg{identifiers}
%
%       define, add and remove \meta{identifiers} and \meta{keyword classes}
%       from index list no.~\meta{number}. If you don't specify the optional
%       number, the package assumes \meta{number} $=1$.
%
%		Each appearance of the explicitly given identifiers and each appearance
%       of the identifiers of the specified \meta{keyword classes} is indexed.
%       For example, you could write |index=[1][keywords]| to index all
%       keywords. Note that |[1]| is required here---otherwise we couldn't use
%       the second optional argument.
%
% \item[0.19,\lstindexmacro,{renamed,addon}] \rkeyname{indexstyle}|=|\oarg{number}\meta{tokens \textup(`one parameter' macro\textup)}
%
%       \meta{tokens} actually indexes the identifiers for list
%       no.~\meta{number}. In contrast to the style keys, \meta{tokens}
%       \emph{must} read exactly one parameter, namely the identifier.
%       Default definition is\vspace{-.5\baselineskip}
% \begin{verbatim}
%    \newcommand\lstindexmacro[1]{\index{{\ttfamily#1}}}\end{verbatim}
%       which you shouldn't modify.
%       Define your own indexing commands and use them as argument to this key.
% \end{syntax}
%
%
% \subsection{Line shape and breaking}\lstlabel{rLineShapeAndBreaking}
%
% \begin{syntax}
% \item[0.21,\linewidth] \rkeyname{linewidth}|=|\meta{dimension}
%
%       defines the base line width for listings. Please note that other keys,
%       e.g.~\ikeyname{spread}, are taken into account additionally.
%
% \item[0.16,0pt,bug] \rkeyname{spread}|=|\meta{dimension}\syntaxor\rkeyname{spread}|={|\meta{inner}|,|\meta{outer}|}|
%
%       defines \emph{additional} line width for listings, which may avoid
%       overfull |\hbox|es if a listing has long lines. The inner and outer
%       spread is given explicitly or is equally shared. For one sided
%       documents `inner' and `outer' have the effect of `left' and `right'.
%       Note that \ikeyname{indent} is always `left'.
%
%       Bug (two sided documents):
%       At top of page it's possible that the package uses inner instead of
%       outer spread or vice versa. This happens when \TeX\ finally moves one
%       or two source code lines to the next page, but hasn't decided it when
%       the \packagename{listings} package processes them. Work-around:
%       interrupt the listing and/or use an explicit |\newpage|.
%
% \item[0.19,0pt] \rkeyname{indent}|=|\meta{dimension}
%
%       indents each listing by \meta{dimension}. This is the best way to move
%       line numbers and the listing to the right (or left if the dimension is
%       negative).
%
% \item[0.19,false] \rkeyname{wholeline}|=|\meta{\alternative{true,false}}
%
%       prevents or lets the package use indention from list environments like
%       \texttt{enumerate} or \texttt{itemize}.
%
% \item[0.20,false] \rkeyname{breaklines}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{breaklines}
%
%       activates or deactivates automatic line breaking of long lines.
%
% \item[0.20,20pt] \rkeyname{breakindent}|=|\meta{dimension}
%
%       is the indention of the second, third, \ldots\ line of broken lines.
%
% \item[0.20,true] \rkeyname{breakautoindent}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{breakautoindent}
%
%       activates or deactivates automatic indention of broken lines.
%       This indention is used additionally to \rkeyname{breakindent} and is equal to the indention of the source code line, see the example below.
%
%       |visiblespaces=true| converts `invisibles' spaces and tabulators to visible \textvisiblespace.
%       This will set `auto indent' to 0pt, i.e.~there is no automatic indention.
%
% \item[0.20,{{}}] \rkeyname{prebreak}|=|\meta{tokens}
% \item[0.20,{{}}] \rkeyname{postbreak}|=|\meta{tokens}
%
%       \meta{tokens} appear at the end of the current line respectively at the beginning of the next (broken part of the) line.
%
%       You must not use dynamic space (in particular spaces) since internally we use |\discretionary|.
%       However |\space| is redefined to be used inside \meta{tokens}.
% \end{syntax}
% We use tabulators now to create long lines, but the verbatim part uses |tabsize=1|.
%
% \begin{lstsample}{\lstset{string="}}{\lstset{tabsize=1}\hfuzz=1in}
%    \lstset{postbreak=\space\space,breakindent=20pt,breaklines}
%
%    \begin{lstlisting}{}
%    		"A very long string doesn't fit the current line width."
%    				"An even longer line doesn't fit also, of course, and goes over three lines."
%    \end{lstlisting}
%
%    \begin{lstlisting}[breakautoindent=false]{}
%    		{ Now auto indention is off, and only breakindent=20pt and postbreak are used. }
%    \end{lstlisting}
%
%    \begin{lstlisting}[visiblespaces]{}
%    		{ `visiblespaces=true' implies `breakautoindent=false'. }
%    \end{lstlisting}
% \end{lstsample}
%
%
% \subsection{Column alignment}
%
% \begin{syntax}
% \item[0.18,false] \rkeyname{flexiblecolumns}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{flexiblecolumns}
%
%       selects the flexible respectively fixed column format, refer section
%       \ref{uFixedAndFlexibleColumns}.
%
% \item[0.16] \rkeyname{basewidth}|=|\meta{dimension}\syntaxor
% \item[0.18,{{0.6em,0.45em}}] \rkeyname{basewidth}|={|\meta{fixed}|,|\meta{flexible mode}|}|
%
%       sets the width of a single character box for fixed and flexible column
%       mode (both to the same value or individually).
%
% \item[0.21,false] \rkeyname{keepspaces}|=|\meta{\alternative{true,false}}
%
%       |keepspaces=true| tells the package not to drop spaces to fix column
%       alignment and always converts tabulators to spaces.
%
% \item[0.19,c] \rkeyname{outputpos}|=|\meta{\alternative{c,l,r}}
%
%       controls horizontal orientation of smallest output units (keywords,
%       identifiers, etc.). The arguments work as follows, where vertical bars
%       visualize the effect:
%           $\vert$\lstinline[flexiblecolumns=f,outputpos=c]!listing!$\vert$,
%           $\vert$\lstinline[flexiblecolumns=f,outputpos=l]!listing!$\vert$, and
%           $\vert$\lstinline[flexiblecolumns=f,outputpos=r]!listing!$\vert$
%       in fixed column mode respectively
%           $\vert$\lstinline[flexiblecolumns=t,outputpos=c]!listing!$\vert$,
%           $\vert$\lstinline[flexiblecolumns=t,outputpos=l]!listing!$\vert$, and
%           $\vert$\lstinline[flexiblecolumns=t,outputpos=r]!listing!$\vert$
%       with flexible columns.
%
% \item[0.20,false] \rkeyname{fontadjust}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{fontadjust}
%
%       If true the package adjusts the base width every font selection.
%       This makes sense only if \ikeyname{basewidth} is given in font specific
%       units like `em' or `ex'---otherwise this boolean has no effect.
%
%       After loading the package it doesn't adjust the width every font
%       selection: it looks at \ikeyname{basewidth} each listing and uses the
%       value for the whole listing. This is possibly inadequate if the style
%       keys in section \ref{rFigureOutTheAppearance} make heavy font size
%       changes, see the example below.
%
%\iffalse
%       If you prefer the \packagename{LGrind} package rather than
%       \packagename{listings} (I can't imagine that ;\,--\,), you should try
%       |basewidth=1ex| together with |flexiblecolumns| and |fontadjust|,
%       but you have to play a bit with the base width.
%\fi
% \end{syntax}
% \begin{lstsample}{\lstset{basicstyle=\normalsize}}{}
%    \lstset{commentstyle=\scriptsize}
%    \begin{lstlisting}{}
%    { scriptsize font
%      doesn't look good }
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% \begin{lstsample}{\lstset{basicstyle=\normalsize,commentstyle=\scriptsize}}{}
%    \begin{lstlisting}[fontadjust]{}
%    { scriptsize font
%      looks better now }
%    for i:=maxint to 0 do
%    begin
%        { do nothing }
%    end;
%    \end{lstlisting}
% \end{lstsample}
% Note that \ikeyname{fontadjust} also effects the keywords!
%
%
% \subsection{Escaping to \LaTeX}\lstlabel{rEscapingToLaTeX}
%
% \textbf{Note:} {\itshape Any escape to \LaTeX\ may disturb the column
% alignment since the package can't control the spacing there.}
% \begin{syntax}
% \item[0.18,false] \rkeyname{texcl}|=|\meta{\alternative{true,false}}\syntaxor\rkeyname{texcl}
%
%       activates or deactivates \LaTeX\ comment lines. If activated, comment
%       line delimiters are printed as usual, but the comment line text (up to
%       the end of line) is read as \LaTeX\ code and typeset in comment style.
% \end{syntax}
% The example uses \Cpp\ comment lines (but doesn't say how to define them).
% Without |\upshape| we would get \textit{calculate} since the comment style
% is |\itshape|.
% \begin{lstsample}{\lstset{morecomment=[l]//}}{}
%    \begin{lstlisting}[texcl]{}
%    // \upshape calculate $a_{ij}$
%      A[i][j] = A[j][j]/A[i][j];
%    \end{lstlisting}
% \end{lstsample}
%
% \begin{syntax}
% \item[0.19,false] \rkeyname{mathescape}|=|\meta{\alternative{true,false}}
%
%       activates or deactivates special behaviour of the dollar sign.
%       If activated a dollar sign acts as \TeX's text math shift.
%
%       This key is useful if you want to typeset formulas in listings.
%
% \item[0.19,{{}}] \rkeyname{escapechar}|=|\meta{character}\syntaxor\rkeyname{escapechar}|={}|
%
%       If not empty the given character escapes the user to \LaTeX: all code
%       between two such characters is interpreted as \LaTeX\ code. Note that
%       \TeX's special characters must be entered with a preceding backslash,
%       e.g.~|escapechar=\%|.
%
% \item[0.20,{{}}] \rkeyname{escapeinside}|=|\meta{character}\meta{character}\syntaxor\rkeyname{escapeinside}|={}|
%
%       Is a generalization of \ikeyname{escapechar}. If the value is not
%       empty, the package escapes to \LaTeX\ between the first and second
%       character.
%
% \item[0.20,{{}}] \rkeyname{escapebegin}|=|\meta{tokens}
% \item[0.20,{{}}] \rkeyname{escapeend}|=|\meta{tokens}
%
%       The tokens are executed at the beginning respectively at the end of
%       each escape, in particular for \ikeyname{texcl}.
%       See section \ref{uNationalCharacters} for an application.
% \end{syntax}
%
% \begin{lstsample}{\lstset{morecomment=[l]//}}{}
%    \begin{lstlisting}[mathescape]{}
%    // calculate $a_{ij}$
%      $a_{ij} = a_{jj}/a_{ij}$;
%    \end{lstlisting}
% \end{lstsample}
%
% \begin{lstsample}{\lstset{morecomment=[l]//}}{}
%    \begin{lstlisting}[escapechar=\%]{}
%    // calc%ulate $a_{ij}$%
%      %$a_{ij} = a_{jj}/a_{ij}$%;
%    \end{lstlisting}
% \end{lstsample}
%
% \begin{lstsample}{\lstset{morecomment=[l]//}}{}
%    \lstset{escapeinside=`'}
%    \begin{lstlisting}{}
%    // calc`ulate $a_{ij}$'
%      `$a_{ij} = a_{jj}/a_{ij}$';
%    \end{lstlisting}
% \end{lstsample}
% In the first example the comment line up to $a_{ij}$ has been typeset in
% comment style and by the \packagename{listings} package. The $a_{ij}$ itself
% is typeset in `\TeX\ math mode' without comment style. About the half
% comment line of the second example has been typeset by this package.
% The rest is in `\LaTeX\ mode' without comment style.
%
% To avoid problems with the current and future version of this package:
% \begin{enumerate}
% \item Don't use any command of the \packagename{listings} package when you
%       have escaped to \LaTeX.
% \item Any environment must start and end inside the same escape.
% \item You might use |\def|, |\edef|, etc., but do not assume that the
%       definitions are present later---except they are |\global|.
% \item |\if \else \fi|, groups, math shifts |$| and |$$|, \ldots\ must be
%       balanced each escape.
% \item \ldots
% \end{enumerate}
% Expand that list yourself and mail me about new items.
%
%
% \subsection{Interface to \textsf{fancyvrb}}
%
% The \packagename{fancyvrb} package---fancy verbatims---from Timothy van Zandt
% provides macros for reading, writing and typesetting verbatim code. It has
% some remarkable features the \packagename{listings} package doesn't have.
% (Some are possible, but you must find somebody who implements them ; -- ).
% \begin{syntax}
% \item[0.19,,bug]|fancyvrb=|\meta{\alternative{true,false}}
%
%       activates or deactivates the interface. If active, verbatim code is
%       read by \packagename{fancyvrb} but typeset by \packagename{listings},
%       i.e.~with emphasized keywords, strings, comments, and so on.
%       Internally we use a very special definition of |\FancyVerbFormatLine|.
%
%       This interface works with |Verbatim|, |BVerbatim| and |LVerbatim|.
%       But you shouldn't use \packagename{fancyvrb}'s \keyname{defineactive}.
%       (As far as I can see it doesn't matter since it does nothing at all,
%       but for safety \ldots)
%       If \packagename{fancyvrb} and \packagename{listings} provide similar
%       functionality, you should use \packagename{fancyvrb}'s.
%
%       Bug (\keyname{commandchars}): If you use \packagename{fancyvrb}'s
%       \keyname{commandchars}, the used commands must not take arguments from
%       the verbatim code except the source code which is actually typeset.
%       For example, |\textcolor{red}{keyword}| is illegal since |red| is (used
%       to select the colour and) not typeset. There is an easy work-around:
%       write |\newcommand*\myred{\textcolor{red}}| and use |\myred{keyword}|
%       inside the verbatim code.
% \end{syntax}
%
% \iffancyvrb
% \begin{lstsample}{}{}
%    \lstset{morecomment=[l]\ }% :-)
%    \fvset{commandchars=\\\{\}}
%
%    \begin{BVerbatim}
%    First verbatim line.
%    \fbox{Second} verbatim line.
%    \end{BVerbatim}
%
%    \par\vspace{72.27pt}
%
%    \lstset{fancyvrb}
%    \begin{BVerbatim}
%    First verbatim line.
%    \fbox{Second} verbatim line.
%    \end{BVerbatim}
%    \lstset{fancyvrb=false}
% \end{lstsample}
% The lines typeset by the \packagename{listings} package are wider since the
% default \ikeyname{basewidth} equals not the width of a single typewriter type
% character.
% \else
% \begin{center}
%    \packagename{fancyvrb} seems to be unavailable on your platform, thus the
%    example couldn't be printed here.
% \end{center}
% \fi
%
%
% \subsection{Environments}\lstlabel{uEnvironments}
%
% If you want to define your own pretty-printing environments, try the following
% command. The syntax comes from \LaTeX's |\newenvironment|.
% \begin{syntax}
% \item[0.19] \rcmdname\lstnewenvironment\marg{name}\oarg{number of parameters}\oarg{opt.~default~arg.}\syntaxbreak
%       |{|\meta{starting code}|}||{|\meta{ending code}|}|
% \end{syntax}
% Both \texttt{lstlisting} and version 0.17 \texttt{listing} environment are
% defined with this command. The latter one is quite simple since the one and
% only and optional argument is the name.
% \begin{verbatim}
%   \lstnewenvironment{listing}[1][]
%       {\gdef\lst@intname{#1}}
%       {}\end{verbatim}
% The other is more difficult. First we test whether the nonoptional name
% argument is an EOL character. If this is the case, the user has forgotten
% the name. Then we use the optional key=value list.
% The rest ensures correct (continued) line numbering.
% \begin{verbatim}
%   \lstnewenvironment{lstlisting}[2][]
%       {\lst@TestEOLChar{#2}%
%        \lstset{#1}%
%        \csname lst@SetFirstLabel\endcsname}
%       {\csname lst@SaveFirstLabel\endcsname}\end{verbatim}
%
% Finally note that all \lst-environments can also be used in command fashion
% like this
% \begin{lstsample}{\lstset{language={},basicstyle=\ttfamily}}{}
%    \lstlisting[gobble=4]{}
%        \begin{lstlisting}{}
%        Silly sentence?
%        \end{listings}
%    \endlstlisting
% \end{lstsample}
%
%
% \subsection{Language specific keys}
%
% \begin{syntax}
% \item[0.19,false,optional] \rkeyname{printpod}|=|\meta{\alternative{true,false}}
%
%       prints or drops PODs in Perl.
%
% \item[0.20,true,optional] \rkeyname{usekeywordsinside}|=|\meta{\alternative{true,false}}
%
%       The package either use the first order keywords for HTML or prints all
%       identifiers inside |<>| in keyword style.
%
% \item[0.20,true,optional] \rkeyname{makemacrouse}|=|\meta{\alternative{true,false}}
%
%       Make specific: Macro use of identifiers, which are defined as first
%       order keywords, also prints the surrounding |$(| and |)| in keyword
%       style. e.g.~you could get
%           \textbf{\textdollar(}\textbf{strip} \textdollar(BIBS)\textbf{)}.
%       If deactivated you get
%           \textdollar(\textbf{strip} \textdollar(BIBS)).
% \end{syntax}
%
%
% \subsection{Language definitions}\lstlabel{rLanguageDefinitions}
%
% Language definitions and also some style definitions tend to have long
% definition parts. This is why I and possibly other people tend to forget
% commas between the key=value elements. If you select a language and get a
% |Missing| |=| |inserted| |for| |\ifnum| error, this is surely due to a
% missing comma after |keywords=|value. If you encounter unexspected
% characters after selecting a language (or style), you have either forgotten
% a comma or you have given to many arguments to a key, for example,
% |commentline={--}{!}|.
% \begin{syntax}
% \item[0.19] \rcmdname\lstdefinelanguage\syntaxnewline[\oarg{dialect}]\marg{language}\syntaxnewline[\oarg{base dialect}\marg{and base language}]\syntaxnewline\marg{key=value list}\syntaxnewline[\oarg{list of required aspects \textup(keywordcomments,texcs,etc.\textup)}]
%
%		defines a programming language. If the language definition is based on
%       another, you must specify the whole \oarg{base dialect}\marg{and base
%       language}. An empty \meta{base dialect} uses the default dialect!
%       Selecting the new language executes the \meta{key=value list} after
%       selecting the base language.
%
%       The last optional argument should specify all required \lst-aspects.
%       This is a delicate point since the aspects are described in the
%       developer's guide. You might use existing languages as templates.
%       For example, ANSI C uses \aspectname{keywords}, \aspectname{comments},
%       \aspectname{strings} and \aspectname{directives}.
%
%       |\lst@definelanguage| with same syntax defines languages in the driver
%       files.
%
% \item[0.18] \rcmdname\lstalias\marg{alias}\marg{language}
%
%       defines an alias for a programming language. Each \meta{alias} dialect
%       is redirected to the same dialect of \meta{language}.
%       It's also possible to define an alias for one particular dialect only:
%
% \item[0.18] \rcmdname\lstalias\oarg{alias dialect}\marg{alias}\oarg{dialect}\marg{language}
%
%       Here all four parameters are \emph{nonoptional} and an alias with empty
%       \meta{dialect} will select the default dialect. Note that aliases
%       can't be nested: The two aliases `|\lstalias{foo1}{foo2}|' and
%       `|\lstalias{foo2}{foo3}|' redirect |foo1| \emph{not} to |foo3|.
%
%		Note that a (local) configuration file possibly defines some aliases.
% \end{syntax}
%
%
% \paragraph{Keywords}
% We begin with keyword building keys. Note: {\itshape If you want to enter
% {\upshape|\|, |{|, |}|, |%|, |#|} or {\upshape|&|} inside or as an argument
% here or below, you must do it with a preceding backslash!}
% \begin{syntax}
% \item[0.11] \rkeyname{keywords}|=|\marg{keywords}
% \item[0.11] \rkeyname{morekeywords}|=|\marg{keywords}
% \item[0.18] \rkeyname{deletekeywords}|=|\marg{keywords}
%
% \item[0.19] \rkeyname{ndkeywords}|=|\marg{keywords}
% \item[0.19] \rkeyname{morendkeywords}|=|\marg{keywords}
% \item[0.19] \rkeyname{deletendkeywords}|=|\marg{keywords}
%
%       define, add or remove the keywords from appropriate list. Please note
%       the key \ikeyname{specialscan} below (if you don't use unusual charaters
%       in keywords.)
%
% \item[0.19,,optional] \rkeyname{texcs}|=|\marg{list of control sequences \textup(without backslashes\textup)}
% \item[0.20,,optional] \rkeyname{moretexcs}|=|\marg{list of control sequences \textup(without backslashes\textup)}
%
%       defines or adds control sequences for \TeX\ and \LaTeX.
%
% \item[0.18,,optional] \rkeyname{directives}|=|\marg{list of compiler directives}
%
%       defines compiler directives in C, \Cpp, Objective-C and POV.
%
% \item[0.20,,optional] \rkeyname{keywordsinside}|=|\meta{character}\meta{character}\syntaxor\rkeyname{keywordsinside}|={}|
%
%       The first order keywords are active only between the first and second
%       character. This key is used for HTML.
%
% \item[0.14] \rkeyname{sensitive}|=|\meta{\alternative{true,false}}
%
%       makes the keywords case sensitive and insensitive, respectively.
%       This key affect the keywords only in the phase of typesetting.
%       In all other situations keywords are case sensitive, for example,
%       |deletekeywords={save,Test}| removes `save' and `Test', but neither
%       `SavE' nor `test'.
%
% \item[0.21,true,new] \rkeyname{specialscan}|=|\meta{\alternative{true,false}}
%
%       enables or disables (faster) the automatic scan for special characters.
%       If deactivated, you must specify all special characters in the keywords
%       with the following key(s):
%
% \item[0.19] \rkeyname{alsoletters}|=|\marg{character sequence}
% \item[0.19] \rkeyname{alsodigits}|=|\marg{character sequence}
% \item[0.19] \rkeyname{alsoother}|=|\marg{character sequence}
%
%       These keys support the `special character' auto-detection of the
%       keyword commands. For our purpose here, identifiers are out of
%       letters (|A|--|Z|,|a|--|z|,|_|,|@|,|$|) and digits (|0|--|9|), but
%       an identifier must begin with a letter. If you write
%           |keywords={one-two,\#include}|,
%       the minus becomes necessarily a digit and the sharp a letter since the
%       keywords can't be detected otherwise. This means that the defined
%       keywords affect the process of building the `output units'!
%
%       The three keys overwrite such default behaviour. Each character of the
%       sequence becomes a letter, digit and other, respectively.
%
% \item[0.20] \rkeyname{otherkeywords}|=|\marg{keywords}
%
%       Each given `keyword' is printed in keyword style, but without changing
%       the `letter', `digit' and `other' status of the characters. This key
%       is designed to define keywords like |=>|, |->|, |-->|, |--|, |::|, and
%       so on. If one keyword is a subsequence of another (like |--| and
%       |-->|), you must specify the shorter first.
% \end{syntax}
%
%
% \paragraph{Strings}
% Just two keys.
% \begin{syntax}
% \item[0.19] \rkeyname{stringtest}|=|\meta{\alternative{true,false}}
%
%       enables or disables string tests. If activated, line exceeding strings
%       issue warnings and the package exits string mode.
%
% \item[0.12] \rkeyname{string}|=|\oarg{\alternative{b,d,m,bd}}\marg{character sequence}
%
%       Each character might start a string or character literal.
%       'Stringizers' match each other, i.e.~starting and ending delimiters
%       are the same. The optional argument controls how the stringzier(s)
%       itself is/are represented in a string or character literal: it is
%       preceded by a |b|ackslash, |d|oubled (or both is allowed via |bd|) or
%       it is |m|atlabed. The latter one is a special type for Ada and Matlab
%       and possibly more languages where the stringizers are also used for
%       other purposes. In general the stringizer is also doubled, but a
%       string does not start after a letter or a right parenthesis.
% \end{syntax}
%
% \paragraph{Comments}
% If you have already defined any of the following comments and you want to
% remove it, let all arguments to the key empty.
% \begin{syntax}
% \item[0.13] \rkeyname{comment}|=|\oarg{type}\oarg{type option}\meta{delimiter\textup(s\textup)}
%
% \item[0.13] \rkeyname{comment}|=[l]|\meta{delimiter}
% \item[0.18] \rkeyname{comment}|=[f]|\oarg{n=preceding columns}\meta{character sequence}
% \item[0.13] \rkeyname{comment}|=[s]|\marg{delimiter}\marg{delimiter}
% \item[0.13] \rkeyname{comment}|=[d]|\marg{delimiter}\marg{delimiter}\marg{delimiter}\marg{delimiter}
% \item[0.13] \rkeyname{comment}|=[n]|\marg{delimiter}\marg{delimiter}
%
%       The characters (\emph{in the given order}) start a comment line, which
%       in general starts with the delimiter and ends at end of line. If the
%       character sequence |//| starts a comment line (like in \Cpp, Comal 80
%       or Java), |commentline=//| is the correct declaration. For Matlab it
%       would be |commentline=\%|---note the preceding backslash.
%
%       Each given character becomes a `fixed comment line' separator: it
%       starts a comment line if and only if it is in column $n+1$. Fortran 77
%       declares its comments via |fixedcommentline=*Cc| ($n=0$ is default).
%
%       Here we have two or four delimiters. The second ends a comment
%       starting with the first, and similarly the fourth and third delimiter
%       for double comments. If you require three such comments you can use
%       \keyname{singlecomment} and \keyname{doublecomment} at the same time.
%       C, Java, PL/I, Prolog and SQL all define single comments via
%       |singlecomment={/*}{*/}|, and Algol does it with
%       |singlecomment={\#}{\#}|, which means that the sharp delimits both
%       beginning and end of a single comment.
%
%       is similar to \keyname{singlecomment}, but comments can be nested.
%       Identical arguments are not allowed---think a while about it!
%       Modula-2 and Oberon-2 use |nestedcomment={(*}{*)}|.
%
% \item[0.17,,optional] \rkeyname{keywordcomment}|=|\marg{keywords}
% \item[0.17,,optional] \rkeyname{keywordcommentsemicolon}|=|\marg{keywords}\marg{keywords}\marg{keywords}
%
%       A (paired) keyword comment begins with a keyword and ends with the same
%       keyword. Consider |keywordcomment={comment,co}|. Then
%       `\textbf{comment}\allowbreak\ldots\textbf{comment}' and
%       `\textbf{co}\ldots\textbf{co}' are comments.
%
%       Defining a (double) keyword comment semicolon needs three keyword
%       lists, e.g.~|{end}{else,end}{comment}|. A semicolon always ends such
%       a comment. Any keyword of the first argument begins a comment and any
%       keyword of the second argument ends it (and a semicolon also);
%       a comment starting with any keyword of the third argument is terminated
%       with the next semicolon only. In the example all possible comments are
%       `\textbf{end}\ldots\textbf{else}', `\textbf{end}\ldots\textbf{end}'
%       (does not start a comment again) and `\textbf{comment}\ldots;' and
%       `\textbf{end}\ldots;'.
%       Maybe a curious definition, but Algol and Simula use such comments.
%
%       Note: The keywords here need not to be a subset of the defined
%       keywords. They won't appear in keyword style if they aren't.
%
% \item[0.17,,optional] \rkeyname{podcomment}|=|\meta{\alternative{true,false}}
%
%       activates or deactivates PODs---Perl specific.
% \end{syntax}
%
%
%\iffalse
% \subsection{*Obsolete keys and commands}\lstlabel{uObsoleteKeysAndCommands}
%
% We come to the obsolete features---obsolete by definition.
% Don't use these keys and commands.
% In the worst case other keys must be introduced.
% This might sound strange but in particular the arguments of \ikeyname{pre} and \ikeyname{post} are hardly to control.
% Therefor they are deactivated in some cases, and this means that all features defined via these keys are deactivated.
% That's not good.
% \begin{syntax}
% \item[0.12,,obsolete] \rkeyname{pre}|=|\oarg{continue}\marg{tokens}
% \item[0.12,,obsolete] \rkeyname{post}|=|\oarg{continue}\marg{tokens}
%
%       The given control sequences are executed before and after typesetting resp.\ when continuing a listing, but in all cases inside a group.
%       The commands are not executed for |\lstinline| or if the package makes an extra |\hbox| around the listing.
%       The reason is that the user given pre and post commands are assumed to be unsafe inside |\hbox|.
%       By default \meta{continue} equals \meta{tokens}.
%       All arguments are pre-set empty.
%
% \item[0.18,,obsolete] \rcmdname\lststorekeywords\meta{macro}\marg{keywords}
%
%       stores \meta{keywords} in \meta{macro} for use with keyword keys.
%       This command can't be used in a language definition since it is a command and not a key.
%
% \item[0.19,,obsolete] \rcmdname\lstname
%
%       contains the name of the current (last) listing in \emph{printable} form.
%
% \item[0.19,,obsolete] \rcmdname\lstintname
%
%       contains the name of the current (last) listing possibly in nonprintable form.
% \end{syntax}
%\fi
%
%
% \section{Experimental features}
%
% This section describes the more or less unestablished parts of this package.
% It's unlikely that they are removed (except it is stated explicitly), but
% they are liable to (heavy) changes and improvements.
%
%
% \subsection{Listings inside arguments}
%
% There are some things to consider if you want to use |\lstinline| or the
% listing environment inside arguments. Since \TeX\ reads the argument before
% the `\lst-macro' is executed, this package can't do anything to preserve the
% input: spaces shrink to one space, the tabulator and the end of line are
% converted to spaces, the comment character is not printable, and so on.
% Hence, you \emph{must} work a bit more. You have to put a backslash in front
% of each of the following four characters: |\{}%|. Moreover you must protect
% spaces in the same manner if: (i) there are two or more spaces following each
% other or (ii) the space is the first character in the line.
% That's not enough: Each line must be terminated with a `line feed' |^^J|.
% And you can't escape to \LaTeX\ inside such listings!
%
% The easiest examples are with |\lstinline| since we need no line feed.
% \begin{verbatim}
%\footnote{\lstinline!var i:integer;! and
%          \lstinline!protected\ \ spaces! and
%          \fbox{\lstinline!\\\{\}\%!}}\end{verbatim}
% yields\lstset{language=Pascal}\footnote{\lstinline!var i:integer;! and
%          \lstinline!protected\ \ spaces! and
%          \fbox{\lstinline!\\\{\}\%!}}
% if the current language is Pascal.
% Now environment examples:
% \begin{lstsample}{\lstset{language={}}}{}
%    \fbox{%^^J
%    \begin{lstlisting}{}^^J
%    \ !"#$\%&'()*+,-./^^J
%    0123456789:;<=>?^^J
%    @ABCDEFGHIJKLMNO^^J
%    PQRSTUVWXYZ[\\]^_^^J
%    `abcdefghijklmno^^J
%    pqrstuvwxyz\{|\}~^^J
%    \end{lstlisting}}
% \end{lstsample}
% \begin{lstsample}{\lstset{language={}}}{}
%    \fbox{%^^J
%    \begin{lstlisting}{}^^J
%    We need no protection here,^^J
%    \ but\ \ in\ \ this\ \ line.^^J
%    \end{lstlisting}}
% \end{lstsample}
% \begin{advise}
% \item You might wonder that this feature is still experimental. The reason:
%       You shouldn't use listings inside arguments.
% \end{advise}
%
%
% \subsection{Export of identifiers}\lstlabel{rExportOfIdentifiers}
%
%^^A \lsthelper{Aslak~Raanes}{1997/11/24}{export function names}
% It would be nice to export function or procedure names. In general that's a
% dream so far. The problem is that programming languages use various syntaxes
% for function and procedure declaration or definition. A general interface is
% completely out of the scope of this package---that's the work of a compiler
% and not of a pretty-printing tool. However, it is possible for particular
% languages: in Pascal each function or procedure definition and variable
% declaration is preceded by a particular keyword.
% Note that you must request the following keys with \texttt{procnames} option.
% \begin{syntax}
% \item[0.19,{{}},optional] \rkeyname{prockeywords}|=|\marg{keywords}
%
%		each specified keyword indicates a function or procedure definition.
%		Any identifier following such a keyword appears in `procname' style.
%		For Pascal you might use\vspace{-.5\baselineskip}
% \begin{verbatim}
%    prockeywords={program,procedure,function}\end{verbatim}
%
% \item[0.19,keywordstyle,optional] \rkeyname{procnamestyle}|=|\meta{style}
%
%		defines the style in which procedure and function names appear.
%
% \item[0.19,false,optional] \rkeyname{indexprocnames}|=|\meta{\alternative{true,false}}
%
%		If activated, procedure and function names are also indexed.
% \end{syntax}
% \begin{TODO}
% The \aspectname{procnames} aspect is still unsatisfactory (since unchanged
% for more than a year). It marks (and indexes) only the function definitions
% so far, but it would be possible to mark also the following function calls.
% A key \keyname{incremetalprocnames}|=|\meta{\alternative{true,false}} could
% control whether function names are added to a special keyword class, which
% appears in `procname' style. But should these names be added globally?
% There are good reasons for both. Of course, we would also need a key
% to reset the name list. Globally?
% \end{TODO}
%
%
% \subsection{Hyper references}\lstlabel{rHyperReferences}
%
% This very small aspect must be requested via \texttt{hyper} option since it
% is experimental. One perspective for the future is to combine this aspect
% with \aspectname{procnames}. Then it should be possible to click on a
% function name and jump to its definition, for example.
% \begin{syntax}
% \item[0.21,,{new,optional}] \rkeyname{hyperref}|=|\marg{identifiers}
% \item[0.21,,{new,optional}] \rkeyname{morehyperref}|=|\marg{identifiers}
% \item[0.21,,{new,optional}] \rkeyname{deletehyperref}|=|\marg{identifiers}
%
%       Hyper references the specified identifiers (via \packagename{hyperref}
%       package). A `click' on such an identifier jumps to the previous
%       occurrence.
%
%\iffalse
% \item[0.21,,{new,optional}] \rkeyname{hyperanchor}|=|\meta{two-parameter macro}
% \item[0.21,,{new,optional}] \rkeyname{hyperlink}|=|\meta{two-parameter macro}
%\fi
% \end{syntax}
%
%
% \subsection{Literate programming}
%
% We begin with an example and hide the crucial key=value list.
% \begin{lstsample}{\lstset{literate={:=}{{$\gets$}}1 {<=}{{$\leq$}}1 {>=}{{$\geq$}}1 {<>}{{$\neq$}}1}}{}
%    \begin{lstlisting}{}
%    var i:integer;
%
%    if (i<=0) i := 1;
%    if (i>=0) i := 0;
%    if (i<>0) i := 0;
%    \end{lstlisting}
% \end{lstsample}
% Funny, isn't it? We could write |i := 0| respectively i| |$\gets$| |0
% instead, but that's not literate :\,--\,). Now you might want to know how
% this has been done. Have a \emph{close} look at the following key.
% \begin{syntax}
% \item[0.20] \rkeyname{literate}|=|\meta{replacement item}\ldots\meta{replacement item}
%
%       First note that there are no commas between the items. Each item
%       consists of three arguments:
%           \marg{replace}\marg{replacement text}\marg{length}.
%       \meta{replace} is the original character sequence.
%       Instead of printing these characters, we use \meta{replacement text},
%       which takes the width of \meta{length} characters in the output.
%
%       Each `printing unit' in \meta{replacement text} \emph{must} be braced
%       except it's a single character. For example, you must put braces
%       around |$\leq$|.
%       If you want to replace |<-1->| by |$\leftarrow1\rightarrow$|, the
%       replacement item would be |{<-1->}{{$\leftarrow$}1{$\rightarrow$}}3|.
%       Note the braces around the arrows.
%
%       If one \meta{replace} is a subsequence of another \meta{replace}, you
%       must use the shorter sequence first. For example, |{-}| must be used
%       before |{--}| and this before |{-->}|.
% \end{syntax}
% In the example above I've used
% \begin{verbatim}
%  literate={:=}{{$\gets$}}1 {<=}{{$\leq$}}1 {>=}{{$\geq$}}1 {<>}{{$\neq$}}1\end{verbatim}
%
%
% \subsection{\textsf{LGrind} definitions}\label{rLGrindDefinitions}
%
% Yes, it's a nasty idea to steal language definitions from other programs.
% Nevertheless, it's possible for the \packagename{LGrind} definition
% file---at least partially. Please note that this file must be found by
% \TeX.
% \begin{syntax}
% \item[0.21,,{new,optional}] \rkeyname{lgrindef}|=|\meta{language}
%
%       scans the \texttt{lgrindef} language definition file for
%       \meta{language} and activates it if present. Note that not all
%       \packagename{LGrind} capabilities have a \packagename{listings}
%       analogue.
%
%       Note that `Linda' language doesn't work properly since it defines
%       compiler directives with preceding `|#|' as keywords.
%\iffalse
% \item[0.21,lgrindef.,{new,data,optional}] \rcmdname\lstlgrindeffile
%
%       contains the (path and) name of the definition file.
%\fi
% \end{syntax}
%
%
% \subsection{Automatic formatting}
%
% \lstloadaspects{formats}%
% The automatic source code formatting is far away from being good. First of
% all, there are no general rules on how source code should be formatted. So
% `format definitions' must be flexible. This flexibility requires a complex
% interface, a powerful `format definition' parser, and lots of code lines
% behind the scenes. Currently, format definitions aren't flexible enough
% (probably not the definitions but the results). A single `format item' has
% the form 
% \begin{itemize}\item[]
%      \meta{input chars}|=|\oarg{exceptional chars}\meta{pre}\oarg{\bslash\texttt{string}}\meta{post}
% \end{itemize}
% Whenever \meta{input chars} aren't followed by one of the \meta{exceptional
% chars}, formatting is done according to the rest of the value. If |\string|
% isn't specified, the input characters aren't be printed (except it's an
% identifier or keyword). Otherwise \meta{pre} is `executed' before printing
% the original character string and \meta{post} afterwards. These two are
% `subsets' of
% \begin{itemize}
% \item |\newline| ---ensuring a new line;
% \item |\space| ---ensuring a whitespace;
% \item |\indent| ---increasing indention;
% \item |\noindent| ---descreasing indention.
% \end{itemize}
% Now we can give an example. The format definition
% \begin{verbatim}
%    \lstdefineformat{C}{%
%        \{=\newline\string\newline\indent,%
%        \}=\newline\noindent\string\newline,%
%        ;=[\ ]\string\space}\end{verbatim}
% activated via |\lstset{format=C}| yields
%    \lstdefineformat{C}{^^A
%        \{=\newline\string\newline\indent,^^A
%        \}=\newline\noindent\string\newline,^^A
%        ;=[\ ]\string\space}
% \begin{lstsample}{\lstset{language={},format=C}}{}
%    \begin{lstlisting}{}
%    for (int i=0;i<10; i++){/* wait */};
%    \end{lstlisting}
% \end{lstsample}
% Not good. But there is a (too?) simple work-around:
% \begin{verbatim}
%    \lstdefineformat{C}{%
%        \{=\newline\string\newline\indent,%
%        \}=[;]\newline\noindent\string\newline,%
%        \};=\newline\noindent\string\newline,%
%        ;=[\ ]\string\space}\end{verbatim}
%    \lstdefineformat{C}{^^A
%        \{=\newline\string\newline\indent,^^A
%        \}=[;]\newline\noindent\string\newline,^^A
%        \};=\newline\noindent\string\newline,^^A
%        ;=[\ ]\string\space}
% with the following result
% \begin{lstsample}{\lstset{language={},format=C}}{}
%    \begin{lstlisting}{}
%    for (int i=0;i<10; i++){/* wait */};
%    \end{lstlisting}
% \end{lstsample}
% Sometimes the problem is just to find a suitable format definition.
% Further formatting is complicated.
% Here are only three examples with increasing level of difficulty.
% \begin{enumerate}
% \item Insert horizontal space to separate function/procedure name and
%       following parenthesis or to separate arguments of a function,
%       e.g.~add the space after a comma (if inside function call).
% \item Smart breaking of long lines. Consider long `and/or' expressions.
%       Formatting should follow the logical structure!
% \item Context sensitive formatting rules. It can be annoying if empty
%       or small blocks take three or more lines in the output---think of
%       scrolling down all the time. So it would be nice if the block
%       formatting was context sensitive.
% \end{enumerate}
% Note that this is a very first and clumsy attempt to provide automatic
% formatting---clumsy since the problem isn't trivial. Any ideas are welcome.
% Implementations also. Eventually you should know that you must request format
% definitions at package loading, e.g.~via |\usepackage[formats]{listings}|.
%
%
% \section{Forthcoming}
%
% I'd like to support more languages, for example Maple, PostScript, Reduce,
% and so on. Fortunately my lifetime is limited, so other people may do that
% work. Please (e-)mail me your language definitions.
%
% Some people made suggestions to extend the functionality. There things aren't
% listed here. Feel free to email me your suggestions.
% \iffalse
% \lsthelper{Torben~Hoffmann}{1999/02/18}{pre-compile listings} stated the idea
% of pre-compiled listings. But if the package reads a listing to compare it
% with the pre-compiled version, all `escape features' get lost (since the
% package can switch to active characters, but not active characters back to
% \TeX's catcodes).
% Thus, pre-compiled listings are possibly never implemented.
%
% \lsthelper{Vincent~Poirriez}{1999/11/18}{code examples inside caml comments}:
% Inside caml comments, |[| and |]| should print the code in
% between in basicstyle (or another newly introduced style). Nesting of these
% `code example delimiters' is allowed, e.g.~|(* [[x;y]] *)|.
%
% \lsthelper{Claus~Atzenbeck}{1999/12/03}{`extendedchars=false' doesn't issue
% warning when extended characters are used}: If \ikeyname{extendedchars}|=false|
% but extended chars are used, issue warning.
%
% Auto-detect whether surplus space (from spaces and tabs) isn't needed to fix
% alignment of wide character combinations like |==| or |<>|.
%
% \lsthelper{Andreas~Matthias}{2000/01/04}{define header/footer to print
% the listing name}: Make the header/footer print the listing name.
%
%^^A \lsthelper{Rolf~Niepraschk}{2000/01/10}{Filename access}
% \fi
%
%
% \StopEventually{}
%
%
% \part{Developer's guide}
%
% First I must apologize for this developer's guide since some parts are not
% explained as good as possible. But note that you are in a pretty good shape:
% this developer's guide exists!^^A :-)
%
%
% \section{Basic concepts}
%
% The functionality of the \packagename{listings} package appears to be divided
% into two parts: on the one hand commands which actually typeset listings and
% on the other via |\lstset| adjustable parameters. Both could be implemented
% in terms of \lst-aspects, which are (independent) collections of keys,
% commands, and internal hooks and definitions. The package defines a couple of
% aspects, in particular the `kernel' $=$ `main engine'. Other aspects drive
% this engine, and language and style definitions tell the aspects how to
% drive---the relations between car, driver and assistant driver are exactly
% reproduced, and I'll be your driving instructor.
%
%
% \subsection{Package loading}\lstlabel{dPackageLoading}
%
% Each option in |\usepackage[|\meta{options}|]{listings}| loads a \lst-aspect
% or \emph{prevents} the package from loading it if the aspect name is
% \emph{preceded by an exclamation mark}. But even in the latter case an aspect
% is loaded later if a predefined programming language requests it.
%
% Note that |\usepackage[!0.19]{listings}| makes no sense since compatibility
% mode isn't loaded by default anyway. But if you don't use line numbering,
% you can write |\usepackage[!labels]{listings}|. However, you can load it by
% hand with |\lstloadaspects{labels}|.
% \begin{syntax}
% \item[0.20] |\lstloadaspects|\marg{comma separated list of aspect names}
%
%       loads the specified aspects if they are not already loaded.
% \end{syntax}
% This loading mechanism was designed to clear up the dependencies of different
% package parts and to debug the package. For this reason there is another
% option:
% \begin{syntax}
% \item[0.21,,option] \texttt{noaspects}\leavevmode
%
%       deletes the list of aspects to load. Note that, for example, the
%       option lists |0.19,!labels,noaspects| and |noaspects| are essentially
%       the same: the kernel is loaded and no other aspect.
% \end{syntax}
% This is especially useful for aspect-testing since we can load exactly the
% required parts. Here now is a list of all aspects and related keys and
% commands---in the hope that this list is complete.
% \begin{description}
% \hyphenpenalty=10000\relax \rightskip=0pt plus \linewidth\relax
% \item[\aspectname{strings}]\leavevmode
%
%       \keyname{stringizer}, \keyname{stringstyle}, \keyname{stringspaces},
%       \keyname{stringtest}
%
% \item[\aspectname{comments}]\leavevmode
%
%       \keyname{commentstyle}, \keyname{commentline},
%       \keyname{fixedcommentline}, \keyname{singlecomment},
%       \keyname{doublecomment}, \keyname{nestedcomment}
%
% \item[\aspectname{pod}]\leavevmode
%
%       \keyname{printpod}, \keyname{podcomment}
%
% \item[\aspectname{escape}]\leavevmode
%
%       \keyname{texcl}, \keyname{escapebegin}, \keyname{escapeend},
%       \keyname{escapechar}, \keyname{escapeinside}, \keyname{mathescape}
%
% \item[\aspectname{writefile}] requires 1 |\toks|, 1 |\write|
%
%       |\lst@BeginWriteFile|, |\lst@BeginAlsoWriteFile|, |\lst@EndWriteFile|
%
% \item[\aspectname{style}]\leavevmode
%
%       \cs{lstdefinestyle}, \keyname{style}, empty style
%
% \item[\aspectname{language}]\leavevmode
%
%       |\lstalias|, \keyname{defaultdialect}, |\lstlanguagefiles|,
%       |\lstloadlanguages|, |\lstdefinelanguage|, |\lst@definelanguage|,
%       empty language, \keyname{language}
%
% \item[\aspectname{keywords}]\leavevmode
%
%       \keyname{keywords}, \keyname{morekeywords}, \keyname{deletekeywords},
%       \keyname{keywordstyle}, \keyname{ndkeywords}, \keyname{morendkeywords},
%       \keyname{deletendkeywords}, \keyname{ndkeywordstyle},
%       \keyname{otherkeywords},
%       \keyname{sensitive}, \keyname{specialscan}
%
% \item[\aspectname{emph}] requires \aspectname{keywords}
%
%       \keyname{emph}, \keyname{moreemph}, \keyname{deleteemph},
%       \keyname{emphstyle}
%
% \item[\aspectname{html}] requires \aspectname{keywords}
%
%       \keyname{keywordsinside}, \keyname{usekeywordsinside}
%
% \item[\aspectname{tex}] requires \aspectname{keywords}
%
%       \keyname{texcs}, \keyname{moretexcs}, \keyname{texcsstyle}
%
% \item[\aspectname{directives}] requires \aspectname{keywords}
%
%       \keyname{directives}, \keyname{directivestyle}
%
% \item[\aspectname{index}] requires \aspectname{keywords}
%
%       \keyname{index}, \keyname{moreindex}, \keyname{deleteindex},
%       \keyname{indexstyle}, |\lstindexmacro|
%
% \item[\aspectname{procnames}] requires \aspectname{keywords}
%
%       \keyname{procnamekeys}, \keyname{procnamestyle},
%       \keyname{indexprocnames}
%
% \item[\aspectname{keywordcomments}]
%       requires \aspectname{keywords}, \aspectname{comments}
%
%       \keyname{keywordcomment}, \keyname{keywordcommentsemicolon}
%
% \item[\aspectname{labels}] requires 2 |\count|
%
%       \keyname{labelstyle}, \keyname{labelsep}, \keyname{labelstep},
%       \keyname{firstlabel}, \keyname{advancelabel}, |\thelstlabel|
%
% \item[\aspectname{lineshape}] requires 2 |\dimen|
%
%       \keyname{wholeline}, \keyname{indent}, \keyname{spread},
%       \keyname{lineskip}
%
% \item[\aspectname{breaklines}] requires \aspectname{lineshape}
%
%       \keyname{breaklines}, \keyname{breakindent}, \keyname{breakautoindent},
%       \keyname{prebreak}, \keyname{postbreak}
%
% \item[\aspectname{frames}] requires \aspectname{lineshape}
%
%       \keyname{frame}, \keyname{frameround}, \keyname{framerulewidth},
%       \keyname{framerulesep}, \keyname{frametextsep}, \keyname{framespread},
%       \keyname{frameshape}
%
% \item[\aspectname{make}] requires \aspectname{keywords}
%
%       \keyname{makemacrouse}
%
% \item[\aspectname{doc}] requires \aspectname{writefile} and 1 |\box|
%
%       |lstsample| environment
%
% \item[\aspectname{0.19}] defines some commands and keys.
% \item[\aspectname{fancyvrb}] requires 1 |\box|
%
%       \keyname{fancyvrb}
%
% \item[\aspectname{lgrind}]\leavevmode
%
%       \keyname{lgrindef}, |\lstlgrindeffile|
%
% \item[\aspectname{hyper}] requires \aspectname{keywords}
%
%       \keyname{hyperref}, \keyname{morehyperref}, \keyname{deletehyperref},
%       \keyname{hyperanchor}, \keyname{hyperlink}
% \end{description}
% The kernel allocates 6 |\count|, 4 |\dimen| and 1 |\toks|.
% Moreover it defines the following keys, commands and environments:
% \begin{itemize}\item[]
% \hyphenpenalty=10000\relax \rightskip=0pt plus \linewidth\relax
% \keyname{aboveskip}, \keyname{abovecaptionskip}, \keyname{alsodigit},
% \keyname{alsoletter}, \keyname{alsoother},
% \keyname{basewidth}, \keyname{basicstyle}, \keyname{belowskip},
% \keyname{belowcaptionskip}, \keyname{boxpos},
% \keyname{caption}, \keyname{captionpos}, \keyname{continue},
% \keyname{extendedchars},
% \keyname{fancyvrb}, \keyname{first}, \keyname{flexiblecolumns},
% \keyname{float}, \keyname{fontadjust}, \keyname{formfeed},
% \keyname{gobble},
% \keyname{identifierstyle},
% \keyname{label}, \keyname{last}, \keyname{literate}, |\lstinline|,
% |\lstinputlisting|, |lstlisting| environment, |\lstlistingname|,
% |\lstlistlistingname|, |\lstlistoflistings|, |\lstloadaspects|,
% |\lstnewenvironment|, |\lstset|,
% \keyname{MoreSelectCharTable},
% \keyname{outputpos},
% \keyname{post}, \keyname{pre}, \keyname{print}
% \keyname{SelectCharTable}, \keyname{showlines},
% \keyname{tab}, \keyname{tabsize}, \keyname{visiblespaces},
% \keyname{visibletabs}
% \end{itemize}
%
%
% \subsection{How to define \lst-aspects}\lstlabel{dHowToDefineLstAspects}
%
% There are at least three ways to add new functionality: (a) you write an
% aspect of general interest, send it to me, and I'll just paste it into the
% implementation; (b) you write a `local' aspect not of general interest; or
% (c) you have an idea for an aspect of general interest and make me writing
% it. (a) and (b) are good, (c) isn't at all.^^A :-)
%
% Put local add-ons into \texttt{lstmisc0.sty}---this file is searched first
% by default. If you want to make add-ons for one particular document and, for
% example, not for other users or other documents, just replace the surrounding
% |\lst@BeginAspect| and |\lst@EndAspect| by |\makeatletter| and |\makeatother|
% and use the definitions in the preamble of your document. However, you have
% to load required aspects on your own.
%
% An aspect definition starts with |\lst@BeginAspect| plus arguments and ends
% with the next |\lst@EndAspect|. In particular, aspect definitions can't be
% nested.
% \begin{syntax}
% \item[0.20] |\lst@BeginAspect|[\oarg{list of required aspects}]\marg{aspect name}
% \item[0.20] |\lst@EndAspect|
% \end{syntax}
% The optional list is a comma separated list of required aspect names.
% The complete aspect is not defined in each of the following cases:
% \begin{enumerate}
% \item \meta{aspect name} is empty.
% \item The aspect is already defined.
% \item A required aspect is neither defined nor loadable via
%       |\lstloadaspects|.
% \end{enumerate}
% Consequently you can't define a part of an aspect and later on another part.
% But it is possible to define aspect $A_1$ and later aspect $A_2$ which
% requires $A_1$.
%
% You can put any \TeX\ material in between the two commands, but note that
% definitions must be |\global| if you need them later---\LaTeX's |\newcommand|
% makes local definitions and can't be preceded by |\global|. So use the
% following commands, |\gdef|, and commands described in later sections.
% \begin{syntax}
% \item[0.20] |\lst@UserCommand|\meta{macro}\meta{parameter text}\marg{replacement text}
%
%       The macro is (mainly) equivalent to |\gdef|. The purpose is to
%       distinguish user commands and internal global definitions.
%
% \item[0.19] |\lst@Key|\marg{key name}\marg{init value}[\oarg{default value}]\marg{definition}
% \item[0.19] |\lst@Key|\marg{key name}|\relax|[\oarg{default value}]\marg{definition}
%
%       defines a key using the \packagename{keyval} package from David
%       Carlisle. \meta{definition} is the replacement text of a macro with
%       one parameter. The argument is either the value from `key$=$value' or
%       \meta{default value} if no `$=$value' is given. The helper macros
%       |\lstKV@...| below might simplify \meta{definition}.
%
%       The key is not initialized if the second argument is |\relax|.
%       Otherwise \meta{init value} is the very first (init) value.
%       Note that we locally switch to |\globalsdefs=1| to ensure that
%       initialization is not effected by grouping.
%
% \item[0.19] |\lst@AddToHook|\marg{name of hook}\marg{\TeX\ material}
%
%       adds \TeX\ material at predefined points. Section \ref{dHooks} lists
%       all hooks and where they are defined respectively executed.
%       |\lst@AddToHook{A}{\csa}| before |\lst@AddToHook{A}{\csb}|
%       \emph{does not} guarantee that |\csa| is executed before |\csb|.
%
% \item[0.20] |\lst@AddToHookExe|\marg{name of hook}\marg{\TeX\ material}
%
%       also executes \meta{\TeX\ material} for initialization. You might use
%       local variables---local in the sense of \TeX\ and/or usual programming
%       languages---but when the code is executed for initialization all
%       assignments are global: we set |\globaldefs| locally to one.
%
% \item[0.20] |\lst@UseHook|\marg{name of hook}
%
%       executes the hook.
% \end{syntax}
%
% \paragraph{Examples}
% If you want status messages, you might write
% \begin{verbatim}
%    \lst@AddToHook{Init}{\message{\MessageBreak Processing listing ...}}
%    \lst@AddToHook{DeInit}{\message{complete.\MessageBreak}}\end{verbatim}
% If you want to control the messages at |Init|, you could define an aspect
% like this (|\lst@AddTo| is described in section \ref{dGeneralPurposeMacros}):
% \begin{verbatim}
%   \lst@BeginAspect{message}
%   \lst@Key{message}{Annoying message.}{\gdef\lst@message{#1}}
%   \lst@Key{moremessage}\relax{\lst@AddTo\lst@message{\MessageBreak#1}}
%   \lst@AddToHook{Init}{\typeout{\MessageBreak\lst@message}}
%   \lst@EndAspect\end{verbatim}
% However, there are certainly aspects which are more useful.
% \medskip
%
% To serve this goal we define some basic macros to evaluate the argument |#1|
% to the definition part of a key, i.e.~they can be used in \meta{definition}
% of the |\lst@Key| command.
% The additional prefix |KV| refers to the \packagename{keyval} package.
% \begin{syntax}
% \item[0.20] |\lstKV@TwoArg|\marg{value}\marg{subdefinition}
% \item[0.20] |\lstKV@ThreeArg|\marg{value}\marg{subdefinition}
% \item[0.20] |\lstKV@FourArg|\marg{value}\marg{subdefinition}
%
%       \meta{subdefinition} is the replacement text of a macro with two, three
%       or four parameters. We call this macro with the arguments given by
%       \meta{value}. Empty arguments are added if necessary.
%
% \item[0.19] |\lstKV@OptArg|\oarg{default arg.}\marg{value}\marg{subdefinition}
%
%       |[|\meta{default arg.}|]| is \emph{not} optional. \meta{subdefinition}
%       is the replacement text of a macro with parameter text |[##1]##2|.
%       Note that the macro parameter character |#| is doubled since used
%       within another macro. \meta{subdefinition} accesses these arguments
%       via |##1| and |##2|.
%
%       \meta{value} is usually the argument |#1| passed by the
%       \packagename{keyval} package. If \meta{value} has no optional argument,
%       \meta{default arg.} is inserted to provide the arguments to
%       \meta{subdefinition}.
%
% \item[0.21] |\lstKV@XOptArg|\oarg{default arg.}\marg{value}\meta{submacro}
%
%       Same as |\lstKV@OptArg| but the third argument \meta{submacro} is
%       already a definition and not replacement text.
%
% \item[0.20] |\lstKV@CSTwoArg|\marg{value}\marg{subdefinition}
%
%       \meta{value} is a comma separated list (|CS|) of one or two arguments,
%       which are given to \meta{subdefinition} $=$ replacement text of a macro
%       with two parameters. An empty second argument is added if necessary.
%
% \item[0.19] |\lstKV@SetIf|\marg{value}\meta{if macro}
%
%       \meta{if macro} becomes |\iftrue| if the first character of
%       \meta{value} equals |t| or |T|. Otherwise it becomes |\iffalse|.
%       Usually you will use |#1| as \meta{value}.
% \end{syntax}
%
% \paragraph{Examples}
% The key \keyname{sensitive} belongs to the \aspectname{keywords} aspect.
% Therefore it is defined in between |\lst@BeginAspect{keywords}| and
% |\lst@EndAspect|, which is not shown here.
% \begin{verbatim}
%   \lst@Key{sensitive}\relax[t]{\lstKV@SetIf{#1}\lst@ifsensitive}
%   \lst@AddToHookExe{SetLanguage}{\let\lst@ifsensitive\iftrue}\end{verbatim}
% The last line is equivalent to
% \begin{verbatim}
%   \lst@AddToHook{SetLanguage}{\let\lst@ifsensitive\iftrue}
%   \global\let\lst@ifsensitive\iftrue\end{verbatim}
% We initialize the variable globally since the user might request an aspect in
% a group. Afterwards the variable is used locally---there is no |\global| in
% \meta{\TeX\ material}. Note that we could define and init the key as follows:
% \begin{verbatim}
%   \lst@Key{sensitive}t[t]{\lstKV@SetIf{#1}\lst@ifsensitive}
%   \lst@AddToHook{SetLanguage}{\let\lst@ifsensitive\iftrue}\end{verbatim}
%
% |caption| is a kernel key. Here we use \meta{value} as \meta{default arg.}
% argument to |\lstKV@OptArg| since then the `lol'-entry and printed caption
% are identical if no optional argument is given.
% \begin{verbatim}
%   \lst@Key{caption}\relax{\lstKV@OptArg[{#1}]{#1}%
%       % `[##1]##2' replacement text
%       {\def\lst@caption{##2}\def\lst@@caption{##1}}}
%   \lst@AddToHook{PreSet}{\let\lst@caption\@empty\let\lst@@caption\@empty}\end{verbatim}
% There is no initialization since captions are reset via \hookname{PreSet}
% before a key$=$value list is parsed.
%
%
% \subsection{Hooks}\lstlabel{dHooks}
%
% Several problems arise if you want to define an aspect.
% You should and/or must
%   (a) find additional functionality (of general interest) and implement it,
%   (b) create the user interface, and
%   (c) interface with the \packagename{listings} package, i.e.~find correct
%       hooks and insert appropriate \TeX\ material.
% (a) is out of the scope of this developer's guide. The commands |\lstKV@...|
% in section \ref{dHowToDefineLstAspects} might help you with (b). Here now we
% describe all hooks of the \packagename{listings} package.
% All hooks are executed inside an overall group. This group starts somewhere
% near the beginning and ends somewhere at the end of each listing. Don't make
% any other assumptions on grouping. So define variables globally if it's
% necessary---and be alert of side effects if you don't use your own groups.
% \begin{syntax}
% \item \hookname{AfterBeginComment}
%
%       is executed after the package has entered comment mode.
%       The starting delimiter is already typeset when the hook is called.
%
% \item \hookname{BoxUnsafe}
%
%       contains all material to deactivate all commands and registers which
%       are possibly unsafe inside |\hbox|. It is used whenever the package
%       makes a box around a listing and for \packagename{fancyvrb} support.
%
% \item \hookname{DeInit}
%
%       called at the very end of typesetting a listing but before closing the
%       box from \hookname{BoxUnsafe} or ending a float.
%
% \item \hookname{DetectKeywords}
%
%       This \hookname{Output} subhook is executed if and only if mode changes
%       are allowed, i.e.~if and only if the package doesn't process a comment,
%       string, and so on---see section \ref{dInternalModes}.
%
% \item \hookname{EmptyStyle}
%
%       executed to select the `empty' style---except the user has redefined
%       the style.
%
% \item \hookname{EndGroup}
%
%       executed whenever the package closes a group, e.g.~at end of comment or
%       string.
%
% \item \hookname{EOL}
%
%       called at each end of line, right before \hookname{InitVarsEOL}.
%
% \item \hookname{EveryLine}
%
%       executed at the beginning of each line. This hook must not change the
%       horizontal or vertical position.
%
% \item \hookname{ExitVars}
%
%       executed right before \hookname{DeInit}.
%
% \item \hookname{FontAdjust}
%
%       adjusts font specific internal values (currently |\lst@width| only).
%
% \item \hookname{Init}
%
%       executed once to initialize things before the character table is
%       changed. It is called after \hookname{PreInit} and before
%       \hookname{InitVars}.
%
% \item \hookname{InitVars}
%
%       called to init variables each listing.
%
% \item \hookname{InitVarsBOL}
%
%       initializes variables at the beginning of each line.
%
% \item \hookname{InitVarsEOL}
%
%       updates variables at the end of each line.
%
% \item \hookname{ModeTrue}
%
%       executed by the package when mode changes become illegal.
%       Here keyword detection is switched off for comments and strings.
%
% \item \hookname{OmegaOutputBox}
%
%       \hookname{OutputBox} subhook makes the package work together with
%       Lambda.
%
% \item \hookname{OnNewLine}
%
%       executed \emph{before} the package starts one or more new lines,
%       i.e.~before saying |\par\noindent\hbox{}| (roughly speaking).
%
% \item \hookname{Output}
%
%       Called before an identifier is printed.
%       If you want a special printing style, modify |\lst@thestyle|.
%
% \item \hookname{OutputBox}
%
%       used inside each output box.
%
% \item \hookname{OutputOther}
%
%       Called before other character strings are printed.
%       If you want a special printing style, modify |\lst@thestyle|.
%
% \item \hookname{PostOutput}
%
%       Called after printing an identifier or any other output unit.
%
% \item \hookname{PostTrackKeywords}
%
%       is a very special \hookname{Init} subhook to insert keyword tests and
%       define keywords on demand.
%       This hook is called after \hookname{TrackKeywords}.
%
% \item \hookname{PreInit}
%
%       called right before |Init|.
%
% \item \hookname{PreSet}
%
%       Each typesetting command/environment calls this hook to init internals before any user supplied key is set.
%
% \item \hookname{SelectCharTable}
%
%       is executed after the package has selected the standard character table.
%       Aspects adjust the character table here and define stringizer, comment delimiters, and so on.
%
% \item \hookname{SetStyle}
%
%       Called before internal assignments for setting a style are made.
%       This hook determines which parameters are reset every style selection.
%
% \item \hookname{SetLanguage}
%
%       Called before internal assignments for setting a language are made.
%       This hook determines which parameters are reset every language selection.
%
% \item \hookname{TextStyle}
%
%       deactivates features for textstyle listings.
%
% \item \hookname{TrackKeywords}
%
%       is a very special \hookname{Init} subhook to insert keyword tests and
%       define keywords on demand.
%       This hook is called before \hookname{PostTrackKeywords}.
% \end{syntax}
%
%
% \subsection{Character tables}
%
% Now you know how a car looks like, and you can get a driving license if you
% take some practice. But you will have difficulties if you want to make heavy
% alterations to the car. So let's take a closer look and come to the most
% difficult part: the engine. We'll have a look at the big picture and fill in
% the details step by step. For our purpose it's good to override \TeX's
% character table. First we define a standard character table which contains
% \begin{itemize}
% \item letters $=$ characters identifiers are out of,
% \item digits $=$ characters for identifiers or numerical constants,
% \item spaces $=$ characters treated as blank spaces,
% \item tabulators $=$ characters treated as tabulators,
% \item form feeds $=$ characters treated as form feed characters, and
% \item others $=$ all other characters.
% \end{itemize}
% This character table is altered depending on the current programming language.
% We may define string and comment delimiters or other special characters.
% Table \ref{dStdCharTable} shows the standard character table.
% \begin{table}[tb]
% \caption{Standard character table}\lstlabel{dStdCharTable}
% \begin{tabular}{ll}
% class & characters\\
% \noalign{\smallskip}
% letter & \texttt{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}\\
%        & \texttt{a b c d e f g h i j k l m n o p q r s t u v w x y z}\\
%        & \texttt{@ \textdollar\ } |_|\\
% digit  & \texttt{0 1 2 3 4 5 6 7 8 9}\\
% other  & \texttt{!\ " \#\ \%\ \&\ ' ( ) * + , - .\ / :\ ; < = > ?}\\
%        & {\catcode`\|=12\texttt{[ \char92\ ] \textasciicircum\ \char123\ | \char125\ \textasciitilde}}\\
% space  & chr(32)\\
% tabulator & chr(9)\\
% form feed & chr(12)\\
% \noalign{\smallskip}
% \end{tabular}
% \par\noindent
% Note: Extended characters of codes 128--255 (if defined) are \emph{currently}
% letters.
% \end{table}
% How these `classes' work together? Let's say that the current character
% string is `|tr|'. Then letter `|y|' simply appends the letter and we get
% `|try|'. The next nonletter (and nondigit) causes the output of the
% characters. Then we collect all coming nonletters until reaching a letter
% again. This causes the output of the nonletters, and so on. Internally each
% character becomes active in the sense of \TeX\ and is defined to do the right
% thing, e.g.~we say
% \begin{verbatim}
%    \def A{\lst@ProcessLetter A}\end{verbatim}
% where the first `|A|' is active and the second has catcode 11 (= letter).
% The macro |\lst@ProcessLetter| gets one token and treats it as a letter.
% The following macros exist, where the last three get no explicit argument.
% \begin{syntax}
% \item[0.18] |\lst@ProcessLetter| \meta{spec.\ token}
% \item[0.18] |\lst@ProcessDigit| \meta{spec.\ token}
% \item[0.18] |\lst@ProcessOther| \meta{spec.\ token}
% \item[0.18] |\lst@ProcessTabulator|
% \item[0.18] |\lst@ProcessSpace|
% \item[0.20] |\lst@ProcessFormFeed|
% \end{syntax}
% \meta{spec.\ token} is supposed to do two things. Usually it expands to
% a printable version of the character. But if |\lst@UM| is equivalent to
% |\@empty|, \meta{spec.\ token} must expand to a character token.
% For example, the sharp usually expands to |\#|, which is defined via
% |\chardef| and is not a character token. But if |\lst@UM| is equivalent to
% |\@empty|, the sharp expands to the character `|#|' (catcode 12). Note:
% \emph{Changes to} |\lst@UM| \emph{must be locally.}  However, there should
% be no need to do such basic things yourself. The \packagename{listings}
% package provides advanced macros which use that feature,
% e.g.~|\lst@InstallKeywords| in section \ref{dKeywordsAndWorkingIdentifiers}.
%
% The following commands exist.
% \begin{syntax}
% \item[0.20] |\lst@UseBasicClasses|\marg{letters}\marg{digits}\marg{others}
%
%       modifies the standard character table. The specified characters become
%       letters, digits and others, respectively. The `characters' |\|, |{|,
%       |}|, |%| and |#| must be entered with preceding backslashes.
%
%       Note: The keys \keyname{alsoletter}, \keyname{alsodigit} and
%       \keyname{alsoother} exist and should be used instead.
%       Internally the keys use the command here.
%
% \item[0.18] |\lst@Def|\marg{character code}\meta{parameter text}\marg{definition}
% \item[0.18] |\lst@Let|\marg{character code}\meta{token}
%
%       defines the specified character respectively assigns \meta{token}.
%       The catcode table if not affected. Be careful if your new definition
%       has parameters. First note that it is not safe to read more than one
%       character ahead. Second, the argument can be \emph{arbitrary};
%       somtimes it's the next source code character, sometimes it's some
%       code of the \packagename{listings} package, e.g.~|\relax|, |\@empty|,
%       |\else|, |\fi|, and so on. Therefore don't use \TeX's ord-operator |`|
%       on such an argument, e.g.~don't write |\ifnum`#1=65| to test against
%       `|A|'.
%
%       |\lst@Def| and |\lst@Let| are relatively slow. The real definition of
%       the standard character table differs from the following example, but it
%       could begin with
% \begin{verbatim}
%    \lst@Let{9}\lst@ProcessTabulator
%    \lst@Let{32}\lst@ProcessSpace
%    \lst@Def{48}{\lst@ProcessDigit 0}
%    \lst@Def{65}{\lst@ProcessLetter A}\end{verbatim}
%
% \item[0.20] |\lst@activecharstrue|
% \item[0.20] |\lst@activecharsfalse|
%
%       control whether selecting the character table also makes all characters
%       active (standard/extended). This is usually true and therefore default.
%       Only the \packagename{fancyvrb} interface sets it locally false.
% \end{syntax}
% That's enough for the moment. Section \ref{dUsefulInternalDefinitions}
% presents advanced definitions to manipulate the character table, in
% particular how to add new comment or string types.
%
%
% \subsection{Internal modes}\lstlabel{dInternalModes}
%
% You probably know \TeX's conditional commands |\ifhmode|, |\ifvmode|,
% |\ifmmode|, and |\ifinner|. They tell you whether \TeX\ is in (restricted)
% horizontal or (internal) vertical or in (nondisplay) mathematical mode. For
% example, true |\ifhmode| and true |\ifinner| indicate restricted horizontal
% mode, which means that you are in a |\hbox|. The typical user doesn't care
% about such modes; \TeX/\LaTeX\ manages all this. But since you're reading the
% developer's guide, we discuss the analogue for the \packagename{listings}
% package now. We use modes to distinguish comments from strings, comment lines
% from single comments, and so on.
%
% The package is in `no mode' before reading source code. In the phase of
% initialization it goes to `processing mode'. For example, consider the code
% line
% \begin{verbatim}
%    "string" // comment\end{verbatim}
% and assume |language=C++| and |texcl=true|. When the package reads the string
% delimiter, it enters `string mode' and processes the string. The matching
% closing delimiter leaves the mode, i.e.\ switches back to the general
% `processing mode'. Coming to the two slashes, the package detects a comment
% line; it therefore enters `comment line mode' and outputs the slashes
% afterwards. Now the \aspectname{escape} aspect immediatly leaves `comment
% line mode', interrupts the current mode sequence (`no mode' $\to$ 'processing
% mode'), and enters `\TeX\ comment line mode'. At the end of line we reenter
% the mode sequence leading to `processing mode'.
%
% This very simple looking `escape to \LaTeX' feature works since active
% `no mode' implies that \TeX's characters and catcodes are present, whereas
% `processing mode' means that \packagename{listings}' characters and catcodes
% are active. Table \ref{dDefinedInternalModes} shows the meaning of all modes
% currently existing and which aspect they belong to.
% \begin{table}[htbp]
% \caption{Internal modes}\lstlabel{dDefinedInternalModes}
% \def\lsttabspace{\hspace*{1em}\hfill}
% \begin{tabular}{@{}lp{0.56\linewidth}@{}}
% aspect\lsttabspace\meta{mode name} & indicates that we are processing \ldots\\
% \hline \noalign{\smallskip}
% kernel\lsttabspace |\lst@nomode| &
%       If this mode is active, \TeX's `character table' is present; the other
%       implication is not true. Any other mode \emph{may} imply that catcodes
%       and\nobreak/\allowbreak or definitions of characters are changed.
% \\
%       \lsttabspace |\lst@Pmode| &
%       is a general processing mode. If active we are processing a listing,
%       but haven't entered a more special mode.
% \\
%       \lsttabspace |\lst@GPmode| &
%       general purpose mode for language definitions.
% \\
% \aspectname{strings}\lsttabspace |\lst@stringmode| &
%       \ldots~a string.
% \\
% \aspectname{comments}\lsttabspace |\lst@CLmode| &
%       \ldots~a (fixed) comment line.
% \\
% \aspectname{pod}\lsttabspace |\lst@PODmode| &
%       \ldots~a POD---Perl specific.
% \\
% \aspectname{escape}\lsttabspace |\lst@TeXCLmode| &
%       \ldots~a comment line, but \TeX's character table is present---except
%       the EOL character, which is needed to terminate this mode.
% \\
%       \lsttabspace |\lst@TeXmode| &
%       indicates that \TeX's character table is present (except one user
%       specified character, which is needed to terminate this mode).
% \\
% \aspectname{directives}\lsttabspace |\lst@CDmode| &
%       indicates that the current line began with a compiler directive.
% \\
% \aspectname{keywordcomments}\lsttabspace |\lst@KCmode| &
%       \ldots~a keyword comment.
% \\
%       \lsttabspace |\lst@KCSmode| &
%       \ldots~a keyword comment which can be terminated by a semicolon only.
% \end{tabular}
% \end{table}
%
% Each aspect may define its own mode(s) simply by allocating it/\allowbreak
% them inside the aspect definition.
% Two variables show the internal state of processing. You are allowed to read
% them, but \emph{direct write access is prohibited}. Note: |\lst@ifmode| is
% \emph{not} obsolete since there is no relation between the boolean and the
% current mode. It will happen that we enter a mode without setting
% |\lst@ifmode| true, and we'll set it true without assigning any mode!
% \begin{syntax}
% \item[0.19] |\lst@NewMode|\meta{mode name}
%
%       defines a new static mode, which is simply a nonnegative integer
%       assigned to \meta{mode name}. \meta{mode name} should have the prefix
%       |lst@| and suffix |mode|.
%
% \item[0.21] |\lst@UseDynamicMode|\marg{token\upshape(s\upshape)}
%
%       inserts dynamic mode number after \meta{token\upshape(s\upshape)}.
%       This number has braces around, i.e.~is to be used as argument to
%       the given token(s).
%
%       You should use this macro only in the process of initialization,
%       e.g.~to define comments when the character table is selected.
%       Otherwise you can get deep in trouble.
%
% \item[0.18,,counter] |\lst@mode|
%
%       keeps the current mode number. Use |\ifnum\lst@mode=|\meta{mode name}
%       to test against a mode. Don't modify the counter directly!
%
% \item[0.18,,boolean] |\lst@ifmode|
%
%       No mode change is allowed if this boolean is true---except leaving the
%       current mode. Use |\lst@modetrue| to modify this variable, but do it
%       only in \meta{start tokens}:
%
% \item[0.19] |\lst@EnterMode|\meta{mode name}\marg{start tokens}
%
%       opens a new group level, enters the mode \meta{mode name}, and executes
%       \meta{start tokens}. Use |\lst@modetrue| in \meta{start tokens} if the
%       mode prohibits mode changes. You must test yourself whether you're
%       allowed to enter the mode.
%
% \item[0.19] |\lst@LeaveMode|
%
%       returns to the previous mode by closing a group level (if and only if
%       the current mode isn't |\lst@nomode| already). You must test yourself
%       whether you're allowed to leave a mode.
%
%\iffalse
% \item[0.19] |\lst@LeaveAllModes|
%
%       returns to |\lst@nomode|.
%       This is some kind of emergency macro, so don't use it!
%\fi
%
% \item[0.19] |\lst@InterruptModes|
% \item[0.19] |\lst@ReenterModes|
%
%       The first command returns to |\lst@nomode|, but saves the current mode
%       sequence on a special stack. Afterwards the second macro returns to the
%       previous mode. In between these commands you may enter any mode you
%       want. In particular you can interrupt modes, enter some modes, and say
%       `interrupt modes' again. Then two re-enters will take you back in front
%       of the first `interrupt modes'.
%
%       Remember that |\lst@nomode| implies that \TeX's character table is
%       active.
% \end{syntax}
%
%
% \subsection{On the output}
%
% The \packagename{listings} package uses some variables to keep the output
% data. These variables belong to the kernel, but |\lst@lastother|,
% |\lst@token|, and |\lst@length| are `character class' variables which are
% used by the `output'. All the other are true `output' variables.
% Any write access is not recommended.
% \begin{syntax}
% \item[0.18] |\lst@PrintToken|
%
%       prints (outputs, typesets) the current character string and resets it.
%       This macro keeps track of all variables described here.
%
% \item[0.18,,token] |\lst@token|
%
%       contains the current character string. Each `character' usually
%       expands to its printable version, but it must expand to a character
%       token if |\lst@UM| is equivalent to |\@empty|.
%
% \item[0.12,,counter] |\lst@length|
%
%       is the length of the current character string.
%
% \item[0.12,,dimension] |\lst@width|
%
%       is the width of a single character box.
%
% \item[0.20,,global dimension] |\lst@currlwidth|
%
%       is the width of so far printed line.
%
% \item[0.18,,global counter] |\lst@column|
% \item[0.12,,global counter] |\lst@pos| (nonpositive)
%
%       |\lst@column|$-$|\lst@pos| is the length of the so far printed line.
%       We use two counters since this simplifies tabulator handling:
%       |\lst@pos| is a nonpositive representative of `length of so far
%       printed line' modulo \keyname{tabsize}.
%       It's usually not the biggest nonpositive representative.
%
% \item[0.20] |\lst@CalcLineLength|
%
%       |\@tempcnta| gets |\lst@column| $-$ |\lst@pos| $+$ |\lst@length|.
%       This is the current column number minus one.
%
% \item[0.18,,global dimension] |\lst@lostspace|
%
%       equals `lost' space $=$ desired current line width minus real line
%       width. Whenever this dimension is positive the flexible column format
%       can use this space to fix the column alignment.
%
% \item[0.18] |\lst@UseLostSpace|
%
%       inserts |\lst@lostspace| if and only if it's positive.
%       |\lst@lostspace| and |\lst@currlwidth| are updated if necessary.
%
% \item[0.19] |\lst@InsertLostSpace|
% \item[0.19] |\lst@InsertHalfLostSpace|
%
%       always insert (half) |\lst@lostspace| and update registers.
%
% \item[0.17,,data] |\lst@lastother|
%
%       equals \meta{spec.\ token} version of the last processed
%       nonidentifier-character. Since programming languages redefine the
%       standard character table, we use the original \meta{spec.\ token}.
%       For example, if a double quote was processed last, |\lst@lastother|
%       is not equivalent to the macro which enters and leaves string mode.
%       It's equivalent to |\lstum@"|, where |"| belongs to the control
%       sequence! Remember that \meta{spec.\ token} expands either to a
%       printable or to a token character.
%
%       |\lst@lastother| is equivalent to |\@empty| if such a character is not
%       available, e.g.~at the beginning of a line. Sometimes an indentifier
%       has already been printed after processing the last `other' character,
%       i.e.~the character is far, far away. In this case |\lst@lastother|
%       equals |\relax|.
%
% \item[0.20] |\lst@SaveOutputDef|\marg{character code}\meta{macro}
%
%       Stores the \meta{spec.\ token} corresponding to \meta{character code}
%       in \meta{macro}. This is the only safe way to get a correct meaning to
%       test against |\lst@lastother|.
%       Consider |\lst@SaveOutputDef{"5C}\lstum@backslash|. The `b'ackslashed
%       string delimiter could then say |\ifx\lst@lastother\lstum@backslash|
%       \ldots\ to test whether the last character has been a backslash.
%
%       You'll get a ``runaway argument'' error if \meta{character code} is not
%       between 33 and 126 (inclusive).
%
% \item[0.17] |\lst@outputspace|
%
%       Use this predefined \meta{spec.\ token} (obviously for character code
%       32) to test against |\lst@lastother|.
%
% \item[0.20] |\lstum@backslash|
%
%       Use this predefined \meta{spec.\ token} (for character code 92) to test
%       against |\lst@lastother|.
% \end{syntax}
%
%
% \subsection{Getting the kernel run}
%
% If you want new pretty-printing environments, you should be happy with
% section \ref{uEnvironments}. New commands like |\lstinline| or
% |\lstinputlisting| are more difficult. Roughly speaking you must follow
% these steps, where vertical dots mean ``Do whatever you want.'':
% \begin{enumerate}
% \item Open a group to make all changes local.
% \item $\vdots$
% \item Call |\lsthk@PreSet| in any case and redefine the global macro
%       |\lst@intname| (\lst\space internal name) afterwards if you want.
%       This name is used for the list of listings, for example.
% \item Now you \emph{can} (but need not) use |\lstset| to set some new
%       values.
% \item $\vdots$
% \item Execute |\lst@Init\relax| to finish initialization.
% \item $\vdots$
% \item Eventually comes the source code, which is processed by the kernel.
%       You must ensure that the characters are either not already read or all
%       active. Moreover \emph{you} must install a way to detect the end of the
%       source code. If you've reached the end, you must call |\lst@DeInit| to
%       shutdown the kernel safely.
% \item $\vdots$
% \item Close the group from the beginning.
% \end{enumerate}
% For example, consider the |\lstinline| command in case of being not inside an
% argument. Then the steps are as follows.
% \begin{enumerate}
% \item |\hbox\bgroup| opens a group and puts listing in a |\hbox|.
% \item |\def\lst@boxpos{b}| |\let\lst@ifflexible\iftrue| `baseline' aligns the
%       listing and chooses flexible columns.
% \item |\lsthk@PreSet|
% \item |\lstset{#1}| where |#1| is the user provided key=value list.
% \item |\lsthk@TextStyle| deactivates all features not safe inside a code
%       fragment.
% \item |\lst@Init\relax|
% \item |\everypar{}| deactivates the hook |EveryLine|. If |#1| is the next
%       character after |\lstinline| then |\lst@Def{`#1}{\lst@DeInit\egroup}|
%       installs the `end inline' detection. Moreover chr(13) is redefined to
%       end the fragment in the same way but also issues an error message.
% \item After reading the source code, |\lst@DeInit| (coming from |\lst@Def|
%       above) ends the fragment correctly.
% \item Nothing.
% \item |\egroup| (also from |\lst@Def|) closes the |\hbox| group.
% \end{enumerate}
% The real definition is different since we allow source code inside arguments,
% see section \ref{iInlineListings}. Read also section \ref{iTheInputCommand}
% if you really want to write pretty-printing commands.
%
%
% \section{Useful internal definitions}\lstlabel{dUsefulInternalDefinitions}
%
%
% \subsection{General purpose macros}\lstlabel{dGeneralPurposeMacros}
%
% \begin{syntax}
% \item[0.19] |\lst@AddTo|\meta{macro}\marg{\TeX~material}
%
%       adds \meta{\TeX~material} globally to the contents of \meta{macro}.
%
% \item[0.20] |\lst@Extend|\meta{macro}\marg{\TeX~material}
%
%       calls |\lst@AddTo| after the first token of \meta{\TeX~material} is
%       |\expand|ed|after|. The name `extend' might remind you of the inserted
%       |\expandafter|s. For example, |\lst@Extend \a \b| merges the contents
%       of the two macros and stores it globally in |\a|.
%
% \item[0.19] |\lst@lAddTo|\meta{macro}\marg{\TeX~material}
% \item[0.20] |\lst@lExtend|\meta{macro}\marg{\TeX~material}
%
%       are local versions of |\lst@AddTo| and |\lst@Extend|.
%
% \item[0.18] |\lst@DeleteKeysIn|\meta{macro}\meta{macro \textup(keys to remove\textup)}
%
%       Both macros contain a comma separated list of keys (or keywords). All
%       keys appearing in the second macro are removed (locally) from the first.
%
% \item[0.19] |\lst@ReplaceIn|\meta{macro}\meta{macro \textup(containing replacement list\textup)}
% \item[0.20] |\lst@ReplaceInArg|\meta{macro}\marg{replacement list}
%
%       The replacement list has the form $a_1b_1$\ldots$a_nb_n$, where each
%       $a_i$ and $b_i$ is a character sequence (enclosed in braces if
%       necessary) and may contain macros, but the first token of $b_i$ must
%       not be equivalent to |\@empty|. Each sequence $a_i$ inside the first
%       macro is (locally) replaced by $b_i$.
%       The suffix |Arg| refers to the \emph{braced} second argument instead of
%       a (nonbraced) macro. It's a hint that we get the `real' argument and
%       not a `pointer' to the argument.
%
% \item[0.20] |\lst@IfSubstring|\marg{character sequence}\meta{macro}\marg{then}\marg{else}
%
%       \meta{then} is executed if \meta{character sequence} is a substring of
%       the contents of \meta{macro}. Otherwise \meta{else} is called.
%
% \item[0.12] |\lst@IfOneOf|\meta{character sequence}|\relax|\meta{macro}\marg{then}\marg{else}
%
%       |\relax| terminates the first parameter here since it is faster than
%       enclosing it in braces. \meta{macro} contains a comma separated list
%       of identifiers. If the character sequence is one of these indentifiers,
%       \meta{then} is executed, and otherwise \meta{else}.
%
% \item[0.21] |\lst@Swap|\marg{tok1}\marg{tok2}
%
%       changes places of the following two tokens or arguments \emph{without}
%       inserting braces. For example, |\lst@Swap{abc}{def}| expands to
%       |defabc|.
%
% \item[0.18] |\lst@IfNextChars|\meta{macro}\marg{then}\marg{else}
% \item[0.19] |\lst@IfNextCharsArg|\marg{character sequence}\marg{then}\marg{else}
%
%       Both macros execute either \meta{then} or \meta{else} according to
%       whether the given character sequence respectively the contents of the
%       given macro is found (after the three arguments). Note an important
%       difference between these macros and \LaTeX's |\@ifnextchar|:
%       We remove the characters behind the arguments until it is possible to
%       decide which part must be executed. However, we save these characters
%       in the macro |\lst@eaten|, so they can be inserted using \meta{then} or
%       \meta{else}.
%
% \item[0.19] |\lst@IfNextCharActive|\marg{then}\marg{else}
%
%       executes \meta{then} if next character is active, and \meta{else}
%       otherwise.
%
% \item[0.20] |\lst@DefActive|\meta{macro}\marg{character sequence}
%
%       stores the character sequence in \meta{macro}, but all characters
%       become active. The string \emph{must not} contain a begin group, end
%       group or escape character (|{}\|); it may contain a left brace, right
%       brace or backslash with other meaning ($=$ catcode). This command
%       would be quite surplus if \meta{character sequence} is not already read
%       by \TeX\ since such catcodes can be changed easily. It is explicitly
%       allowed that the charcaters have been read, e.g.~in
%       |\def\test{\lst@DefActive\temp{ABC}}|!
%
%       Note that this macro changes |\lccode|s 0--9 without restoring them.
%
% \item[0.20] |\lst@DefOther|\meta{macro}\marg{character sequence}
%
%       stores \meta{character sequence} in \meta{macro}, but all characters
%       have catcode 12. Moreover all spaces are removed and control sequences
%       are converted to their name without preceding backslash. For example,
%       |\{ Chip \}| leads to |{Chip}| where all catcodes are 12---internally
%       the primitive |\meaning| is used.
%
% \iffalse
% \item[0.19] |\lst@MakeActive|\marg{character sequence}
%
%       stores the character sequence in |\lst@arg| and has the same
%       restrictions as |\lst@DefActive|. If fact, the latter definition uses
%       this macro here.
% \fi
% \end{syntax}
%
%
% \subsection{Keywords and working identifiers}\lstlabel{dKeywordsAndWorkingIdentifiers}
%
% The \aspectname{keywords} aspect defines three main macros. For example,
% the `keyword family' is defined via
% \begin{verbatim}
%   \lst@InstallFamily k{keywords}{keywordstyle}\bfseries{keywordstyle}{}ld\end{verbatim}
% \begin{syntax}
% \item[0.20,,changed] |\lst@InstallKeywords|\marg{prefix}\marg{name}\syntaxbreak
%       \marg{style name}\marg{style init}\marg{default style name}\syntaxbreak
%       \marg{working procedure}\meta{\alternative{l,o}}\meta{\alternative{d,o}}
%
%       installs either a keyword or `working' class of identifiers according
%       to whether \meta{working procedure} is empty. The keys \meta{name},
%       \keyname{more}\meta{name}, \keyname{delete}\meta{name}, and if not
%       empty \meta{style name} are defined. The latter one is initialized
%       with \meta{style init} if not equivalent to |\relax|. If the user
%       hasn't provided the uninitialized style, \meta{default style name}
%       is used, for example \texttt{keywordstyle} for style of first order
%       keywords or \texttt{texcsstyle0} for `\TeX\ control sequence style'.
%       Note the difference between the keyword family and the single class
%       `family' \keyname{texcs} (suffix \texttt 0).
%
%       If \meta{working procedure} is not empty, this code is executed when
%       reaching such an (user defined) identifier. \meta{working procedure}
%       takes exactly one argument, namely the class number which is always
%       zero here. If the code uses variables and requires values from
%       previous calls, you must define these variables |\global|ly. It's not
%       sure whether working procedures are executed inside a (separate) group
%       or not.
%
%       \texttt l indicates a language key, i.e.~the keyword list is reset
%       every language selection. \texttt o stands for `other' key.
%       The keyword respectively working test is either installed at the
%       \hookname{DetectKeyword} or \hookname{Output} hook according to
%       \meta{\alternative{d,o}}.
%
% \item[0.21,,new] |\lst@InstallFamily|\marg{prefix}\marg{name}\syntaxbreak
%       \marg{style name}\marg{style init}\marg{default style name}\syntaxbreak
%       \marg{working procedure}\meta{\alternative{l,o}}\meta{\alternative{d,o}}
%
%       Same parameters, same functionality---with the following exceptions.
%
%       The argument to \meta{working procedure} is also the class number here,
%       but this number is not fixed since we are working with a whole family.
%
%       \meta{default style name} makes sense with \meta{style init} $\neq$
%       |\relax|. Only the first order member is initialized with \meta{style
%       init}. If you request second or third order members, they use this
%       style if \meta{default style name} $=$ \meta{style name}\texttt{1}.
%       Note the `\texttt{1}' for first order member.
%
% \item[0.20,,changed] |\lst@InstallTest|\marg{prefix}\syntaxbreak
%       |\lst@|\meta{name}|@list||\lst@|\meta{name}~|\lst@g|\meta{name}|@list||\lst@g|\meta{name}\syntaxbreak
%       |\lst@g|\meta{name}|@sty|~\meta{\alternative{w,s}}\meta{\alternative{d,o}}
%
%       installs a `working identifier' test or keyword style depending on
%       \meta{\alternative{w,s}}. |\lst@g|\meta{name}|@sty| contains the
%       working procedure or style macro. Note that the behaviour of the tests
%       depends on the \texttt{savemem} option.
%       The keyword respectively working test is either installed at the
%       \hookname{DetectKeyword} or \hookname{Output} hook according to
%       \meta{\alternative{d,o}}.
%
%^^A    Either each call of this macro or each different \meta{prefix} inserts
%^^A    another test (depending on the \texttt{savemem} option).
%
%       |\lst@|\meta{name} contains the current identifier list and
%       |\lst@|\meta{name}|@list| a `|\lst@|\meta{$n_i$}|\lst@g|\meta{$n_i$}'
%       sequence of currently used classes. If no other classes are used,
%       this equals |\lst@|\meta{name}|\lst@g|\meta{name}. The global versions
%       |\lst@g|\ldots\ are used to keep track of the keywords.
%       (This description needs improvement.)
% \end{syntax}
%
%
% \subsection{Character tables manipulated}
%
% \begin{syntax}
% \item[0.20] |\lst@SaveDef|\marg{character code}\meta{macro}
%
%       Saves the current definition of the specified character in
%       \meta{macro}. You should always save a character definition before you
%       redefine it! And use the saved version instead of writing directly
%       |\lst@Process|\ldots---the character could already be redefined and
%       thus not equivalent to its standard definition.
%
% \item[0.20] |\lst@DefSaveDef|\marg{character code}\meta{macro}\meta{parameter text}\marg{definition}
% \item[0.20] |\lst@LetSaveDef|\marg{character code}\meta{macro}\meta{token}
%
%       combine |\lst@SaveDef| and |\lst@Def| respectively |\lst@Let|.
% \end{syntax}
% Of course I shouldn't forget to mention \emph{where} to alter the character
% table. Hook material at \hookname{SelectCharTable} makes permanent changes,
% i.e.~it (usually) effects all languages. The following two \emph{keys} can be
% used in any language definition and effects the particular language only.
% These keys replace the old |\lstSCT@|\meta{language}(|@|\meta{dialect})
% mechanism and are possibly changed in future.
% \begin{syntax}
% \item[0.20,,key] |SelectCharTable=|\meta{\TeX\ code}
% \item[0.20,,key] |MoreSelectCharTable=|\meta{\TeX\ code}
%
%       uses \meta{\TeX\ code} (additionally) to select the character table.
%       The code is executed after the standard character table is selected,
%       but possibly before other aspects make more changes. Since previous
%       meanings are always saved and executed inside the new definition, this
%       should be harmless.
% \end{syntax}
%
% \paragraph{Examples}
% Eventually two rather useless examples. Each point (full stop) will cause a
% message `|.|' on the terminal and in the |.log| file if language |useless| is
% active:
% \begin{verbatim}
%   \lstdefinelanguage{useless}
%       {SelectCharTable=\lst@DefSaveDef{46}% save chr(46) ...
%            \lsts@point             % ... in \lsts@point and ...
%            {\message{.}\lsts@point}% ... use new definition
%       }\end{verbatim}
% If you want to count points, you could write
% \begin{verbatim}
%   \newcount\lst@points % \global
%   \lst@AddToHook{Init}{\global\lst@points\z@}
%   \lst@AddToHook{DeInit}{\message{Number of points: \the\lst@points}}
%   \lstdefinelanguage[2]{useless}
%       {SelectCharTable=\lst@DefSaveDef{46}\lsts@point
%            {\global\advance\lst@points\@ne \lsts@point}
%       }\end{verbatim}
% |% \global| indicates that the allocated counter is used globally. We zero
% the counter at the beginning of each listing, display a message about the
% current value at the end of a listing, and each processed point advances the
% counter by one.
%
% \begin{syntax}
% \item[0.21] |\lst@CArg|\meta{active characters}|\relax|\meta{macro}
%
%       The string of active characters is splitted into \meta{1st},
%       \meta{2nd}, and \marg{rest}. If one doesn't exist, it will be empty
%       or equivalent to |\@empty|. Then \meta{macro} is called with these
%       three arguments plus a yet undefined control sequence \meta{save 1st}.
%       This macro is intended to hold the current definition of \meta{1st},
%       so \meta{1st} can be redefined without loosing information.
%
% \item[0.19] |\lst@CArgX|\meta{characters}|\relax|\meta{macro}
%
%       makes \meta{characters} active before calling |\lst@CArg|.
%
% \item[0.21] |\lst@CDef|\meta{1st}\meta{2nd}\marg{rest}\meta{save 1st}\marg{execute}\marg{pre}\marg{post}
%
%       should be used in connection with |\lst@CArg| or |\lst@CArgX|, i.e.~as
%       \meta{macro} there. \meta{1st}, \meta{2nd}, and \meta{rest} must be
%       active characters and \meta{save 1st} must be an undefined control
%       sequence.
%
%       Whenever the package reaches the character \meta{1st} (in a listing),
%       \meta{execute} is executed. If the package detects the whole string
%       \meta{1st}\meta{2nd}\meta{rest}, we additionally execute \meta{pre},
%       then the string, and finally \meta{post}.
%       
% \item[0.21] |\lst@CDefX|\meta{1st}\meta{2nd}\marg{rest}\meta{save 1st}\marg{execute}\marg{pre}\marg{post}
%
%       Ditto except that we execute \meta{pre} and \meta{post} without the
%       original string if we reach \meta{1st}\meta{2nd}\meta{rest}.
%       This means that the string is replaced by \meta{pre}\meta{post} (with
%       preceding \meta{execute}).
% \end{syntax}
%
%
% \subsection{Comments}
%
% Earlier versions of this package used completely different macros to define
% different comment types. Now we have three main macros which are used by all
% ($=$ most common) comments. For example, the delimiters for \Cpp\ single
% comments are defined via
% \begin{verbatim}
%   \lst@CArg /*\relax\lst@CommentB\lst@SCmode{}{}{}\lst@commentstyle
%   \lst@CArg */\relax\lst@CommentE\lst@SCmode{}{}{}\end{verbatim}
% where the |/*| and |*/| are active characters. Otherwise one has to use
% |\lst@CArgX| which is slightly slower.
%
% \begin{syntax}
% \item[0.19,,changed] |\lst@CommentB|\meta{1st}\meta{2nd}\marg{rest}\meta{save 1st}\meta{mode}|{|\meta{execute}|}|\syntaxbreak\marg{delim~exe~modetrue}\marg{delim~exe~modefalse}\meta{style~macro}
%
%       defines the sequence \meta{1st}\meta{2nd}\meta{rest} to begin a
%       \meta{mode} comment. \meta{execute} is executed when the package comes
%       to \meta{1st}, whereas \meta{delim~exe~modetrue} and
%       \meta{delim~exe~modefalse} are executed only if the whole comment
%       delimiter \meta{1st}\meta{2nd}\meta{rest} is found. These two are
%       executed according to whether |\lst@ifmode| is true or false,
%       i.e.~exactly one is called if the whole delimiter is found.
%
%       By default the package enters comment mode if the delimiter is found
%       and |\lst@ifmode| is false. Internally we make an appropriate
%       definition of |\lst@bnext|, which can be gobbled by placing
%       |\@gobblethree| at the very end of \meta{delim exe modefalse}.
%       There you can also make your own definition (and gobble the default).
%       The next input characters come right after |\lst@bnext|.
%
%       \meta{style~macro} becomes the current style. So it would be easy to
%       support an extra |singlecommentstyle| for example. Write
% \begin{verbatim}
%    \lst@Key{singlecommentstyle}{}{\def\lst@scommentstyle{#1}}\end{verbatim}
%       and use |\lst@scommentstyle| instead of |\lst@commentstyle|. Don't
%       bother me about credits to you if you've implemented this for single
%       comments or other comment types. And one final hint: Don't forget to
%       initialize |\lst@scommentstyle| \emph{globally} before any listing is
%       typeset.
%
%       \meta{save 1st} must be an undefined macro and is used internally to
%       store the previous meaning of \meta{1st}. The arguments \meta{2nd}
%       and/or \meta{rest} are empty or equivalent to |\@empty| if the comment
%       delimiter has strictly less than three characters. All characters of
%       \meta{1st}\meta{2nd}\meta{rest} must already be active (if not empty).
%       That's not a problem since the macro |\lst@CArgX| does this job.
%
% \item[0.19] |\lst@CommentE|\meta{1st}\meta{2nd}\marg{rest}\meta{save 1st}\meta{mode}\marg{execute}\syntaxbreak\marg{delim~exe~modetrue}\marg{delim~exe~modefalse}
%
%       defines the sequence \meta{1st}\meta{2nd}\meta{rest} to end a
%       \meta{mode} comment. \meta{execute} is executed when the package comes
%       to \meta{1st}, whereas \meta{delim~exe~modetrue} and
%       \meta{delim~exe~modefalse} are executed only if the whole comment
%       delimiter \meta{1st}\meta{2nd}\meta{rest} is found. These two are
%       executed according to whether |\lst@mode| equals \meta{mode},
%       i.e.~exactly one is called if the whole delimiter is found.
%
%       By default the package ends comment mode if the delimiter is found and
%       |\lst@mode| equals \meta{mode}. Internally we make an appropriate
%       definition of |\lst@enext| (not |\lst@bnext|), which can be gobbled by
%       placing |\@gobblethree| at the very end of \meta{delim exe modetrue}.
%       There you can also make your own definition (and gobble the default).
%       The next input characters come right after |\lst@enext|.
%
%       \meta{save 1st} must be an undefined macro and is used internally to
%       store the previous meaning of \meta{1st}. The arguments \meta{2nd}
%       and/or \meta{rest} are empty or equivalent to |\@empty| if the comment
%       delimiter has strictly less than three characters. All characters of
%       \meta{1st}\meta{2nd}\meta{rest} must already be active (if not empty).
%
% \item[0.18] |\lst@BeginComment|\meta{mode}\meta{style}\meta{input}
%
%       The first macro starts a comment indicated by a single character (like
%       |%| in \TeX), whereas the second handles the case of two or more
%       characters. The input is the comment delimiter.
%
% \item[0.18] |\lst@EndComment| finishes any comment mode.
% \end{syntax}
% The last three macros are used by the other definitions to enter respectively
% leave comment modes.
%
%
% \subsection{Strings}
%
% Moreover the \aspectname{strings} aspect defines the following five.
% \begin{syntax}
% \item[0.18] |\lst@ProcessString@b| \meta{spec.\ token}
% \item[0.18] |\lst@ProcessString@d| \meta{spec.\ token}
% \item[0.18] |\lst@ProcessString@m| \meta{spec.\ token}
% \item[0.19] |\lst@ProcessString@bd| \meta{spec.\ token}
% \item[0.19] |\lst@ProcessString@db| \meta{spec.\ token}
% \end{syntax}
% We list some definitions.
% \begin{syntax}
% \item[0.19] |\lst@stringtypes|
%
%       contains a list of supported string types. Currently this is
%       \texttt{\csname lst@stringtypes\endcsname}. For each \meta{type}
%       there must exist the macro |\lst@ProcessString@|\meta{type}, which
%       actually determines the next operation. The macro gets the stringizer
%       as argument. The previous definition of the stringizer character is
%       stored in |\lsts@s|\meta{stringizer}.
%
% \item[0.18] |\lst@BeginString|\meta{macro=`old character definition'}
% \item[0.18] |\lst@EndString|
%
%       starts respectively ends a string. The argument is the macro in which
%       the previous definition of the stringizer is saved.
% \end{syntax}
%
% \paragraph{Examples}
% `d' means no extra work.
% Reaching the (first) stringizer enters string mode and coming to the next
% leaves it, and so on.
% Then the character sequence |''''| produces the right output:
% The second quote leaves string mode, but we enter it immediately since the
% stringizer is doubled.
% And now the implementation.
% First we output any preceding letters.
% \begin{verbatim}
%\gdef\lst@ProcessString@d#1{%
%    \lst@ifletter \lst@Output\lst@letterfalse \fi\end{verbatim}
% If we already process a string, we execute the saved meaning and look whether
% the last other (that's the stringizer) is the matching stringizer---a single
% quote must not end a string starting with a double quote.
% The macro |\lst@EndString| is defined at the end of this section.
% \begin{verbatim}
%    \ifnum\lst@mode=\lst@stringmode
%        \csname lsts@s#1\endcsname
%        \ifx\lst@lastother\lst@closestring
%            \lst@EndString
%        \fi
%    \else
%        \lst@OutputOther\end{verbatim}
% If we don't process a string, we test whether or not a string is allowed.
% |\lst@BeginString| enters string mode and defines the closing stringizer.
% This `begin string' macro gets one argument, hence we expand the control
% sequence name before executing the macro (if necessary).
% \begin{verbatim}
%        \lst@ifmode\else
%            \expandafter\expandafter\expandafter\lst@BeginString
%        \fi
%        \csname lsts@s#1\endcsname
%    \fi}\end{verbatim}
%
% \begin{verbatim}
%   \lst@AddTo\lst@stringtypes{,l}
%   \lst@AddTo\lst@xstringtypes{,l}\end{verbatim}
% \begin{verbatim}
%   \lst@NewMode\lst@stringlmode
%   \lst@AddToHook{EOL}
%       {\ifnum\lst@mode=\lst@stringlmode
%            \lst@EndString{}%
%        \fi}\end{verbatim}
% \begin{verbatim}
%   \gdef\lst@Stringizer@l#1\@empty{%
%       \lst@CArgX #1\relax\lst@CDef
%           {}%
%           {\let\lst@bnext\lst@CArgEmpty
%            \lst@ifmode\else
%               \def\lst@bnext########1\relax
%                    {\lst@BeginString{########1}%
%                     \lst@mode\lst@stringlmode}%
%            \fi
%            \lst@bnext}%
%           \@empty}\end{verbatim}
%
%
% \part{Implementation}
%
%
%^^A \CheckSum{8611}
% \CheckSum{9917}
%^^A
%^^A Don't index TeX-primitives.
%^^A
% \DoNotIndex{\advance,\afterassignment,\aftergroup,\batchmode,\begingroup}
% \DoNotIndex{\box,\catcode,\char,\chardef,\closeout,\copy,\count,\csname,\def}
% \DoNotIndex{\dimen,\discretionary,\divide,\dp,\edef,\else,\end,\endcsname}
% \DoNotIndex{\endgroup,\endinput,\endlinechar,\escapechar,\everypar}
% \DoNotIndex{\expandafter,\fi,\gdef,\global,\globaldefs,\hbadness,\hbox}
% \DoNotIndex{\hrulefill,\hss,\ht}
% \DoNotIndex{\if,\ifdim,\iffalse,\ifhmode,\ifinner,\ifnum,\ifodd,\iftrue}
% \DoNotIndex{\ifvoid,\ifx,\ignorespaces,\immediate,\input,\jobname,\kern}
% \DoNotIndex{\lccode,\leftskip,\let,\long,\lower,\lowercase,\meaning,\message}
% \DoNotIndex{\multiply,\muskip,\noexpand,\noindent,\openout,\par,\parfillskip}
% \DoNotIndex{\parshape,\parskip,\raise,\read,\relax,\rightskip,\setbox,\skip}
% \DoNotIndex{\string,\the,\toks,\uppercase,\vbox,\vcenter,\vrule,\vtop,\wd}
% \DoNotIndex{\write,\xdef}
%
%^^A
%^^A Don't index LaTeX's private definitions.
%^^A
% \DoNotIndex{\@@end,\@@par,\@M,\@arabic,\@circlefnt,\@currentlabel}
% \DoNotIndex{\@currenvir,\@depth,\@doendpe,\@dottedtocline,\@eha,\@ehc}
% \DoNotIndex{\@empty,\@firstofone,\@firstoftwo,\@float,\@for,\@getcirc}
% \DoNotIndex{\@gobble,\@gobbletwo,\@halfwidth,\@height,\@ifnextchar}
% \DoNotIndex{\@ifundefined,\@ignoretrue,\@makecaption,\@makeother,\@namedef}
% \DoNotIndex{\@ne,\@noligs,\@notprerr,\@onlypreamble,\@secondoftwo,\@spaces}
% \DoNotIndex{\@starttoc,\@totalleftmargin,\@undefined,\@whilenum}
% \DoNotIndex{\@wholewidth,\@width}
% \DoNotIndex{\c@chapter,\c@figure,\c@page,\end@float,\f@family,\filename@area}
% \DoNotIndex{\filename@base,\filename@ext,\filename@parse,\if@twoside}
% \DoNotIndex{\l@ngrel@x,\m@ne,\new@command,\nfss@catcodes,\tw@,\thr@@}
% \DoNotIndex{\z@,\zap@space}
%
%^^A
%^^A Don't index LaTeX's package definitions.
%^^A
% \DoNotIndex{\AtEndOfPackage}
% \DoNotIndex{\CurrentOption,\DeclareOption,\IfFileExists,\InputIfFileExists}
% \DoNotIndex{\MessageBreak,\NeedsTeXFormat,\PackageError,\PackageWarning}
% \DoNotIndex{\ProcessOptions,\ProvidesFile,\ProvidesPackage,\RequirePackage}
%
%^^A
%^^A Don't index LaTeX's public definitions.
%^^A
% \DoNotIndex{\abovecaptionskip,\active,\addcontentsline,\addtocounter,\begin}
% \DoNotIndex{\belowcaptionskip,\bfseries,\bgroup,\bigbreak,\chapter}
% \DoNotIndex{\contentsname,\do,\egroup,\footnotesize,\index,\itshape}
% \DoNotIndex{\linewidth,\llap,\makeatletter,\newbox,\newcommand,\newcount}
% \DoNotIndex{\newcounter,\newdimen,\newtoks,\newwrite,\nointerlineskip}
% \DoNotIndex{\normalbaselines,\normalfont,\numberline,\pretolerance,\protect}
% \DoNotIndex{\qquad,\refstepcounter,\removelastskip,\renewcommand,\rlap}
% \DoNotIndex{\small,\smallbreak,\smallskipamount,\smash,\space,\strut}
% \DoNotIndex{\strutbox,\tableofcontents,\textasciicircum,\textasciitilde}
% \DoNotIndex{\textasteriskcentered,\textbackslash,\textbar,\textbraceleft}
% \DoNotIndex{\textbraceright,\textdollar,\textendash,\textgreater,\textless}
% \DoNotIndex{\textunderscore,\textvisiblespace,\thechapter,\ttdefault}
% \DoNotIndex{\ttfamily,\typeout,\value,\vphantom}
%
%^^A
%^^A Don't index definitions from other packages.
%^^A
% \DoNotIndex{\MakePercentComment,\MakePercentIgnore}
%
%^^A
%^^A Don't index 0.19 definitions.
%^^A
% \DoNotIndex{\listlistingsname,\listoflistings,\lstbox,\lstbox@}
% \DoNotIndex{\lstlanguage@}
%
%^^A
%^^A Don't index 0.20 subdefinitions.
%^^A
% \DoNotIndex{\lst@ATH@,\lst@BOLGobble@,\lst@BOLGobble@@,\lst@CArg@,\lst@CArg@@}
% \DoNotIndex{\lst@CBC@,\lst@CBC@@,\lst@CCECUse@,\lst@CCUseMacro@,\lst@DefLang@}
% \DoNotIndex{\lst@DefLang@@,\lst@DefOther@,\lst@DeleteKeysIn@,\lst@Escape@}
% \DoNotIndex{\lstframe@,\lst@frameH@,\lst@frameL@,\lst@frameR@}
% \DoNotIndex{\lst@FillOutputBox@,\lst@FindAlias@,\lst@FVConvert@}
% \DoNotIndex{\lst@IfNextChars@,\lst@IfNextChars@@,\lst@InsideConvert@}
% \DoNotIndex{\lst@InstallKeywords@,\lst@Key@,\lst@KeywordTestI@}
% \DoNotIndex{\lst@MakeActive@,\lst@MakeMoreKeywords@}
% \DoNotIndex{\lst@RC@,\lst@RC@@,\lst@ReplaceIn@,\lst@ReplaceInput@}
% \DoNotIndex{\lst@ReportAllocs@,\lst@SKS@,\lst@SKS@@,\lst@UBC@}
% \DoNotIndex{\lst@WorkingTestI@,\lstalias@,\lstalias@@,\lstalso@}
% \DoNotIndex{\lstdefinestyle@,\lstenv@BOLGobble@@}
% \DoNotIndex{\lstenv@ProcessJ@,\lstinline@,\lstKV@OptArg@,\lstKV@SetIf@}
% \DoNotIndex{\lstlang@,\lstnewenvironment@,\lstoutputpos@,\lstset@}
%
%
% \section{Overture}
%
% The required registers are listed in section \ref{dPackageLoading}.
% Furthermore, the \packagename{keyval} package allocates one token register.
% The macros, boxes and counters |\@temp?a| and |\@temp?b| and the dimensions
% |\@tempdim?| are also used, see the index.
% And I shouldn't forget |\@gtempa|.
%
% Before considering the implementation, here some conventions I used:
% \begin{itemize}
% \item All public macros have lower case letters and contain |lst|.
% \item The name of all private macros and variables use the prefixes
%       (possibly not up to date):
%	\begin{itemize}
%	\item |lst@| for a general macro or variable,
%	\item |lstenv@| if it is defined for the listing environment,
%	\item |lsts@| for |s|aved character meanings,
%	\item |\lsthk@|\meta{name of hook} holds hook material,
%	\item |lst|\meta{prefix}|@| for various kinds of keywords and working
%         identifiers.
%
%	\item |\lstlang@|\meta{language}|@|\meta{dialect} contains a language and
%	\item |\lststy@|\meta{the style} contains style definition,
%
%   \item |\lstpatch@|\meta{aspect} to patch an aspect,
%
%	\item |\lsta@|\meta{language}|$|\meta{dialect} contains alias,
%	\item |\lsta@|\meta{language} contains alias for all dialects of a language,
%	\item |\lstdd@|\meta{language} contains default dialect of a language
%         (if present).
%	\end{itemize}
% \item To distinguish procedure-like macros from macros holding data, the name
%       of procedure macros use upper case letters with each beginning word,
%       e.g.~|\lst@AddTo|.
% \item If a submacro does the main work, e.g.~|\lstinputlisting@| does it for
%       |\lstinputlisting|, we use the suffix |@|.
% \end{itemize}
%
% \begingroup
% All files generated from this \texttt{listings.dtx} will get a header.
%    \begin{macrocode}
%% Please read the software license in listings.dtx or listings.dvi.
%%
%% (w)(c) 1996/1997/1998/1999/2000 Carsten Heinz and/or any other author
%% listed elsewhere in this file.
%%
%% This file is distributed under the terms of the LaTeX Project Public
%% License from CTAN archives in directory  macros/latex/base/lppl.txt.
%% Either version 1.0 or, at your option, any later version.
%%
%% The listings package is free software.
%%
%% However, if you distribute the package as part of a commercial
%% product or if you use the package to prepare a document and sell the
%% document (books, journals, and so on), I'd like to encourage you to
%% make a donation to the LaTeX3 fund. The size of this `license fee'
%% should depend on the value of the package for your product.
%%
%% If you use the package to typeset a non-commercial document, please
%% send me a copy of the document (.dvi, .ps, .pdf, hardcopy, etc.) to
%% support further development.
%%
%% Permission is granted to change this file. You are not allowed to
%% distribute any changed version of this file, neither under the same
%% name nor under a different one.
%%
%% Send comments and ideas on the package, error reports and additional
%% programming languages to <cheinz@gmx.de>.
%%
%    \end{macrocode}
%
% Now comes identification.
%    \begin{macrocode}
%<kernel>\NeedsTeXFormat{LaTeX2e}
%<kernel>\ProvidesPackage{listings}[2000/08/23 v0.21 (Carsten Heinz)]
%<kernel>\def\lst@version{0.21}
%<misc>\ProvidesFile{lstmisc.sty}[2000/08/23 v0.21 (Carsten Heinz)]
%    \end{macrocode}
%
% If we input another file of the \packagename{listings} package, we change
% some catcodes: |@| and |"| become letters; tabulators and EOL characters
% are ignored. This avoids unwanted spaces (if I've forgotten a comment
% character |%|).
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@InputCatcodes{%
    \makeatletter \catcode`\"12%
    \catcode`\^^@\active
    \catcode`\^^I9%
    \catcode`\^^L9%
    \catcode`\^^M9%
    \catcode`\%14%
    \catcode`\~\active}
\def\lst@RestoreCatcodes#1{%
    \ifx\relax#1\else
        \noexpand\catcode`\noexpand#1\the\catcode`#1\relax
        \expandafter\lst@RestoreCatcodes
    \fi}
\edef\lst@RestoreCatcodes{%
    \lst@RestoreCatcodes\"\^^I\^^M\~\^^@\relax}
\lst@InputCatcodes
\AtEndOfPackage{\lst@RestoreCatcodes}
%    \end{macrocode}
%    \begin{macrocode}
\def\@lst{lst}
%    \end{macrocode}
% 
%    \begin{macrocode}
%</kernel>
%<*info>
%    \end{macrocode}
% \endgroup
% \begin{macro}{\lst@GetAllocs}
% \begin{macro}{\lst@ReportAllocs}
% Are used to show the allocated registers.
%    \begin{macrocode}
\def\lst@GetAllocs{%
    \edef\lst@allocs{%
        0\noexpand\count\the\count10,1\noexpand\dimen\the\count11,%
        2\noexpand\skip\the\count12,3\noexpand\muskip\the\count13,%
        4\noexpand\box\the\count14,5\noexpand\toks\the\count15,%
        6\noexpand\read\the\count16,7\noexpand\write\the\count17}}
\def\lst@ReportAllocs{%
    \message{^^JAllocs:}\def\lst@temp{none}%
    \expandafter\lst@ReportAllocs@\lst@allocs,\z@\relax\z@,}
\def\lst@ReportAllocs@#1#2#3,{%
    \ifx#2\relax \message{\lst@temp^^J}\else
        \@tempcnta\count1#1\relax \advance\@tempcnta -#3\relax
        \ifnum\@tempcnta=\z@\else
            \let\lst@temp\@empty
            \message{\the\@tempcnta \string#2,}%
        \fi
        \expandafter\lst@ReportAllocs@
    \fi}
\lst@GetAllocs
%    \end{macrocode}
% \end{macro}\end{macro}
% \begingroup
%    \begin{macrocode}
%</info>
%    \end{macrocode}
% \endgroup
%
%
% \section{General problems and \TeX niques}
%
% \begingroup
% All definitions in this section belong to the kernel.
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
% \endgroup
%
%^^A \subsection{Quick `if parameter empty'}
%^^A
%^^A There are many situations where you have to look whether a macro parameter is empty.
%^^A We have at least two possibilities to test |#1|, for example:
%^^A \begin{center}
%^^A \begin{minipage}{0.35\linewidth}
%^^A \begin{verbatim}
%^^A\def\test{#1}%
%^^A\ifx \test\empty
%^^A        % #1 is empty
%^^A\else
%^^A        % #1 is not empty
%^^A\fi\end{verbatim}
%^^A \end{minipage}
%^^A \hskip2em\vrule\hskip2em
%^^A \begin{minipage}{0.35\linewidth}
%^^A \begin{verbatim}
%^^A\ifx \empty#1\empty
%^^A        % #1 is empty
%^^A\else
%^^A        % #1 is not empty
%^^A\fi\end{verbatim}
%^^A \end{minipage}
%^^A \end{center}
%^^A where |\empty| is defined by |\def\empty{}|, of course.
%^^A The left variant should be clear and works in any case.
%^^A The right-hand side works correct if and only if the first token of |#1| is
%^^A not equivalent to |\empty|.
%^^A This granted, the |\ifx| is true if and only if |#1| is empty (since |\empty|
%^^A left from |#1| is (not) compared with |\empty| on the right).
%^^A The two |\empty|s might be replaced by any other macro, which is not
%^^A equivalent to the first token of the argument.
%^^A But the definition of that macro shouldn't be too complex since this would
%^^A slow down the |\ifx|.
%^^A The right example needs about $45\%$ of the left's time.
%^^A Note that this \TeX{}nique lost its importance from version 0.18 on and that
%^^A other packages use |!| or |\relax| instead of |\empty|, for example.
%^^A
%^^A This \TeXnique is described in ``The \TeX book'' on page 376.
%
%
% \subsection{Substring tests}\lstlabel{iSubstringTests}
%
% It's easy to decide whether a given character sequence---let's say
% |def|---is a substring of another string.
% First we define the temporary macro
% \begin{verbatim}
%     \def\lst@temp#1def#2\relax{%
%         \ifx \@empty#2\@empty
%                 % "def" is not substring
%         \else
%                 % "def" is substring
%         \fi}\end{verbatim}
% Then we call that macro as follows.
% \begin{quote}
% |\lst@temp| \meta{another string}|def\relax|
% \end{quote}
% When \TeX\ passes the arguments, the second is empty if and only if |def| is
% not a substring.
% Without the additional |def\@empty| one would get a ``runaway argument''
% error if \meta{another string} doesn't contain |def|.
%
% We use substring tests mainly in the special case of an identifier (here
% |key|) and a comma separated list of key(word)s:
% \begin{verbatim}
%     \def\lst@temp#1,key,#2\relax{%
%         \ifx \@empty#2\@empty
%                 % `key' is not a keyword
%         \else
%                 % `key' is a keyword
%         \fi}\end{verbatim}
% \begin{quote}
% |\lst@temp,|\meta{list of keywords}|,key,\relax|
% \end{quote}
% It works very well and is quite fast.
% But we can reduce run time in the case that |key| is a keyword.
% Then |#2| takes the rest of the string, namely all keywords after |key|.
% Since \TeX\ inserts |#2| between the |\@empty|s, it must drop all of |#2|
% except the first character which is compared with |\@empty|.
% We can redirect this rest to a third parameter:
% \begin{verbatim}
%     \def\lst@temp#1,key,#2#3\relax{%
%         \ifx \@empty#2%
%                 % "key" is not a keyword
%         \else
%                 % "key" is a keyword
%         \fi}\end{verbatim}
% \begin{quote}
% |\lst@temp,|\meta{list of keywords}|,key,\@empty\relax|
% \end{quote}
% That's a bit faster and an improvement for version 0.20.
%
% \begin{macro}{\lst@IfSubstring}
% The implementation should be clear from the discussion above.
%    \begin{macrocode}
\def\lst@IfSubstring#1#2{%
    \def\lst@temp##1#1##2##3\relax{%
        \ifx \@empty##2\expandafter\@secondoftwo
                 \else \expandafter\@firstoftwo \fi}%
    \expandafter\lst@temp#2#1\@empty\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@IfOneOf}
% Ditto.
%    \begin{macrocode}
\def\lst@IfOneOf#1\relax#2{%
    \def\lst@temp##1,#1,##2##3\relax{%
        \ifx \@empty##2\expandafter\@secondoftwo
                 \else \expandafter\@firstoftwo \fi}%
    \expandafter\lst@temp\expandafter,#2,#1,\@empty\relax}
%    \end{macrocode}
% \end{macro}
% \begin{REMOVED}
% Some day there's possibly need for a case insensitive keyword test again.
% We could use two |\uppercase|s to normalize the first parameter:
%    \begin{verbatim}
%\def\lst@IfOneOfInsensitive#1\relax#2{%
%    \uppercase{\def\lst@temp##1,#1},##2##3\relax{%
%        \ifx \@empty##2\expandafter\@secondoftwo
%                 \else \expandafter\@firstoftwo \fi}%
%    \uppercase{%
%        \expandafter\lst@temp\expandafter,#2,#1},\@empty\relax}\end{verbatim}
% Here we assume that macro |#2| already contains capital characters only,
% see the definition of |\lst@MakeMacroUppercase| at the very end of section
% \ref{iMakingTests}. If we \emph{must not} assume that |#2| contains upper
% characters only, we could simply insert an |\expandafter| between the second
% |\uppercase| and the following brace. But this slows down the tests!
% \end{REMOVED}
%
% \begin{macro}{\lst@DeleteKeysIn}
% The submacro does the main work; we only need to expand the second macro,
% the list of keys to remove, and append the terminator |\relax|.
%    \begin{macrocode}
\def\lst@DeleteKeysIn#1#2{%
    \expandafter\lst@DeleteKeysIn@\expandafter#1#2,\relax,}
%    \end{macrocode}
% `Replacing' the very last |\lst@DeleteKeysIn@| by |\lst@RemoveCommas|
% terminates the loop here. Note: The |\@empty| after |#2| ensures that this
% macro also works if |#2| is empty.
%    \begin{macrocode}
\def\lst@DeleteKeysIn@#1#2,{%
    \ifx\relax#2\@empty
        \expandafter\@firstoftwo\expandafter\lst@RemoveCommas
    \else
        \ifx\@empty#2\@empty\else
%    \end{macrocode}
% If we haven't reached the end of list and the key is not empty, we define a
% temporary macro which removes all appearences.
%    \begin{macrocode}
            \def\lst@temp##1,#2,##2{%
                ##1%
                \ifx\@empty##2\@empty\else
                    \expandafter\lst@temp\expandafter,%
                \fi ##2}%
            \edef#1{\expandafter\lst@temp\expandafter,#1,#2,\@empty}%
        \fi
    \fi
    \lst@DeleteKeysIn@#1}
%    \end{macrocode}
% \end{macro}
% \begin{OLDDEF}
% The following modification needs about $50\%$ more run time.
% It doesn't use |\edef| and thus also works with |\{| inside |#1|.
% However we don't need that at the moment.
%    \begin{verbatim}
%            \def\lst@temp##1,#2,##2{%
%                \ifx\@empty##2%
%                    \lst@lAddTo#1{##1}%
%                \else
%                    \lst@lAddTo#1{,##1}%
%                    \expandafter\lst@temp\expandafter,%
%                \fi ##2}%
%            \let\@tempa#1\let#1\@empty
%            \expandafter\lst@temp\expandafter,\@tempa,#2,\@empty\end{verbatim}
% \end{OLDDEF}
%
% \begin{macro}{\lst@RemoveCommas}
% The macro drops commas at the beginning and assigns the new value to |#1|.
%    \begin{macrocode}
\def\lst@RemoveCommas#1{\edef#1{\expandafter\lst@RC@#1\@empty}}
\def\lst@RC@#1{\ifx,#1\expandafter\lst@RC@ \else #1\fi}
%    \end{macrocode}
% \end{macro}
% \begin{OLDDEF}
% The following version works also with |\{| inside the macro |#1|.
%    \begin{verbatim}
%\def\lst@RemoveCommas#1{\expandafter\lst@RC@#1\@empty #1}
%\def\lst@RC@#1{%
%    \ifx,#1\expandafter\lst@RC@
%      \else\expandafter\lst@RC@@\expandafter#1\fi}
%\def\lst@RC@@#1\@empty#2{\def#2{#1}}\end{verbatim}
% \end{OLDDEF}
%
% \begin{macro}{\lst@ReplaceIn}
% \begin{macro}{\lst@ReplaceInArg}
% These macros are similar to |\lst@DeleteKeysIn|, \ldots
%    \begin{macrocode}
\def\lst@ReplaceIn#1#2{%
    \expandafter\lst@ReplaceIn@\expandafter#1#2\@empty\@empty}
\def\lst@ReplaceInArg#1#2{\lst@ReplaceIn@#1#2\@empty\@empty}
%    \end{macrocode}
% but we replace |#2| by |#3| instead of |,#2,| by |,| (which removed the key).
%    \begin{macrocode}
\def\lst@ReplaceIn@#1#2#3{%
    \ifx\@empty#3\relax\else
        \def\lst@temp##1#2##2{%
            \ifx\@empty##2%
                \lst@lAddTo#1{##1}%
            \else
                \lst@lAddTo#1{##1#3}\expandafter\lst@temp
            \fi ##2}%
        \let\@tempa#1\let#1\@empty
        \expandafter\lst@temp\@tempa#2\@empty
        \expandafter\lst@ReplaceIn@\expandafter#1%
    \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsection{Flow of control}
%
% \begin{macro}{\@gobblethree}
% is defined if and only if undefined.
%    \begin{macrocode}
\providecommand*\@gobblethree[3]{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Swap}
% is just this:
%    \begin{macrocode}
\def\lst@Swap#1#2{#2#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@if}
% \begin{macro}{\lst@true}
% \begin{macro}{\lst@false}
% An |\if| for temporary use.
%    \begin{macrocode}
\def\lst@true{\let\lst@if\iftrue}
\def\lst@false{\let\lst@if\iffalse}
\lst@false
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@IfNextCharsArg}
% is quite easy: We define a macro and call |\lst@IfNextChars|.
%    \begin{macrocode}
\def\lst@IfNextCharsArg#1{%
    \def\lst@tofind{#1}\lst@IfNextChars\lst@tofind}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@IfNextChars}
% We save the arguments and start a loop.
%    \begin{macrocode}
\def\lst@IfNextChars#1#2#3{%
    \let\lst@tofind#1\def\@tempa{#2}\def\@tempb{#3}%
    \let\lst@eaten\@empty \lst@IfNextChars@}
%    \end{macrocode}
% Expand the characters we are looking for.
%    \begin{macrocode}
\def\lst@IfNextChars@{\expandafter\lst@IfNextChars@@\lst@tofind\relax}
%    \end{macrocode}
% Now we can refine |\lst@tofind| and append the input character |#3| to
% |\lst@eaten|.
%    \begin{macrocode}
\def\lst@IfNextChars@@#1#2\relax#3{%
    \def\lst@tofind{#2}\lst@lAddTo\lst@eaten{#3}%
    \ifx#1#3%
%    \end{macrocode}
% If characters are the same, we either call |\@tempa| or continue the test.
%    \begin{macrocode}
        \ifx\lst@tofind\@empty
            \let\lst@next\@tempa
        \else
            \let\lst@next\lst@IfNextChars@
        \fi
        \expandafter\lst@next
    \else
%    \end{macrocode}
% If the characters are different, we call |\@tempb|.
%    \begin{macrocode}
        \expandafter\@tempb
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@IfNextCharActive}
% We compare the character |#3| with its active version |\lowercase{~}|.
% Note that the right brace between |\ifx~| and |#3| ends the |\lowercase|.
% The |\endgroup| restores the |\lccode|.
%    \begin{macrocode}
\def\lst@IfNextCharActive#1#2#3{%
    \begingroup \lccode`\~=`#3\lowercase{\endgroup
    \ifx~}#3%
        \def\lst@next{#1}%
    \else
        \def\lst@next{#2}%
    \fi \lst@next #3}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@for}
% A for-loop with expansion of the loop-variable.
%    \begin{macrocode}
\def\lst@for#1\do#2{%
    \def\lst@forbody##1{#2}%
    \@for\lst@forvar:=#1\do
	    {\expandafter\lst@forbody\expandafter{\lst@forvar}}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Catcode changes of characters already read*}\lstlabel{iCatcodeChangesOfCharactersAlreadyRead}
%
% A character gets its catcode right after reading it and \TeX\ has no
% primitive command to change catcodes of characters already read.
% But we can replace these characters by characters with same ASCII codes and
% different catcodes.
% It's not the same but suffices since the result is the same.
% Here we treat the very special case that all characters become active.
% A prototype macro would be
% \begin{verbatim}
%     \def\lst@MakeActive#1{\lccode`\~=`#1\lowercase{\def\lst@arg{~}}}\end{verbatim}
% This macro handles a single character only:
% The |\lowercase| changes the ASCII code of |~| to the one of |#1| since we
% have said that |~| is the lower case version of |#1|.
% Fortunately the |\lowercase| doesn't change the catcode, so we have an active
% version of |#1|.
% Note that |~| is usually active.
%
% \begin{macro}{\lst@MakeActive}
% We won't do this character by character.
% To increase speed we change nine characters at the same time (if nine
% characters are left).
% We get the argument, empty |\lst@arg| and begin a loop.
%    \begin{macrocode}
\def\lst@MakeActive#1{%
    \let\lst@temp\@empty \lst@MakeActive@#1%
    \relax\relax\relax\relax\relax\relax\relax\relax\relax}
%    \end{macrocode}
% There are nine |\relax|es since |\lst@MakeActive@| has nine parameters and we
% don't want any problems in the case that |#1| is empty.
% We need nine active characters now instead of a single |~|.
% We make these catcode changes local and define the coming macro |\global|.
%    \begin{macrocode}
\begingroup
\catcode`\^^@=\active \catcode`\^^A=\active \catcode`\^^B=\active
\catcode`\^^C=\active \catcode`\^^D=\active \catcode`\^^E=\active
\catcode`\^^F=\active \catcode`\^^G=\active \catcode`\^^H=\active
%    \end{macrocode}
% First we |\let| the next operation be |\relax|.
% This aborts our loop for processing all characters (default and possibly
% changed later).
% Then we look if we have at least one character.
% If this is not the case, the loop terminates and all is done.
%    \begin{macrocode}
\gdef\lst@MakeActive@#1#2#3#4#5#6#7#8#9{\let\lst@next\relax
    \ifx#1\relax
    \else \lccode`\^^@=`#1%
%    \end{macrocode}
% Otherwise we say that |^^@|=chr(0) is the lower case version of the first
% character.
% Then we test the second character.
% If there is none, we append the lower case |^^@| to |\lst@temp|.
% Otherwise we say that |^^A|=chr(1) is the lower case version of the second
% character and we test the next argument, and so on.
%    \begin{macrocode}
    \ifx#2\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@}}%
    \else \lccode`\^^A=`#2%
    \ifx#3\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A}}%
    \else \lccode`\^^B=`#3%
    \ifx#4\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B}}%
    \else \lccode`\^^C=`#4%
    \ifx#5\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C}}%
    \else \lccode`\^^D=`#5%
    \ifx#6\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C^^D}}%
    \else \lccode`\^^E=`#6%
    \ifx#7\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C^^D^^E}}%
    \else \lccode`\^^F=`#7%
    \ifx#8\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C^^D^^E^^F}}%
    \else \lccode`\^^G=`#8%
    \ifx#9\relax
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C^^D^^E^^F^^G}}%
%    \end{macrocode}
% If nine characters are present, we append (lower case versions of) nine
% active characters and call this macro again via redefining |\lst@next|.
%    \begin{macrocode}
    \else \lccode`\^^H=`#9%
        \lowercase{\lst@lAddTo\lst@temp{^^@^^A^^B^^C^^D^^E^^F^^G^^H}}%
        \let\lst@next\lst@MakeActive@
    \fi \fi \fi \fi \fi \fi \fi \fi \fi
    \lst@next}
\endgroup
%    \end{macrocode}
% This |\endgroup| restores the catcodes of chr(0)--chr(8), but not the
% catcodes of the characters inside |\lst@MakeActive@| since they are already
% read.
%
% Note: A conversion from an arbitrary `catcode--character code' table back to
% \TeX's catcodes is possible if we test against the character codes (either
% via |\ifnum| or |\ifcase|).
% But control sequences and begin and end group characters definitely need
% some special treatment.
% However I haven't checked the details.
% So just ignore this and don't bother me for this note. :\,--\,)
% \end{macro}
%
% \begin{macro}{\lst@DefActive}
% An easy application of |\lst@MakeActive|.
%    \begin{macrocode}
\def\lst@DefActive#1#2{\lst@MakeActive{#2}\let#1\lst@temp}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@DefOther}
% We use the fact that |\meaning| produces catcode 12 characters---except
% spaces stay spaces. |\escapechar| is modified locally to suppress the output
% of an escape character. Finally we remove spaces via \LaTeX's |\zap@space|,
% which was proposed by \lsthelper{Rolf~Niepraschk}{1997/04/24}{use \zap@space}
% (not in this context, but that doesn't matter).
%    \begin{macrocode}
\def\lst@DefOther#1#2{%
    \begingroup \def#1{#2}\escapechar\m@ne \expandafter\endgroup
    \expandafter\lst@DefOther@\meaning#1\relax#1}
\def\lst@DefOther@#1->#2\relax#3{\edef#3{\zap@space#2 \@empty}}
%    \end{macrocode}
% \end{macro}
%
%
%\ifhyper
% \subsection{Applications to \ref*{iCatcodeChangesOfCharactersAlreadyRead}*}\lstlabel{iApplicationsTo}
%\else
% \subsection{Applications to \ref{iCatcodeChangesOfCharactersAlreadyRead}*}\lstlabel{iApplicationsTo}
%\fi
%
% If an environment is used inside an argument the listing is already read and
% we can do nothing to preserve the catcodes.
% However, under certain circumstances the environment can be used inside an
% argument---that's at least what I've said in the user's guide.
% And now I have to work for it coming true.
% Moreover we define an analogous conversion macro for the
% \packagename{fancyvrb} mode.
% \begin{syntax}
% \item[0.19] |\lst@InsideConvert{|\meta{\TeX\ material \textup(already read\textup)}|}|
%
%       \emph{appends} a `verbatim' version of the argument to |\lst@arg|, but
%       all appended characters are active.
%       Since it's not a character to character conversion, `verbatim' needs to
%       be explained.
%       All characters can be typed in as they are except |\|, |{|, |}| and
%       |%|.
%       If you want one of these, you must write |\\|, |\{|, |\}| and |\%|
%       instead.
%       If two spaces should follow each other, the second (third, fourth,
%       \ldots) space must be entered with a preceding backslash.
%
% \item[0.19] |\lst@FVConvert{|\meta{\TeX\ material \textup(already read\textup)}|}|
%
%       \emph{appends} a `verbatim' version of the argument to |\lst@arg|.
%       `Verbatim' is different here: Control sequences, |\bgroup| and
%       |\egroup| characters are just copied, but the arguments enclosed in
%       such groups and all other characters become active.
%       Moreover we insert some special macro calls not to loose the arguments.
%       This might go wrong if a `single token argument' is not enclosed in
%       braces since in that case we insert no special macro calls.
% \end{syntax}
%
% \begin{macro}{\lst@InsideConvert}
% We call a submacro (similar to |\zap@space|) to preserve single spaces which
% are replaced by active spaces.
%    \begin{macrocode}
\def\lst@InsideConvert#1{\lst@InsideConvert@#1 \@empty}
\begingroup \lccode`\~=`\ \relax \lowercase{%
%    \end{macrocode}
% We make |#1| active and append these characters (plus an active space) to
% |\lst@arg|.
% If we haven't found the end |\@empty| of the input, we continue the process.
%    \begin{macrocode}
\gdef\lst@InsideConvert@#1 #2{%
    \lst@MakeActive{#1}%
    \ifx\@empty#2%
        \lst@lExtend\lst@arg{\lst@temp}%
    \else
        \lst@lExtend\lst@arg{\lst@temp~}%
        \expandafter\lst@InsideConvert@
    \fi #2}
%    \end{macrocode}
% Finally we end the |\lowercase| and close a group.
%    \begin{macrocode}
}\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@FVConvert}
% Since |\@ifnextchar\bgroup| might fail, we have to use |\ifcat| here.
% Bug reported by \lsthelper{Denis~Girou}{1999/07/26}{fancyvrb=true + `second
% commandchar' other than \{ doesn't work}.
% However we don't gobble space tokens as |\@ifnextchar| does.
%    \begin{macrocode}
\gdef\lst@FVConvert{\futurelet\@let@token\lst@FVConvert@@}
\gdef\lst@FVConvert@@{%
    \ifcat\noexpand\@let@token\bgroup \expandafter\lst@FVConvertArg
                                \else \expandafter\lst@FVConvert@ \fi}
%    \end{macrocode}
% Coming to such a catcode 1 character we convert the argument and add it
% together with group delimiters to |\lst@arg|.
% We also add |\lst@PrintToken|, which prints all collected characters before
% we forget them.
% Finally we continue the conversion.
%    \begin{macrocode}
\gdef\lst@FVConvertArg#1{%
    {\let\lst@arg\@empty
     \lst@FVConvert#1\@nil
     \global\let\@gtempa\lst@arg}%
     \lst@if
         \lst@lExtend\lst@arg{\expandafter{\@gtempa\lst@PrintToken}}%
     \else
         \lst@lExtend\lst@arg{\expandafter{\@gtempa}}%
     \fi
     \lst@FVConvert}
%    \end{macrocode}
% Having no |\bgroup|, we look whether we've found the end of the input, and
% convert one token ((non)active character or control sequence) and continue.
%    \begin{macrocode}
\gdef\lst@FVConvert@#1{%
    \ifx \@nil#1\else
        \lst@if
            \if\relax\noexpand#1%
                \lst@lAddTo\lst@arg{\lst@UseLostSpace\lst@PrintToken#1}%
            \else
                \lccode`\~=`#1\lowercase{\lst@lAddTo\lst@arg~}%
            \fi
        \else
            \lccode`\~=`#1\lowercase{\lst@lAddTo\lst@arg~}%
        \fi
        \expandafter\lst@FVConvert
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Driver file handling*}
%
% The \packagename{listings} package is split into several driver files,
% miscellaneous ($=$ aspect) files, and one kernel file.
% All these files can be loaded partially and on demand---except the kernel
% which provides this functionality.
% \begin{syntax}
% \item[0.21] |\lst@Require|\marg{name}\marg{prefix}\marg{feature list}\meta{alias}\meta{file list macro}
%
%       tries to load all items of \meta{feature list} from the files
%       listed in \meta{file list macro}.
%       Each item has the form [\oarg{sub}]\meta{feature}.
%       |\lst@if| equals |\iftrue| if and only if all items were loadable.
%
%       The macro \meta{alias} gets an item as argument and must define
%       appropriate versions of |\lst@oalias| and |\lst@malias|. In fact
%       the feature associated with these definitions is loaded. You can
%       use \meta{alias}$=$|\lst@NoAlias| for no substitution.
%
%       \meta{prefix} identifies the type internally and \meta{name} is used
%       for messages.
%
%       For example, |\lstloadaspects| uses the following arguments where |#1|
%       is the list of aspects: |{aspects}|\allowbreak|a|\allowbreak
%       |{#1}|\allowbreak|\lst@NoAlias|\allowbreak|\lstaspectfiles|.
%
% \item[0.20] |\lst@DefDriver|\marg{name}\marg{prefix}\meta{interface macro}|\if|\alternative{true,false}
%
%       
%
% \item[0.21] |\lst@IfRequired|\oarg{sub}\marg{feature}\marg{then}\marg{else}
%
%       is used inside a driver file by the aspect, language, or whatever
%       else defining commands. \meta{then} is executed if and only if
%       \oarg{sub}\marg{feature} has been requested via |\lst@Require|.
%       Otherwise \meta{else} is executed---which is also the case for
%       subsequent calls with the same \oarg{sub}\marg{feature}.
%
%       \meta{then} and \meta{else} may use |\lst@prefix| (read access only).
%
%       |\lst@BeginAspect| in section \ref{iAspectCommands} and |\lst@DefDriver|
%       serve as examples.
% \end{syntax}
%
% \begin{macro}{\lst@Require}
% Initialize variables (if required items aren't empty), \ldots
%    \begin{macrocode}
\def\lst@Require#1#2#3#4#5{%
    \begingroup
    \aftergroup\lst@true
    \ifx\@empty#3\@empty\else
        \def\lst@prefix{#2}\let\lst@require\@empty
%    \end{macrocode}
% and for each nonempty item: determine alias and add it to |\lst@require|
% if it isn't loaded.
%    \begin{macrocode}
        \edef\lst@temp{\expandafter\zap@space#3 \@empty}%
        \lst@for\lst@temp\do{%
          \ifx\@empty##1\@empty\else \lstKV@OptArg[]{##1}{%
            #4[####1]{####2}%
            \@ifundefined{\@lst\lst@prefix @\lst@malias $\lst@oalias}%
            {\edef\lst@require{\lst@require,\lst@malias $\lst@oalias}}%
            {}}%
          \fi}%
%    \end{macrocode}
% Init things and input files if and as long as it is necessary.
%    \begin{macrocode}
        \global\let\lst@loadaspects\@empty
        \lst@InputCatcodes
        \ifx\lst@require\@empty\else
            \lst@for{#5}\do{%
                \ifx\lst@require\@empty\else
                    \InputIfFileExists{##1}{}{}%
                \fi}%
        \fi
%    \end{macrocode}
% Issue error and call |\lst@false| (after closing the local group) if some
% items weren't loadable.
%    \begin{macrocode}
        \ifx\lst@require\@empty\else
            \PackageError{Listings}{Couldn't load requested #1}%
            {The following #1s weren't loadable:^^J\@spaces
             \lst@require^^JThis may cause errors in the sequel.}%
            \aftergroup\lst@false
        \fi
%    \end{macrocode}
% Request aspects.
%    \begin{macrocode}
        \ifx\lst@loadaspects\@empty\else
            \lst@RequireAspects\lst@loadaspects
        \fi
    \fi
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@IfRequired}
% uses |\lst@IfOneOf| and adds some code to \meta{then} part:
% delete the now loaded item from the list and define
% |\lst|\meta{prefix}|@|\meta{feature}|$|\meta{sub}.
%    \begin{macrocode}
\def\lst@IfRequired[#1]#2{%
    \lst@NormedDef\lst@temp{[#1]#2}%
    \expandafter\lst@IfRequired@\lst@temp\relax}
\def\lst@IfRequired@[#1]#2\relax#3{%
    \lst@IfOneOf #2$#1\relax\lst@require
        {\lst@DeleteKeysIn@\lst@require#2$#1,\relax,%
         \global\expandafter\let
             \csname\@lst\lst@prefix @#2$#1\endcsname\@empty
         #3}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@require}
%    \begin{macrocode}
\let\lst@require\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@NoAlias}
% just defines |\lst@oalias| and |\lst@malias|.
%    \begin{macrocode}
\def\lst@NoAlias[#1]#2{%
    \lst@NormedDef\lst@oalias{#1}\lst@NormedDef\lst@malias{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LAS}
%    \begin{macrocode}
\gdef\lst@LAS#1#2#3#4#5#6#7{%
    \lst@Require{#1}{#2}{#3}#4#5%
    #4#3%
    \@ifundefined{lst#2@\lst@malias$\lst@oalias}%
        {\PackageError{Listings}%
         {#1 \ifx\@empty\lst@oalias\else \lst@oalias\space of \fi
          \lst@malias\space undefined}%
         {The #1 is not loadable or just mispellt.^^J%
          Type <RETURN> to proceed without changing the #1.}}%
        {#6\csname lst#2@\lst@malias $\lst@oalias\endcsname #7}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@RequireAspects}
% \begin{macro}{\lstloadaspects}
% make use of the just developped definitions.
%    \begin{macrocode}
\def\lst@RequireAspects#1{%
    \lst@Require{aspect}{asp}{#1}\lst@NoAlias\lstaspectfiles}
\let\lstloadaspects\lst@RequireAspects
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lstaspectfiles}
% This macro is defined if and only if it's undefined yet.
%    \begin{macrocode}
\@ifundefined{lstaspectfiles}
    {\newcommand\lstaspectfiles{lstmisc0.sty,lstmisc.sty}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@DefDriver}
% Test the next character and reinsert the arguments.
%    \begin{macrocode}
\gdef\lst@DefDriver#1#2#3#4{%
    \@ifnextchar[{\lst@DefDriver@{#1}{#2}#3#4}%
                 {\lst@DefDriver@{#1}{#2}#3#4[]}}
%    \end{macrocode}
% We set |\lst@if| locally true if the item has been requested.
%    \begin{macrocode}
\gdef\lst@DefDriver@#1#2#3#4[#5]#6{%
    \def\lst@name{#1}\let\lst@if#4%
    \lst@NormedDef\lst@driver{\@lst#2@#6$#5}%
    \lst@IfRequired[#5]{#6}{\begingroup \lst@true}%
                           {\begingroup}%
    \lst@setcatcodes
    \@ifnextchar[{\lst@XDefDriver{#1}#3}{\lst@DefDriver@@#3}}
%    \end{macrocode}
% Note that |\lst@XDefDriver| takes optional `base' arguments, but eventually
% calls |\lst@DefDriver@@|. We define the item (in case of need), and
% |\endgroup| resets some catcodes and |\lst@if|, i.e.~|\lst@XXDefDriver| knows
% whether called by a public or internal command.
%    \begin{macrocode}
\gdef\lst@DefDriver@@#1#2{%
    \lst@if
        \global\@namedef{\lst@driver}{#1{#2}}%
    \fi
    \endgroup
    \@ifnextchar[\lst@XXDefDriver\@empty}
%    \end{macrocode}
% We get the aspect argument, and (if not empty) load the aspects immediately
% if called by a public command or extend the list of required aspects or
% simply ignore the argument if the item leaves undefined.
%    \begin{macrocode}
\gdef\lst@XXDefDriver[#1]{%
    \ifx\@empty#1\@empty\else
        \lst@if
            \lstloadaspects{#1}%
        \else
            \@ifundefined{\lst@driver}{}%
            {\xdef\lst@loadaspects{\lst@loadaspects,#1}}%
        \fi
    \fi}
%    \end{macrocode}
% We insert an additional `also'key=value pair.
%    \begin{macrocode}
\gdef\lst@XDefDriver#1#2[#3]#4#5{\lst@DefDriver@@#2{also#1=[#3]#4,#5}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Aspect commands}\lstlabel{iAspectCommands}
%
% This section contains commands used in defining `\lst-aspects'.
% \begin{macro}{\lst@UserCommand}
% is mainly equivalent to |\gdef|.
%    \begin{macrocode}
%<!info>\let\lst@UserCommand\gdef
%<info>\def\lst@UserCommand#1{\message{\string#1,}\gdef#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BeginAspect}
% A straight-forward implementation:
%    \begin{macrocode}
\newcommand*\lst@BeginAspect[2][]{%
    \def\lst@curraspect{#2}%
    \ifx \lst@curraspect\@empty
        \expandafter\lst@GobbleAspect
    \else
%    \end{macrocode}
% If \meta{aspect name} is not empty, there are certain other conditions not to
% define the aspect (as described in section \ref{dHowToDefineLstAspects}).
%    \begin{macrocode}
%<!info>        \let\lst@next\@empty
%<info>        \def\lst@next{%
%<info>            \message{^^JDefine lst-aspect `#2':}\lst@GetAllocs}%
        \lst@IfRequired[]{#2}%
            {\lst@RequireAspects{#1}%
             \lst@if\else \let\lst@next\lst@GobbleAspect \fi}%
            {\let\lst@next\lst@GobbleAspect}%
        \expandafter\lst@next
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EndAspect}
% finishes an aspect definition.
%    \begin{macrocode}
\def\lst@EndAspect{%
    \csname\@lst patch@\lst@curraspect\endcsname
%<info>    \lst@ReportAllocs
    \let\lst@curraspect\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@GobbleAspect}
% drops all code up to the next |\lst@EndAspect|.
%    \begin{macrocode}
\long\def\lst@GobbleAspect#1\lst@EndAspect{\let\lst@curraspect\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Key}
% The command simply defines the key. But we must take care of an optional
% parameter and the initialization argument |#2|.
%    \begin{macrocode}
\def\lst@Key#1#2{%
%<info>    \message{#1,}%
    \@ifnextchar[{\lstKV@def{#1}{#2}}%
                 {\def\lst@temp{\lst@Key@{#1}{#2}}
                  \afterassignment\lst@temp
                  \global\@namedef{KV@\@lst @#1}####1}}
%    \end{macrocode}
% Now comes a renamed and modified copy from a \packagename{keyval} macro:
% We need global key definitions.
%    \begin{macrocode}
\def\lstKV@def#1#2[#3]{%
    \global\@namedef{KV@\@lst @#1@default\expandafter}\expandafter
        {\csname KV@\@lst @#1\endcsname{#3}}%
    \def\lst@temp{\lst@Key@{#1}{#2}}\afterassignment\lst@temp
    \global\@namedef{KV@\@lst @#1}##1}
%    \end{macrocode}
% We initialize the key if the first token of |#2| is not |\relax|.
%    \begin{macrocode}
\def\lst@Key@#1#2{%
    \ifx\relax#2\@empty\else
        \begingroup \globaldefs\@ne
        \csname KV@\@lst @#1\endcsname{#2}%
        \endgroup
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@UseHook}
% is very, very, \ldots, very (hundreds of times) easy.
%    \begin{macrocode}
\def\lst@UseHook#1{\csname\@lst hk@#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@AddToHook}
% \begin{macro}{\lst@AddToHookExe}
% \begin{macro}{\lst@AddToHookAtTop}
% All use the same submacro.
%    \begin{macrocode}
\def\lst@AddToHook{\lst@ATH@\iffalse\lst@AddTo}
\def\lst@AddToHookExe{\lst@ATH@\iftrue\lst@AddTo}
\def\lst@AddToHookAtTop{\lst@ATH@\iffalse\lst@AddToAtTop}
%    \end{macrocode}
% If and only if the boolean value is true, the hook material is executed
% globally.
%    \begin{macrocode}
\long\def\lst@ATH@#1#2#3#4{%
    \@ifundefined{\@lst hk@#3}{%
%<info>        \message{^^Jnew hook `#3',^^J}%
        \expandafter\gdef\csname\@lst hk@#3\endcsname{}}{}%
    \expandafter#2\csname\@lst hk@#3\endcsname{#4}%
    \def\lst@temp{#4}%
    #1% \iftrue|false
        \begingroup \globaldefs\@ne \lst@temp \endgroup
    \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@AddTo}
% Note that the definition is global!
%    \begin{macrocode}
\long\def\lst@AddTo#1#2{%
    \expandafter\gdef\expandafter#1\expandafter{#1#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@AddToAtTop}
% We need a couple of |\expandafter|s now. Simply note that we have\\
%   {\small\hspace*{2em}|\expandafter\gdef\expandafter#1\expandafter{\lst@temp|
%    $\langle$\textit{contents of }|#1|$\rangle$|}|}\\
% after the `first phase' of expansion.
%    \begin{macrocode}
\def\lst@AddToAtTop#1#2{\def\lst@temp{#2}%
    \expandafter\expandafter\expandafter\gdef
    \expandafter\expandafter\expandafter#1%
    \expandafter\expandafter\expandafter{\expandafter\lst@temp#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@lAddTo}
% A local version of |\lst@AddTo| \ldots
%    \begin{macrocode}
\def\lst@lAddTo#1#2{\expandafter\def\expandafter#1\expandafter{#1#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Extend}
% \begin{macro}{\lst@lExtend}
% and here we expand the first token of the second argument first.
%    \begin{macrocode}
\def\lst@Extend#1#2{%
    \expandafter\lst@AddTo\expandafter#1\expandafter{#2}}
\def\lst@lExtend#1#2{%
    \expandafter\lst@lAddTo\expandafter#1\expandafter{#2}}
%    \end{macrocode}
% \begin{TODO}
% This should never be changed to
%    \begin{verbatim}
%    \def\lst@Extend#1{%
%        \expandafter\lst@AddTo\expandafter#1\expandafter}
%    \def\lst@lExtend#1{%
%        \expandafter\lst@lAddTo\expandafter#1}\end{verbatim}
% The first is not equivalent in case that the second argument is a single
% ($=$ non-braced) control sequence, and the second isn't in case of a braced
% second argument.
% \end{TODO}
% \end{macro}
% \end{macro}
%
%
% \subsection{Interfacing with \textsf{keyval}}
%
% The \packagename{keyval} package passes the value via the one and only
% paramater |#1| to the definition part of the key macro. The following
% commands may be used to analyse the value. Note that we need at least version
% 1.10 of the \packagename{keyval} package. Note also that the package removes
% a naming conflict with AMS classes---reported by \lsthelper{Ralf~Quast}
% {1998/01/08}{\keywords conflicts with AMS classes}.
% \begingroup
%    \begin{macrocode}
\RequirePackage{keyval}[1997/11/10]
%    \end{macrocode}
% \endgroup
%
% \begin{macro}{\lstKV@TwoArg}
% \begin{macro}{\lstKV@ThreeArg}
% \begin{macro}{\lstKV@FourArg}
% Define temporary macros and call with given arguments |#1|. We add empty
% arguments for the case that the user doesn't provide enough.
%    \begin{macrocode}
\def\lstKV@TwoArg#1#2{\gdef\@gtempa##1##2{#2}\@gtempa#1{}{}}
\def\lstKV@ThreeArg#1#2{\gdef\@gtempa##1##2##3{#2}\@gtempa#1{}{}{}}
\def\lstKV@FourArg#1#2{\gdef\@gtempa##1##2##3##4{#2}\@gtempa#1{}{}{}{}}
%    \end{macrocode}
% There's one question: What are the global definitions good for? |\lst@Key|
% might set |\globaldefs| to one and possibly calls this macro. That's the
% reason why we use global definitions here and below.
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lstKV@OptArg}
% We define the temporary macro |\@gtempa| and insert default argument if
% necessary.
%    \begin{macrocode}
\def\lstKV@OptArg[#1]#2#3{%
    \gdef\@gtempa[##1]##2{#3}\lstKV@OptArg@{#1}#2\@}
\def\lstKV@OptArg@#1{\@ifnextchar[\lstKV@OptArg@@{\lstKV@OptArg@@[#1]}}
\def\lstKV@OptArg@@[#1]#2\@{\@gtempa[#1]{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstKV@XOptArg}
% Here |#3| is already a definition with at least two parameters whose first
% is enclosed in brackets.
%    \begin{macrocode}
\def\lstKV@XOptArg[#1]#2#3{%
    \global\let\@gtempa#3\lstKV@OptArg@{#1}#2\@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstKV@CSTwoArg}
% Just define temporary macro and call it.
%    \begin{macrocode}
\def\lstKV@CSTwoArg#1#2{%
    \gdef\@gtempa##1,##2,##3\relax{#2}%
    \@gtempa#1,,\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstKV@SetIf}
% We simply test the lower case first character of |#1|.
%    \begin{macrocode}
\def\lstKV@SetIf#1{\lstKV@SetIf@#1\relax}
\def\lstKV@SetIf@#1#2\relax#3{\lowercase{%
    \expandafter\let\expandafter#3%
        \csname if\ifx #1t}true\else false\fi\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstset}
% Finally this main user interface macro.
% We change catcodes for reading the argument.
%    \begin{macrocode}
\lst@UserCommand\lstset{\begingroup \lst@setcatcodes \lstset@}
\def\lstset@#1{\endgroup \ifx\@empty#1\@empty\else\setkeys{lst}{#1}\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@setcatcodes}
% contains all catcode changes for |\lstset|.
%    \begin{macrocode}
\def\lst@setcatcodes{\makeatletter \catcode`\"=12\relax}
%    \end{macrocode}
% \begin{TODO}
% Change more catcodes?
% \end{TODO}
% \end{macro}
%
%
% \subsection{Internal modes}
%
% \begin{macro}{\lst@NewMode}
% The counter |\lst@mode| mainly keeps the current mode number. But it is also
% used to advance the number in |\lst@newmode|, which is a macro---we don't
% waste another counter. We simply use |\chardef| for a mode definition.
%    \begin{macrocode}
\def\lst@NewMode#1{%
    \ifx\@undefined#1%
        \lst@mode\lst@newmode\relax \advance\lst@mode\@ne
        \xdef\lst@newmode{\the\lst@mode}%
        \global\chardef#1=\lst@mode
        \lst@mode\lst@nomode
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@mode}
% \begin{macro}{\lst@nomode}
% We allocate the counter and the first mode.
%    \begin{macrocode}
\newcount\lst@mode
\def\lst@newmode{\m@ne}% init
\lst@NewMode\lst@nomode % init (of \lst@mode :-)
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@UseDynamicMode}
% For dynamic modes we must not use the counter |\lst@mode| (since possibly
% already valued). |\lst@dynamicmode| substitutes |\lst@newmode| and is a local
% definition here, \ldots
%    \begin{macrocode}
\def\lst@UseDynamicMode{%
    \@tempcnta\lst@dynamicmode\relax \advance\@tempcnta\@ne
    \edef\lst@dynamicmode{\the\@tempcnta}%
    \expandafter\lst@Swap\expandafter{\expandafter{\lst@dynamicmode}}}
%    \end{macrocode}
% initialized each listing with the current `value' of |\lst@newmode|.
%    \begin{macrocode}
\lst@AddToHook{InitVars}{\let\lst@dynamicmode\lst@newmode}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@modetrue}
% The usual macro to value a boolean except that we also execute a hook.
%    \begin{macrocode}
\def\lst@modetrue{\let\lst@ifmode\iftrue \lsthk@ModeTrue}
\let\lst@ifmode\iffalse % init
\lst@AddToHook{ModeTrue}{}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EnterMode}
% Each mode opens a group level, stores the mode number and execute mode
% specific tokens. Moreover we keep all these changes in mind (locally) and
% adjust internal variables if the user wants it.
%    \begin{macrocode}
\def\lst@EnterMode#1#2{%
    \bgroup \lst@mode=#1\relax #2%
    \lst@iffontadjust \lsthk@FontAdjust \fi
    \lst@lAddTo\lst@entermodes{\lst@EnterMode{#1}{#2}}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{InitVars}{\let\lst@entermodes\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LeaveMode}
% We simply close the group and call |\lsthk@EndGroup| if and only if the
% current mode is not |\lst@nomode|.
%    \begin{macrocode}
\def\lst@LeaveMode{%
    \ifnum\lst@mode=\lst@nomode\else
        \egroup \expandafter\lsthk@EndGroup
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{EndGroup}{}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InterruptModes}
% We put the current mode sequence on a stack and leave all modes.
%    \begin{macrocode}
\def\lst@InterruptModes{%
    \lst@Extend\lst@modestack{\expandafter{\lst@entermodes}}%
    \lst@LeaveAllModes}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{InitVars}{\global\let\lst@modestack\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ReenterModes}
% If the stack is not empty, we leave all modes and pop the topmost element
% (which is the last element of |\lst@modestack|).
%    \begin{macrocode}
\def\lst@ReenterModes{%
    \ifx\lst@modestack\@empty\else
        \lst@LeaveAllModes
        \global\let\@gtempa\lst@modestack
        \global\let\lst@modestack\@empty
        \expandafter\lst@ReenterModes@\@gtempa\relax
    \fi}
\def\lst@ReenterModes@#1#2{%
    \ifx\relax#2\@empty
%    \end{macrocode}
% If we've reached |\relax|, we've also found the last element: we execute |#1|
% and gobble |{#2}|$=$|{\relax}| after |\fi|.
%    \begin{macrocode}
        \gdef\@gtempa##1{#1}%
        \expandafter\@gtempa
    \else
%    \end{macrocode}
% Otherwise we just add the element to |\lst@modestack| and continue the loop.
%    \begin{macrocode}
        \lst@AddTo\lst@modestack{{#1}}%
        \expandafter\lst@ReenterModes@
    \fi
    {#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LeaveAllModes}
% Leaving all modes means closing groups until the mode equals |\lst@nomode|.
%    \begin{macrocode}
\def\lst@LeaveAllModes{%
    \ifnum\lst@mode=\lst@nomode
        \expandafter\lsthk@EndGroup
    \else
        \expandafter\egroup\expandafter\lst@LeaveAllModes
    \fi}
%    \end{macrocode}
% We need that macro to end a listing correctly.
%    \begin{macrocode}
\lst@AddToHook{ExitVars}{\lst@LeaveAllModes}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Pmode}
% \begin{macro}{\lst@GPmode}
% The `processing' and the general purpose mode.
%    \begin{macrocode}
\lst@NewMode\lst@Pmode
\lst@NewMode\lst@GPmode
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsection{Divers helpers*}
%
% \begin{macro}{\lst@NormedDef}
% works like |\def| (without any parameters!) but normalizes the replacement
% text by making all characters lower case and stripping off spaces.
%    \begin{macrocode}
\def\lst@NormedDef#1#2{\lowercase{\edef#1{\zap@space#2 \@empty}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@NormedNameDef}
% works like |\global\@namedef| (again without any parameters!) but normalizes
% both the macro name and the replacement text.
%    \begin{macrocode}
\def\lst@NormedNameDef#1#2{%
    \lowercase{\edef\lst@temp{\zap@space#1 \@empty}%
    \expandafter\xdef\csname\lst@temp\endcsname{\zap@space#2 \@empty}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@GetFreeMacro}
% Initialize |\@tempcnta| and |\lst@freemacro|, \ldots
%    \begin{macrocode}
\def\lst@GetFreeMacro#1{%
    \@tempcnta\z@ \def\lst@freemacro{#1\the\@tempcnta}%
    \lst@GFM@}
%    \end{macrocode}
% and either build the control sequence or advance the counter and continue.
%    \begin{macrocode}
\def\lst@GFM@{%
    \expandafter\ifx \csname\lst@freemacro\endcsname \relax
        \edef\lst@freemacro{\csname\lst@freemacro\endcsname}%
    \else
        \advance\@tempcnta\@ne
        \expandafter\lst@GFM@
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \end{macro}
%
%
% \section{Character classes}\lstlabel{iCharacterClasses}
%
% \begingroup
% The following modification to |\try@load@fontshape| ensures that |\space|
% expands to a space and not to something different defined by this package
% (as for \aspectname{breaklines} or \aspectname{formats}). The bug was
% reported by \lsthelper{Denis~Girou}{1999/09/16}{bad font info message with
% `breaklines'}.
%    \begin{macrocode}
\lst@AddToAtTop{\try@load@fontshape}{\def\space{ }}
%    \end{macrocode}
% \endgroup
%
% \begin{macro}{\lst@token}
% \begin{macro}{\lst@length}
% Two `character class' variables. The registers get empty respectively zero
% at the beginning of each line.
% After a bug report from \lsthelper{Claus~Atzenbeck}{1999/11/24}{HTML: output
% unit repeated after >}---I removed such a bug many times---, I decided to
% reset these registers in the \hookname{EndGroup} hook.
%    \begin{macrocode}
%<*kernel>
\newtoks\lst@token \newcount\lst@length
\lst@AddToHook{InitVarsBOL}{\lst@token{}\lst@length\z@}
\lst@AddToHook{EndGroup}{\lst@token{}\lst@length\z@}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@lastother}
% This macro will be equivalent to the last `other' character.
%    \begin{macrocode}
\lst@AddToHook{InitVarsBOL}{\let\lst@lastother\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Append}
% appends the argument to the current character string and increases the
% counter |\lst@length| by one.
%    \begin{macrocode}
\def\lst@Append#1{\advance\lst@length\@ne
    \expandafter\lst@token\expandafter{\the\lst@token#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@AppendOther}
% We save the `argument' via |\futurelet| and call |\lst@Append|.
%    \begin{macrocode}
\def\lst@AppendOther{\futurelet\lst@lastother\lst@Append}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ifletter}
% indicates whether we are processing an identifier or not.
%    \begin{macrocode}
\def\lst@lettertrue{\let\lst@ifletter\iftrue}
\def\lst@letterfalse{\let\lst@ifletter\iffalse}
\lst@AddToHook{InitVars}{\lst@letterfalse}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@PrintToken}
% outputs the current character string in letter or nonletter mode.
%    \begin{macrocode}
\def\lst@PrintToken{%
    \lst@ifletter
        \lst@Output\lst@letterfalse
    \else
        \lst@OutputOther \let\lst@lastother\@empty
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ifwhitespace}
% indicates whether the last processed character has been white space.
%    \begin{macrocode}
\def\lst@whitespacetrue{\global\let\lst@ifwhitespace\iftrue}
\def\lst@whitespacefalse{\global\let\lst@ifwhitespace\iffalse}
\lst@AddToHook{InitVarsBOL}{\lst@whitespacetrue}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Letters, digits and others}
%
% \begin{macro}{\lst@ProcessLetter}
% Here we look at the last processed character. If it hasn't been a letter,
% we output the preceding other characters first and switch to letter mode.
% Finally we append the current letter.
%    \begin{macrocode}
\def\lst@ProcessLetter{%
    \lst@ifletter\else \lst@OutputOther\lst@lettertrue \fi
    \lst@whitespacefalse \lst@Append}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ProcessOther}
% `Other' characters are the other way round. If the last character has been
% a letter, the preceding letters are output and we switch to nonletter mode.
% Finally we append the current other character.
%    \begin{macrocode}
\def\lst@ProcessOther{%
    \lst@ifletter \lst@Output\lst@letterfalse \fi
    \lst@whitespacefalse \lst@AppendOther}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ProcessDigit}
% A digit simply appends the character to the current character string. But we
% must use the right macro. This allows digits to be part of an identifier or a
% numerical constant.
%    \begin{macrocode}
\def\lst@ProcessDigit{%
    \lst@whitespacefalse
    \lst@ifletter \expandafter\lst@Append
            \else \expandafter\lst@AppendOther\fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Tabulators, spaces and form feeds}
%
% Here we have to take care of two things: dropping empty lines at the end of
% a listing and the flexible column format. Both use |\lst@lostspace|. Lines
% containing only tabulators and spaces should be viewed as empty. In order to
% achieve this, tabulators and spaces at the beginning of a line don't output
% any characters but advance |\lst@lostspace|. Whenever this dimension is
% positive we insert that space before |\lst@token| is output. Thus, if there
% are only tabulators and spaces, the line is `empty' since we haven't done any
% output.
%
% We have to do more for flexible columns. The whitespaces can fix the column
% alignment: if the real line is wider than expected (|\lst@lostspace|$<$0pt),
% a tabulator is at least one space wide; all remaining width is used to make
% |\lst@lostspace| more positive. Spaces do the same: if there are two or more
% spaces, at least one space is printed; the others fix the column alignment.
% If we process a string, all spaces are output, of course.
%
% \begin{lstkey}{tabsize}
% We check for a legal argument before saving it. Default tabsize is 8 as
% proposed by \lsthelper{Rolf~Niepraschk}{1997/04/24}{tabsize=8}.
%    \begin{macrocode}
\lst@Key{tabsize}{8}
    {\ifnum#1>\z@ \def\lst@tabsize{#1}\else
         \PackageError{Listings}{Strict positive integer expected}%
         {You can't use `#1' as tabulator size.^^J%
          Type <RETURN> to forget it and to proceed.}%
     \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@ProcessTabulator}
% A tabulator outputs the preceding characters.
% This decrements the counter |\lst@pos| by the number of printed characters.
%    \begin{macrocode}
\def\lst@ProcessTabulator{%
    \lst@PrintToken \lst@letterfalse
%    \end{macrocode}
% Then we calculate how many columns we need to reach the next tabulator stop:
% we add |\lst@tabsize| until |\lst@pos| is strict positive. |\lst@column| is
% the current column and |\lst@pos| the column modulo |tabsize|.
% We assign it to |\lst@length| and reset |\lst@pos| (at the end of the macro).
%    \begin{macrocode}
    \global\advance\lst@column -\lst@pos
    \@whilenum \lst@pos<\@ne \do
        {\global\advance\lst@pos\lst@tabsize}%
    \lst@length\lst@pos
    \lst@whitespacetrue
    \lst@PreGotoTabStop}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@PreGotoTabStop}
% Visible tabs print |\lst@tab|.
%    \begin{macrocode}
\def\lst@PreGotoTabStop{%
    \lst@ifvisibletabs
        \lst@TrackNewLines
        \setbox\@tempboxa\hbox to\lst@length\lst@width
            {{\lst@currstyle{\hss\lst@tab}}}%
        \lst@CalcLostSpaceAndOutput
    \else
%    \end{macrocode}
% If we are advised to keep spaces, we insert the correct number of them.
% Otherwise we go to the tabulator stop, e.g.~|\lst@length| columns forward.
%    \begin{macrocode}
        \lst@ifkeepspaces
            \@tempcnta\lst@length \lst@length\z@
            \@whilenum \@tempcnta>\z@ \do
                {\lst@AppendOther\lst@outputspace
                 \advance\@tempcnta\m@ne}%
            \lst@OutputOther
        \else
            \lst@GotoTabStop
        \fi
    \fi
    \lst@length\z@ \global\lst@pos\z@}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{visibletabs}
% \begin{lstkey}{tab}
% Two user keys for tab control.
%    \begin{macrocode}
\lst@Key{visibletabs}f[t]{\lstKV@SetIf{#1}\lst@ifvisibletabs}
\lst@Key{tab}{\kern.06em\hbox{\vrule\@height.3ex}%
              \hrulefill\hbox{\vrule\@height.3ex}}
    {\def\lst@tab{#1}}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@outputspace}
% \begin{macro}{\lst@visiblespace}
% The first macro is a default definition, \ldots
%    \begin{macrocode}
\def\lst@outputspace{\ }
\def\lst@visiblespace{\lst@ttfamily{\char32}\textvisiblespace}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{visiblespaces}
% \begin{lstkey}{keepspaces}
% which is modified if the user wants it.
%    \begin{macrocode}
\lst@Key{visiblespaces}{false}[t]{\lstKV@SetIf{#1}\lst@ifvisiblespaces}
\lst@Key{keepspaces}{false}[t]{\lstKV@SetIf{#1}\lst@ifkeepspaces}
\lst@AddToHook{Init}
    {\lst@ifvisiblespaces
         \let\lst@outputspace\lst@visiblespace
         \lst@keepspacestrue
     \fi}
\def\lst@keepspacestrue{\let\lst@ifkeepspaces\iftrue}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@ProcessSpace}
% If the last character has been a letter, we output the current character
% string and append one space.
%    \begin{macrocode}
\def\lst@ProcessSpace{%
    \lst@ifletter
        \lst@Output\lst@letterfalse
        \lst@AppendOther\lst@outputspace
%    \end{macrocode}
% We look whether spaces fix the column alignment or not. In the latter case
% we must append a space; otherwise we must test if the hitherto line is empty.
%    \begin{macrocode}
    \else \lst@ifkeepspaces
        \lst@AppendOther\lst@outputspace
    \else \ifx\lst@newlines\@empty
%    \end{macrocode}
% If the line is not empty we either advance |\lst@lostspace| or append a space
% to the current character string.
%    \begin{macrocode}
        \lst@AppendSpecialSpace
    \else \ifnum\lst@length=\z@
%    \end{macrocode}
% If the line is empty so far, we advance |\lst@lostspace|.
% Otherwise we append the space.
%    \begin{macrocode}
            \global\advance\lst@lostspace\lst@width
            \global\advance\lst@pos\m@ne
        \else
            \lst@AppendSpecialSpace
        \fi
    \fi \fi \fi
    \lst@whitespacetrue}
%    \end{macrocode}
% Note that this version works for fixed and flexible column output.
% \end{macro}
%
% \begin{macro}{\lst@AppendSpecialSpace}
% If there are at least two white spaces, i.e.~if the last character has been
% a space, we output preceding characters and advance |\lst@lostspace| to avoid
% alignment problems. Otherwise we append a space to the current character
% string.
%    \begin{macrocode}
\def\lst@AppendSpecialSpace{%
    \lst@ifwhitespace
        \lst@OutputOther
        \global\advance\lst@lostspace\lst@width
        \global\advance\lst@pos\m@ne
    \else
        \lst@AppendOther\lst@outputspace
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{formfeed}
% is due to communication with \lsthelper{Jan~Braun}{1998/04/27}{formfeed}.
%    \begin{macrocode}
\lst@Key{formfeed}{\bigbreak}{\def\lst@formfeed{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@ProcessFormFeed}
% Here we execute some macros or append them to |\lst@newlines|---according
% to whether a new line has already begun or not. This makes lines with form
% feeds `empty' if at the end of a listing.
%    \begin{macrocode}
\def\lst@ProcessFormFeed{%
    \lst@PrintToken
    \ifx\lst@newlines\@empty
        \lst@EOLUpdate \lst@formfeed
    \else
        \lst@lAddTo\lst@newlines{\lst@EOLUpdate \lst@formfeed}%
    \fi
    \lst@whitespacetrue}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Character tables}\lstlabel{iCharacterTables}
%
% Now we come to the standard character table. For example, the package says
%    |\lst@CCUse| |\lst@ProcessLetter|\ldots|{"41}|\ldots\ 
% to make the code $41_{\mathrm{hex}}$ character act as a letter. It expands to
%    |\def| |A{\lst@ProcessLetter| |A}|
% where the first A is active and the second has catcode 12.
% \begin{syntax}
% \item[0.19] |\lst@CCUse|\meta{class macro}\meta{$c_1$}\ldots\meta{$c_k$}|\z@|
% \item[0.20] |\lst@CCUseMacro|\meta{class$_1$}\meta{$c_1$}\meta{definition$_1$}\ldots|\@empty\z@\@empty|
% \end{syntax}
%
% \begin{macro}{\lst@Def}
% \begin{macro}{\lst@Let}
% For speed we won't use these helpers too often.
%    \begin{macrocode}
\def\lst@Def#1{\lccode`\~=#1\lowercase{\def~}}
\def\lst@Let#1{\lccode`\~=#1\lowercase{\let~}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@SaveDef}
% \begin{macro}{\lst@DefSaveDef}
% \begin{macro}{\lst@LetSaveDef}
% Save definition and/or make/assign new one.
%    \begin{macrocode}
\def\lst@SaveDef#1#2{%
    \begingroup \lccode`\~=#1\relax \lowercase{\endgroup\let#2~}}
\def\lst@DefSaveDef#1#2{%
    \begingroup \lccode`\~=#1\relax \lowercase{\endgroup\let#2~\def~}}
\def\lst@LetSaveDef#1#2{%
    \begingroup \lccode`\~=#1\relax \lowercase{\endgroup\let#2~\let~}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@SelectStdCharTable}
% The first three standard characters.
%    \begin{macrocode}
\def\lst@SelectStdCharTable{%
    \lst@Let{9}\lst@ProcessTabulator
    \lst@Let{12}\lst@ProcessFormFeed
    \lst@Let{32}\lst@ProcessSpace}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CCUse}
% extends the standard character table. The first argument gives the character
% class, then follow the character codes.
%    \begin{macrocode}
\def\lst@CCUse#1#2{%
    \ifnum#2=\z@
        \expandafter\@gobbletwo
    \else
        \lccode`\~=#2\lccode`\/=#2\lowercase{\lst@CCUse@~{#1/}}%
    \fi
    \lst@CCUse#1}
\def\lst@CCUse@#1#2{\lst@lAddTo\lst@SelectStdCharTable{\def#1{#2}}}
%    \end{macrocode}
% Now we insert more standard characters.
%    \begin{macrocode}
\lst@CCUse \lst@ProcessOther
    {"21}{"22}{"27}{"28}{"29}{"2B}{"2C}{"2E}{"2F}
    {"3A}{"3B}{"3D}{"3F}{"5B}{"5D}{"60}
    \z@
\lst@CCUse \lst@ProcessDigit
    {"30}{"31}{"32}{"33}{"34}{"35}{"36}{"37}{"38}{"39}
    \z@
\lst@CCUse \lst@ProcessLetter
    {"40}{"41}{"42}{"43}{"44}{"45}{"46}{"47}
    {"48}{"49}{"4A}{"4B}{"4C}{"4D}{"4E}{"4F}
    {"50}{"51}{"52}{"53}{"54}{"55}{"56}{"57}
    {"58}{"59}{"5A}
         {"61}{"62}{"63}{"64}{"65}{"66}{"67}
    {"68}{"69}{"6A}{"6B}{"6C}{"6D}{"6E}{"6F}
    {"70}{"71}{"72}{"73}{"74}{"75}{"76}{"77}
    {"78}{"79}{"7A}
    \z@
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CCUseMacro}
% Now we come to a delicate point. Some characters aren't printable (|_|,
% |$|, \ldots) or aren't printed well (|*|, |-|, \ldots) if we enter these
% characters. Thus we use macros which print the characters correctly.
% The current character string is printable for speed, i.e.~|_| is already
% replaced by a macro version. But the new keyword tests need the original
% characters, e.g.~|_|.
%
% The solution: We define |\def _{\lst@ProcessLetter\lstum@_}| where the first
% underscore is active and the second belongs to the control sequence.
% Moreover we have |\def\lstum@_{\lst@UM _}| where the second underscore has
% the usual meaning. Now the keyword tests can access the original character
% simply by making |\lst@UM| empty. The default definition gets the following
% token and builds the control sequence |\lstum@_@|, which we'll define to
% print the character properly.
%
% The following definition does all this for us. The first parameter gives the
% character class, the second the character code, and the last the definition
% which actually prints the character. We build the names |\lstum@_| and
% |\lstum@_@| and give them to a submacro.
%    \begin{macrocode}
\def\lst@CCUseMacro#1#2#3{%
    \ifnum#2=\z@ \else
        \begingroup\lccode`\~=#2\relax \lccode`\/=#2\relax
        \lowercase{\endgroup\expandafter\lst@CCUseMacro@
            \csname lstum@/\expandafter\endcsname
            \csname lstum@/@\endcsname /~}#1{#3}%
        \expandafter\lst@CCUseMacro
    \fi}
%    \end{macrocode}
% The arguments to this submacro are |\lstum@_|, |\lstum@_@|, nonactive
% character, active character, character class and printing definition. We
% add |\def| |_| |{\lst@ProcessLetter\lstum@_}| to |\lst@SelectStdCharTable|
% (and similarly other special characters), define |\def\lstum@_{\lst@UM _}|
% and |\lstum@_@|.
%    \begin{macrocode}
\def\lst@CCUseMacro@#1#2#3#4#5#6{%
    \lst@lAddTo\lst@SelectStdCharTable{\def#4{#5#1}}%
    \def#1{\lst@UM#3}%
    \def#2{#6}}
%    \end{macrocode}
% The default definition of |\lst@UM|:
%    \begin{macrocode}
\def\lst@UM#1{\csname lstum@#1@\endcsname}
%    \end{macrocode}
% And all remaining standard characters.
%    \begin{macrocode}
\lst@CCUseMacro
    \lst@ProcessOther {"23}\#
    \lst@ProcessLetter{"24}\textdollar
    \lst@ProcessOther {"25}\%
    \lst@ProcessOther {"26}\&
    \lst@ProcessOther {"2A}{\lst@ttfamily*\textasteriskcentered}
    \lst@ProcessOther {"2D}{\lst@ttfamily{-{}}{$-$}}
    \lst@ProcessOther {"3C}{\lst@ttfamily<\textless}
    \lst@ProcessOther {"3E}{\lst@ttfamily>\textgreater}
    \lst@ProcessOther {"5C}{\lst@ttfamily{\char92}\textbackslash}
    \lst@ProcessOther {"5E}\textasciicircum
    \lst@ProcessLetter{"5F}{\lst@ttfamily{\char95}\textunderscore}
    \lst@ProcessOther {"7B}{\lst@ttfamily{\char123}\textbraceleft}
    \lst@ProcessOther {"7C}{\lst@ttfamily|\textbar}
    \lst@ProcessOther {"7D}{\lst@ttfamily{\char125}\textbraceright}
    \lst@ProcessOther {"7E}\textasciitilde
    \lst@ProcessOther {"7F}-
    \@empty\z@\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ttfamily}
% What is this ominous macro? It prints either the first or the second
% argument. In |\ttfamily| it ensures that |----| is typeset |----| and not
% $-$$-$$-$$-$ as in version 0.17. Bug encountered by
% \lsthelper{Dr.~Jobst~Hoffmann}{1998/03/30}{|\lst@minus| and |\ttfamily|}.
% Furthermore I added |\relax| after receiving error report from
% \lsthelper{Magnus~Lewis-Smith}{1999/08/06}{! Bad character code (920).}
%    \begin{macrocode}
\def\lst@ttfamily#1#2{\ifx\f@family\ttdefault#1\relax\else#2\fi}
%    \end{macrocode}
% |\ttdefault| is defined |\long|, so the |\ifx| doesn't work since |\f@family|
% isn't |\long|! We go around this problem by redefining |\ttdefault| locally:
%    \begin{macrocode}
\lst@AddToHook{Init}{\edef\ttdefault{\ttdefault}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@SaveOutputDef}
% We look for |\def| `active character |#1|' in |\lst@SelectStdCharTable|, get
% the replacement text, strip off the character class (via |\@gobble|), and
% assign the meaning. Note that you get a ``runaway argument'' error if an
% illegal \meta{character code}=|#1| is used.
%    \begin{macrocode}
\def\lst@SaveOutputDef#1#2{%
    \begingroup \lccode`\~=#1\relax \lowercase{%
    \def\lst@temp##1\def~##2##3\relax}{%
        \global\expandafter\let\expandafter#2\@gobble##2\relax}%
    \expandafter\lst@temp\lst@SelectStdCharTable\relax
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstum@backslash}
% A commonly used character.
%    \begin{macrocode}
\lst@SaveOutputDef{"5C}\lstum@backslash
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ifactivechars}
% A simple switch.
%    \begin{macrocode}
\def\lst@activecharstrue{\let\lst@ifactivechars\iftrue}
\def\lst@activecharsfalse{\let\lst@ifactivechars\iffalse}
\lst@activecharstrue
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@SelectCharTable}
% We select the standard character table, define extended characters 128--255,
% call a hook and initialize the backslash if necessary.
%    \begin{macrocode}
\def\lst@SelectCharTable{%
    \lst@SelectStdCharTable
    \lst@ifec \lst@DefEC \fi
    \lst@ifactivechars
        \catcode9\active \catcode12\active \catcode13\active
        \@tempcnta=32\relax
        \@whilenum\@tempcnta<128\do
            {\catcode\@tempcnta\active\advance\@tempcnta\@ne}%
    \fi
    \lsthk@SelectCharTable
    \lst@DeveloperSCT
    \ifx\lst@Backslash\relax\else
        \lst@LetSaveDef{"5C}\lsts@backslash\lst@Backslash
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{SelectCharTable}
% \begin{lstkey}{MoreSelectCharTable}
% The keys to adjust |\lst@DeveloperSCT|.
%    \begin{macrocode}
\lst@Key{SelectCharTable}{}{\def\lst@DeveloperSCT{#1}}
\lst@Key{MoreSelectCharTable}\relax{\lst@lAddTo\lst@DeveloperSCT{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SetLanguage}{\let\lst@DeveloperSCT\@empty}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@nfss@catcodes}
% \lsthelper{Anders~Edenbrandt}{1997/04/22}{preload of .fd files} found a bug
% with \texttt{.fd} files. Since we change catcodes and these files are read
% on demand, we must reset the catcodes before the files are input. We use a
% local redefinition of |\nfss@catcodes|.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\let\lsts@nfss@catcodes\nfss@catcodes
     \let\nfss@catcodes\lst@nfss@catcodes}
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@nfss@catcodes{%
    \lst@makeletter
        ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\relax
    \@makeother 0\@makeother 1\@makeother 2\@makeother 3\@makeother 4%
    \@makeother 5\@makeother 6\@makeother 7\@makeother 8\@makeother 9%
    \lsts@nfss@catcodes}
%    \end{macrocode}
% The name of |\lst@makeletter| is an imitation of \LaTeX's |\@makeother|.
%    \begin{macrocode}
\def\lst@makeletter#1{%
    \ifx\relax#1\else\catcode`#111\relax \expandafter\lst@makeletter\fi}
%    \end{macrocode}
% Another problem was first reported by \lsthelper{Marcin~Kasperski}
% {1999/04/28}{listings spoil toc}. It is also catcode related and
% \lsthelper{Donald~Arseneau}{1999/05/13}{ctt Re: delayed write and catcode
% changes} let me understand it. Our local output routine resets some catcodes.
% Then \TeX\ inserts a space after |\L|, for example, if it writes |\L| to file.
% Moreover we make the `process' macros equivalent to |\@empty| to ensure that
% active characters, for example in the heading, are not processed by the
% \packagename{listings} package.
% \lsthelper{Denis~Girou}{1999/08/03}{Accents lost in heading if listing
% splitted on two pages} found this latter bug.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\edef\lst@OldOutput{\the\output}%
     \output{\begingroup \lsts@nfss@catcodes
             \let\lst@ProcessLetter\@empty
             \let\lst@ProcessOther\@empty
             \let\lst@ProcessDigit\@empty
             \lst@OldOutput
             \endgroup}}
%    \end{macrocode}
% \begin{TODO}
% In some rare situations the `accents lost in heading' bug still appears.
% Rare means, for example, stringizer of code $>127$ together with the
% \packagename{inputenc} package.
% \end{TODO}
% \begin{TODO}
% The current work-around (yes, it is one) isn't satisfactory. Since `interrupt
% modes' can be nested now, it should be possible to have a better solution.
% The `interrupt mode' mechanism does not apply to |\lst@nfss@catcodes|;
% such an interruption isn't good inside an output |\hbox| (I think).
% \end{TODO}
% \end{macro}
%
% \begin{lstkey}{alsoletter}
% \begin{lstkey}{alsodigit}
% \begin{lstkey}{alsoother}
% Three easy definitions.
%    \begin{macrocode}
\lst@Key{alsoletter}\relax{\lst@DefOther\lst@arg{#1}%
    \expandafter\lstalso@\lst@also \lst@arg\@empty\@empty}
\lst@Key{alsodigit}\relax{\lst@DefOther\lst@arg{#1}%
    \expandafter\lstalso@\lst@also \@empty\lst@arg\@empty}
\lst@Key{alsoother}\relax{\lst@DefOther\lst@arg{#1}%
    \expandafter\lstalso@\lst@also \@empty\@empty\lst@arg}
%    \end{macrocode}
% The submacro replaces one of the first three arguments by the first nonempty
% of |#4|, |#5| and |#6|.
%    \begin{macrocode}
\def\lstalso@#1#2#3#4#5#6{%
    \ifx#4\@empty \ifx#5\@empty \ifx#6\@empty \else
        \edef\lst@also{{#1}{#2}{#6}}%
    \fi\else
        \edef\lst@also{{#1}{#5}{#3}}%
    \fi\else
        \edef\lst@also{{#4}{#2}{#3}}%
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SetLanguage}{\def\lst@also{{}{}{}}}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@UseBasicClasses}
% We insert the three arguments from |\lst@also| and merge three new arguments.
%    \begin{macrocode}
\def\lst@UseBasicClasses{\expandafter\lst@UBC@\lst@also}
\def\lst@UBC@#1#2#3#4#5#6{\def\lst@also{{#1#4}{#2#5}{#3#6}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ChangeBasicClasses}
% Now a definition which actually moves the specified characters to the
% (implicit) given classes.
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}
    {\expandafter\lst@ChangeBasicClasses\lst@also}
\def\lst@ChangeBasicClasses#1#2#3{%
    \lst@CBC@\lst@ProcessOther#3\relax
    \lst@CBC@\lst@ProcessDigit#2\relax
    \lst@CBC@\lst@ProcessLetter#1\relax}
%    \end{macrocode}
% The submacro terminates if it reaches |\relax|. Otherwise we insert the new
% class macro |#1|; the submacro gobbles the old class and prevents the second
% argument from expansion. The |\lowercase| makes the character |#2| active.
%    \begin{macrocode}
\def\lst@CBC@#1#2{%
    \ifx\relax#2\expandafter\@gobbletwo \else
        \lccode`\~=`#2\lowercase
        {\edef~{\noexpand#1\expandafter\lst@CBC@@~}}%
    \fi
    \lst@CBC@#1}
\def\lst@CBC@@#1#2{\noexpand#2}
%    \end{macrocode}
% \begin{TODO}
% As you can see, the class changes are parsed every listing. It should be
% possible to make them once. The class changes will be kept in a list where
% each item has the `form'
%    |\def|\meta{char}|{\lst@Process|\meta{whatever}\meta{spec.~token}|}|.
% This list should be as small as possible, i.e.~no character should be
% redefined twice.
% \end{TODO}
% \end{macro}
%
%
% \subsection{National characters}
%
% \begin{lstkey}{extendedchars}
% The user key.
%    \begin{macrocode}
\lst@Key{extendedchars}{false}[t]{\lstKV@SetIf{#1}\lst@ifec}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@DefEC}
% Currently each character in the range 128--255 is treated as a letter.
%    \begin{macrocode}
\def\lst@DefEC{%
    \lst@CCECUse \lst@ProcessLetter
      ^^80^^81^^82^^83^^84^^85^^86^^87^^88^^89^^8a^^8b^^8c^^8d^^8e^^8f%
      ^^90^^91^^92^^93^^94^^95^^96^^97^^98^^99^^9a^^9b^^9c^^9d^^9e^^9f%
      ^^a0^^a1^^a2^^a3^^a4^^a5^^a6^^a7^^a8^^a9^^aa^^ab^^ac^^ad^^ae^^af%
      ^^b0^^b1^^b2^^b3^^b4^^b5^^b6^^b7^^b8^^b9^^ba^^bb^^bc^^bd^^be^^bf%
      ^^c0^^c1^^c2^^c3^^c4^^c5^^c6^^c7^^c8^^c9^^ca^^cb^^cc^^cd^^ce^^cf%
      ^^d0^^d1^^d2^^d3^^d4^^d5^^d6^^d7^^d8^^d9^^da^^db^^dc^^dd^^de^^df%
      ^^e0^^e1^^e2^^e3^^e4^^e5^^e6^^e7^^e8^^e9^^ea^^eb^^ec^^ed^^ee^^ef%
      ^^f0^^f1^^f2^^f3^^f4^^f5^^f6^^f7^^f8^^f9^^fa^^fb^^fc^^fd^^fe^^ff%
      ^^00}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CCECUse}
% Reaching end of list (|^^00|) we terminate the loop.
% Otherwise we do the same as in |\lst@CCUse| if the character is not active.
% But if the character is active, we save the meaning before redefinition.
%    \begin{macrocode}
\def\lst@CCECUse#1#2{%
    \ifnum`#2=\z@
        \expandafter\@gobbletwo
    \else
        \ifnum\catcode`#2=\active
            \lccode`\~=`#2\lccode`\/=`#2\lowercase{\lst@CCECUse@#1~/}%
        \else
            \lst@ifactivechars \catcode`#2=\active \fi
            \lccode`\~=`#2\lccode`\/=`#2\lowercase{\def~{#1/}}%
        \fi
    \fi
    \lst@CCECUse#1}
%    \end{macrocode}
% We save the meaning before redefinition as mentioned. Here we must also use
% the `|\lst@UM| construction' since extended characters could often appear in
% words $=$ identifiers. Bug reported by \lsthelper{Denis~Girou}{1999/07/26}
% {incompatibility with inputenc}.
%    \begin{macrocode}
\def\lst@CCECUse@#1#2#3{%
   \expandafter\def\csname lst@EC#3\endcsname{\lst@UM#3}%
   \expandafter\let\csname lstum@#3@\endcsname #2%
   \edef#2{\noexpand#1\expandafter\noexpand\csname lst@EC#3\endcsname}}
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \end{macro}
%
% \begin{aspect}{unicode}
% Now comes a completely untested aspect. The detection of unicode characters
% (here unicode $\setminus$ $\{\mathrm{chr}(32),\ldots,\mathrm{chr}(126)\}$)
% can only work if these characters are not active in the sense of \TeX.
% After usual character processing we look at the next character: we have
% nothing to do if it's active, otherwise we get that character and process it
% as a letter.
%    \begin{macrocode}
%<*unused>
\lst@BeginAspect{}
%    \end{macrocode}
%
% \begin{lstkey}{unicode}
% The key and \hookname{SelectCharTable} material.
%    \begin{macrocode}
\lst@Key{unicode}f[t]{\lstKV@SetIf{#1}\lst@ifunicode}
\lst@AddToHook{SelectCharTable}
    {\lst@ifunicode
         \lst@UnicodeAdaptA\lst@ProcessLetter\lsts@ProcessLetter
         \lst@UnicodeAdaptA\lst@ProcessOther\lsts@ProcessOther
         \lst@UnicodeAdaptA\lst@ProcessDigit\lsts@ProcessDigit
         \lst@UnicodeAdaptB\lst@ProcessTabulator\lsts@ProcessTabulator
         \lst@UnicodeAdaptB\lst@ProcessSpace\lsts@ProcessSpace
         \lst@UnicodeAdaptB\lst@ProcessFormFeed\lsts@ProcessFormFeed
     \fi}
%    \end{macrocode}
% \begin{TODO}
% \aspectname{unicode} doesn't work with \aspectname{breaklines} since the
% latter aspect introduces |\lst@breakProcessOther|.
% \end{TODO}
% \end{lstkey}
%
% \begin{macro}{\lst@UnicodeAdaptA}
% \begin{macro}{\lst@UnicodeAdaptB}
% The new `process whatever' definition executes the old definition and tests
% the next character.
%    \begin{macrocode}
\gdef\lst@UnicodeAdaptA#1#2{\let#2#1\def#1##1{#2##1\lst@UnicodeTest}}
\gdef\lst@UnicodeAdaptB#1#2{\let#2#1\def#1{#2\lst@UnicodeTest}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@UnicodeTest}
% Nonactive characters are processed as letters.
%    \begin{macrocode}
\gdef\lst@UnicodeTest{\lst@XIfNextCharActive{}\lst@ProcessLetter}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@XIfNextCharActive}
% is a modification of |\lst@IfNextCharActive|:
% A control sequence is treated as active character.
%    \begin{macrocode}
\gdef\lst@XIfNextCharActive#1#2#3{%
    \if\relax\noexpand#3%
        \def\lst@next{#1}%
    \else
        \lccode`\~=`#3\lowercase{\ifx~}#3%
            \def\lst@next{#1}%
        \else
            \def\lst@next{#2}%
        \fi
    \fi
    \lst@next #3}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</unused>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Special definitions*}
%
% \begin{macro}{\lst@SAC}
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@SAC[#1]#2#3#4#5#6#7#8#9{%
    \ifx #9\@empty \let#7\@empty \fi
    \ifx\@empty#2\@empty\else
        \lst@IfOneOf#1\relax#5%
        {\lst@IfOneOf#1\relax#6%
         {\@ifundefined{\@lst @#3@#1}%
             {\lst@lExtend#7{\expandafter\lst@UseDynamicMode
                             \csname\@lst @#3DM@#1\endcsname}}%
             {\lst@lExtend#7{\csname\@lst @#3@#1\endcsname}}}%
         {\lst@lExtend#7{\expandafter\lst@DefineSAC
                         \csname\@lst @Process#3@#1\endcsname #4}}%
         \lst@false \let\lst@arg\@empty
         \@ifnextchar[\lst@SAC@ #8%
         #2\@nil
         \lst@lExtend#7{\lst@arg\@empty}}%
        {\PackageError{Listings}{Illegal type `#1'}{#3 types are #5.}}%
     \fi}
\def\lst@SAC@[#1]#2{\def\lst@arg{[#1]}\reserved@b}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@SACDelete}
%    \begin{macrocode}
\def\lst@SACDelete[#1]#2#3#4#5#6#7{%
    \lst@IfOneOf#1\relax#6%
    {\@ifundefined{\@lst @#3@#1}%
        {\edef\lst@temp{\noexpand\lst@UseDynamicMode\expandafter
                        \noexpand\csname\@lst @#3DM@#1\endcsname}}%
        {\edef\lst@temp{\expandafter
                        \noexpand\csname\@lst @#3@#1\endcsname}}}%
    {\edef\lst@temp{\noexpand\lst@DefineSAC\expandafter\noexpand
                    \csname\@lst @Process#3@#1\endcsname #4}}%
    \expandafter\lst@SACDelete@\lst@temp\relax#7}
\def\lst@SACDelete@#1\relax#2{%
    \def\lst@temp##1#1##2\@empty##3{%
        \lst@lAddTo#2{##1}%
        \ifx\relax##3\else
            \expandafter\lst@temp
        \fi ##3}
    \let\@tempa#2\let#2\@empty
    \expandafter\lst@temp\@tempa#1{}\@empty\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@DefineSAC}
% This macro is similar to |\lst@CCECUse|.
% The list of stringizer is terminated by |\@empty|.
%    \begin{macrocode}
\def\lst@DefineSAC#1#2#3{%
    \ifx\@empty#3%
        \expandafter\@gobblethree
%    \end{macrocode}
% We save the old meaning in |\lsts@s|\meta{the character} (catcode 12) and
% redefine it.
%    \begin{macrocode}
    \else
        \lccode`\~=`#3\lccode`\/=`#3\lowercase{%
            \expandafter\let\csname\@lst s@#2/\endcsname~%
            \def~{#1/}}%
    \fi
    \lst@DefineSAC#1{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CArgX}
% We make |#1#2| active and call |\lst@CArg|.
%    \begin{macrocode}
\def\lst@CArgX#1#2\relax{%
    \lst@DefActive\lst@arg{#1#2}%
    \expandafter\lst@CArg\lst@arg\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CArg}
% We get an undefined macro and use |\@empty| |\@empty| |\relax| as delimiter
% for the submacro.
%    \begin{macrocode}
\def\lst@CArg#1#2\relax{%
    \lccode`\/=`#1\lowercase{\def\lst@temp{/}}%
    \lst@GetFreeMacro{lst@c\lst@temp d}%
    \expandafter\lst@CArg@\lst@freemacro#1#2\@empty\@empty\relax}
%    \end{macrocode}
% Call the macro |#6| with correct arguments.
%    \begin{macrocode}
\def\lst@CArg@#1#2#3#4\@empty#5\relax#6{#6#2#3{#4}#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CDef}
% We save the meaning of \meta{1st}=|#1| in \meta{save 1st}=|#4|.
%    \begin{macrocode}
\def\lst@CDef#1#2#3#4#5#6#7{%
    \let#4#1%
    \ifx\@empty#2\@empty
%    \end{macrocode}
% For a single character we just execute |#4|--|#7| in the correct order.
%    \begin{macrocode}
        \def#1{#5\def\lst@next{#6#4#7}\lst@next}%
    \else \ifx\@empty#3\@empty
%    \end{macrocode}
% For a two character sequence we test whether \meta{pre} and \meta{post}
% must be executed.
%    \begin{macrocode}
        \def#1##1{%
            #5%
            \ifx##1#2\def\lst@next{#6#4#2#7}\else
                     \def\lst@next{#4##1}\fi
            \lst@next}%
    \else
%    \end{macrocode}
% We do the same for an arbitrary character sequence---except that we have to
% use |\lst@IfNextCharsArg| instead of |\ifx|\ldots|\fi|.
%    \begin{macrocode}
        \def#1{%
            #5%
            \lst@IfNextCharsArg{#2#3}{#6#4#2#3#7}%
                                     {\expandafter#4\lst@eaten}}%
    \fi \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CDefX}
% And now the same except that \meta{pre}\meta{post} \emph{replace} the
% `input characters' |#1#2#3|, i.e.~we don't insert these characters again.
%    \begin{macrocode}
\def\lst@CDefX#1#2#3#4#5#6#7{%
    \let#4#1%
    \ifx\@empty#2\@empty
        \def#1{#5\def\lst@next{#6#7}\lst@next}%
    \else \ifx\@empty#3\@empty
        \def#1##1{%
            #5%
            \ifx##1#2\def\lst@next{#6#7}\else
                     \def\lst@next{#4##1}\fi
            \lst@next}%
    \else
        \def#1{%
            #5%
            \lst@IfNextCharsArg{#2#3}{#6#7}%
                                     {\expandafter#4\lst@eaten}}%
    \fi \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CArgEmpty}
%    \begin{macrocode}
\def\lst@CArgEmpty#1\@empty{#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{excludedelimiters}
%    \begin{macrocode}
\lst@Key{excludedelims}\relax
    {\lsthk@ExcludeDelims \lst@NormedDef\lst@temp{#1}%
     \expandafter\lst@for\lst@temp\do
     {\expandafter\let\csname\@lst @ifex##1\endcsname\iftrue}}
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \end{lstkey}
%
% \subsection{Strings}
%
% \begin{aspect}{strings}
% Just starting a new aspect.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{strings}
%    \end{macrocode}
%
% \begin{macro}{\lst@stringtypes}
% \begin{macro}{\lst@xstringtypes}
% are the list of (special) string types.
%    \begin{macrocode}
\gdef\lst@stringtypes{d,b,m,bd,db}
\global\let\lst@xstringtypes\@empty
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{string}
% \begin{lstkey}{morestring}
% \begin{lstkey}{deletestring}
% use mainly |\lst@SAC|.
%    \begin{macrocode}
\lst@Key{string}\relax{%
    \lstKV@XOptArg[d]{#1}\lst@SAC
         {String}s\lst@stringtypes\lst@xstringtypes
         \lst@DefStrings\lst@FVConvert \@empty}
\lst@Key{morestring}\relax{%
    \lstKV@XOptArg[d]{#1}\lst@SAC
         {String}s\lst@stringtypes\lst@xstringtypes
         \lst@DefStrings\lst@FVConvert \relax}
\lst@Key{deletestring}\relax{%
    \lstKV@XOptArg[d]{#1}\lst@SACDelete
         {String}s\lst@stringtypes\lst@xstringtypes
         \lst@DefStrings}
%    \end{macrocode}
% The hook defines the strings after selecting the standard character table.
% This adjusts the character table to the user's demands.
%    \begin{macrocode}
\lst@AddToHook{SetLanguage}{\let\lst@DefStrings\@empty}
\lst@AddToHook{SelectCharTable}{\lst@DefStrings}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{stringstyle}
% You shouldn't need comments on the following two lines.
%    \begin{macrocode}
\lst@Key{stringstyle}{}{\def\lst@stringstyle{#1}}
\lst@AddToHook{EmptyStyle}{\let\lst@stringstyle\@empty}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{stringspaces}
% Thanks to \lsthelper{Knut~M\"uller}{1997/04/28}{\blankstringtrue} for
% reporting problems with |\blankstringtrue| (now |stringspaces=false|).
% The problem has gone.
%    \begin{macrocode}
\lst@Key{stringspaces}{true}[t]{\lstKV@SetIf{#1}\lst@ifstringspaces}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@stringmode}
% is the static mode for strings.
%    \begin{macrocode}
\lst@NewMode\lst@stringmode
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BeginString}
% To activate string mode, we do the usual things but here we also assign the
% correct closing string delimiter and |\lst@outputspace|.
%    \begin{macrocode}
\gdef\lst@BeginString#1#2{%
    \lst@TrackNewLines
    \lst@ifexstrings #2\lst@PrintToken \fi
    \lst@EnterMode{#1}%
        {\lst@modetrue \let\lst@currstyle\lst@stringstyle}%
    \lst@ifexstrings\else #2\lst@PrintToken \fi
    \lst@ifstringspaces
        \lst@keepspacestrue
        \let\lst@outputspace\lst@visiblespace
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHookExe{ExcludeDelims}{\let\lst@ifexstrings\iffalse}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EndString}
% We terminate that mode selection after printing the collected other
% characters---at least the closing delimiter.
%    \begin{macrocode}
\gdef\lst@EndString#1{%
    \lst@ifexstrings
          \lst@PrintToken \lst@LeaveMode
        #1\lst@PrintToken
    \else
        #1\lst@PrintToken \lst@LeaveMode
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{stringtest}
% We |\let| the test macro |\@empty| if necessary.
%    \begin{macrocode}
\lst@Key{stringtest}\relax[t]{\lstKV@SetIf{#1}\lst@ifstringtest}
\lst@AddToHook{SetLanguage}{\let\lst@ifstringtest\iftrue}
\lst@AddToHook{Init}
    {\lst@ifstringtest\else \let\lst@TestStringMode\@empty \fi}
%    \end{macrocode}
% Default definition of the test macro:
%    \begin{macrocode}
\gdef\lst@TestStringMode{%
     \ifnum\lst@mode=\lst@stringmode
         \PackageWarning{Listings}{String constant exceeds line}%
         \lst@EndString{}%
     \fi}
\lst@AddToHook{EOL}{\lst@TestStringMode}
%    \end{macrocode}
% \end{lstkey}
%
% And now all the |\lst@ProcessString@|\meta{type} definitions.
%
% \begin{macro}{\lst@ProcessString@d}
% `d' means no extra work. Reaching the (first) delimiter enters string mode
% and coming to the next leaves it, and so on. Then the character sequence
% |''''| produces correct output. First we output any preceding letters.
%    \begin{macrocode}
\gdef\lst@ProcessString@d#1{%
    \lst@ifletter \lst@Output\lst@letterfalse \fi
    \let\lst@next\@empty
%    \end{macrocode}
% If we already process a string, we execute the saved meaning and look whether
% the last other (that's the delimiter) matches---a single quote must not end a
% string starting with a double quote.
%    \begin{macrocode}
    \ifnum\lst@mode=\lst@stringmode
        \ifx #1\lst@closestring
            \let\lst@next\lst@EndString
        \fi
    \else
%    \end{macrocode}
% If we don't process a string, we test whether or not a string is allowed.
% |\lst@BeginString| enters string mode and defines the closing delimiter.
% This `begin string' macro gets one argument, hence we expand the control
% sequence name before executing the macro (if necessary).
%    \begin{macrocode}
        \lst@ifmode\else
            \let\lst@closestring#1%
            \def\lst@next{\lst@BeginString\lst@stringmode}%
        \fi
    \fi
    \expandafter\lst@next\csname\@lst s@s#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ProcessString@b}
% `b' means an extra if: Only if the last other is not a backslash (5-th line)
% the delimiter can close the string. The rest is the same as above.
%    \begin{macrocode}
\gdef\lst@ProcessString@b#1{%
    \lst@ifletter \lst@Output\lst@letterfalse \fi
    \let\lst@next\@empty
    \ifnum\lst@mode=\lst@stringmode
        \ifx\lst@lastother\lstum@backslash\else
            \ifx #1\lst@closestring
                \let\lst@next\lst@EndString
            \fi
        \fi
    \else
        \lst@ifmode\else
            \let\lst@closestring#1%
            \def\lst@next{\lst@BeginString\lst@stringmode}%
        \fi
    \fi
    \expandafter\lst@next\csname lsts@s#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ProcessString@bd}
% \begin{macro}{\lst@ProcessString@db}
% are just the same and the same as |\lst@ProcessString@b|.
%    \begin{macrocode}
\global\let\lst@ProcessString@bd\lst@ProcessString@b
\global\let\lst@ProcessString@db\lst@ProcessString@bd
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{macro}{\lst@ProcessString@m}
% `M'atlabed is designed for programming languages where string delimiters are
% are also used for other purposes, like Matlab or Ada. Here we enter string
% mode only if the last character has not been a letter and has not been a
% right parenthesis. Hence, we have to move the |\lst@ifletter| and change the
% main |\else| part.
%    \begin{macrocode}
\gdef\lst@ProcessString@m#1{%
    \let\lst@next\@empty
    \ifnum\lst@mode=\lst@stringmode
        \lst@ifletter \lst@Output\lst@letterfalse \fi
        \ifx #1\lst@closestring
            \let\lst@next\lst@EndString
        \fi
    \else
%    \end{macrocode}
% And now the real `m' changes:
%    \begin{macrocode}
        \lst@ifletter
            \lst@Output\lst@letterfalse
        \else
            \ifx\lst@lastother)\else \lst@ifmode\else
                \let\lst@closestring#1%
                \def\lst@next{\lst@BeginString\lst@stringmode}%
            \fi \fi
        \fi
    \fi
    \expandafter\lst@next\csname lsts@s#1\endcsname}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Comments}
%
% \begin{aspect}{comments}
% That's what we are working on.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{comments}
%    \end{macrocode}
%
% \begin{macro}{\lst@commenttypes}
% \begin{macro}{\lst@xcommenttypes}
% Via \keyname{comment} available comment types: \textbf line, \textbf fixed
% column, \textbf single, \textbf double, and \textbf nested. All these types
% are special types, i.e.~they all provide the macro |\lst@Comment@|\meta{type}
% to define a \meta{type} comment.
%    \begin{macrocode}
\gdef\lst@commenttypes{l,f,s,d,n}
\gdef\lst@xcommenttypes{l,f,s,d,n}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{comment}
% \begin{lstkey}{morecomment}
% \begin{lstkey}{deletecomment}
% The keys are easy since defined in terms of |\lst@SAC|. The replacement texts
% only differ in the very last token |\@empty| respectively |\relax|.
%    \begin{macrocode}
\lst@Key{comment}{}
    {\lstKV@XOptArg[]{#1}\lst@SAC
         {Comment}c\lst@commenttypes\lst@xcommenttypes
         \lst@DefComments\lst@FVConvert \@empty}
\lst@Key{morecomment}\relax
    {\lstKV@XOptArg[]{#1}\lst@SAC
         {Comment}c\lst@commenttypes\lst@xcommenttypes
         \lst@DefComments\lst@FVConvert \relax}
\lst@Key{deletecomment}\relax{%
    \lstKV@XOptArg[]{#1}\lst@SACDelete
         {Comment}c\lst@commenttypes\lst@xcommenttypes
         \lst@DefComments}
%    \end{macrocode}
% Initialization.
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}{\lst@DefComments}
\lst@AddToHook{SetLanguage}{\let\lst@DefComments\@empty}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{commentstyle}
% Any hints necessary?
%    \begin{macrocode}
\lst@Key{commentstyle}{}{\def\lst@commentstyle{#1}}
\lst@AddToHook{EmptyStyle}{\let\lst@commenstyle\itshape}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@BeginComment}
% We print preceding characters (if any), begin the comment and output the
% comment delimiter. The temporary mode change ensures that the characters
% can't end the current comment or start a new one.
%    \begin{macrocode}
\gdef\lst@BeginComment#1#2#3\@empty{%
    \lst@TrackNewLines \lst@PrintToken
    \lst@EnterMode{#1}{\lst@modetrue \let\lst@currstyle#2}%
    \lst@mode\lst@nomode #3\lst@mode#1\relax
    \lsthk@AfterBeginComment}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{AfterBeginComment}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EndComment}
% Output the comment delimiter and leave the mode.
%    \begin{macrocode}
\gdef\lst@EndComment#1\@empty{%
    #1%
    \lst@PrintToken \lst@LeaveMode
    \let\lst@lastother\@empty}
%    \end{macrocode}
% \begin{TODO}
% |\let\lst@lastother\@empty| should be moved elsewhere, probably to the
% \hookname{EndGroup} hook. But is this safe, correct, necessary?
% \end{TODO}
% \end{macro}
%
% \begin{macro}{\lst@CommentB}
% We put the arguments together to fit |\lst@CDef|. Note that the very last
% argument |\@empty| to |\lst@CDef| is used as `brake' for |\lst@CArgEmpty|
% or |\lst@BeginComment|. Both definitions use |\@empty| to delimit the last
% argument.
%    \begin{macrocode}
\gdef\lst@CommentB#1#2#3#4#5#6#7#8#9{%
    \lst@CDef#1#2{#3}#4%
        {#6}%
        {\let\lst@bnext\lst@CArgEmpty
         \lst@ifmode #7\else
             #8%
             \def\lst@bnext{\lst@BeginComment#5#9}%
         \fi
         \lst@bnext}%
        \@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CommentE}
% Here we use |\ifnum\lst@mode=#5| (5-th line) where |#5| is a mode number.
% This ensures that comment delimiters match each other.
%    \begin{macrocode}
\gdef\lst@CommentE#1#2#3#4#5#6#7#8{%
    \lst@CDef#1#2{#3}#4%
        {#6}%
        {\let\lst@enext\lst@CArgEmpty
         \ifnum\lst@mode=#5%
             #7%
             \let\lst@enext\lst@EndComment
         \else
             #8%
         \fi
         \lst@enext}%
        \@empty}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{Init}{\let\lst@bnext\relax \let\lst@enext\relax}
%    \end{macrocode}
% \end{macro}
%
% Now we have to provide all the |\lst@Comment@|\meta{type} macros.
%
% \begin{macro}{\lst@CLmode}
% Comment lines use a static mode. It terminates at end of line.
%    \begin{macrocode}
\lst@NewMode\lst@CLmode
\lst@AddToHook{EOL}{\ifnum\lst@mode=\lst@CLmode \lst@LeaveMode \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Comment@l}
% is easy---thanks to |\lst@CArg| and |\lst@CommentB|.
%    \begin{macrocode}
\gdef\lst@Comment@l#1\@empty{%
    \lst@CArg #1\relax
        \lst@CommentB\lst@CLmode{}{}{}\lst@commentstyle}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Comment@f}
% is more work. First we insert the number of preceding columns if necessary.
%    \begin{macrocode}
\gdef\lst@Comment@f{\@ifnextchar[\lst@Comment@@f{\lst@Comment@@f[0]}}
%    \end{macrocode}
% Then we define the comment in the same way as above, but we enter comment
% mode (if and) only if the character is in column |#1|$+$1.
%    \begin{macrocode}
\gdef\lst@Comment@@f[#1]#2{%
    \ifx\@empty#2\@empty\else
        \lst@CArg #2\relax\lst@CommentB\lst@CLmode{}{}%
            {\lst@CalcLineLength
             \ifnum\@tempcnta=#1\else
                \expandafter\@gobblethree
             \fi}%
            \lst@commentstyle
%    \end{macrocode}
% We continue the loop.
%    \begin{macrocode}
        \def\lst@next{\lst@Comment@@f[#1]}%
        \expandafter\lst@next
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CommentDM@s}
% uses the dynamically allocated mode |#1|.
%    \begin{macrocode}
\gdef\lst@CommentDM@s#1#2#3\@empty{%
    \lst@CArg #2\relax\lst@CommentB{#1}{}{}{}\lst@commentstyle
    \lst@CArg #3\relax\lst@CommentE{#1}{}{}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Comment@d}
% makes implicitly use of dynamic modes.
%    \begin{macrocode}
\gdef\lst@Comment@d#1\@empty{\lstKV@FourArg{#1}%
    {\ifx\@empty##4\@empty\else
         \lst@UseDynamicMode\lst@CommentDM@s{##1}{##2}\@empty
         \lst@UseDynamicMode\lst@CommentDM@s{##3}{##4}\@empty
     \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CommentDM@n}
% We either give an error message or define the nested comment.
%    \begin{macrocode}
\gdef\lst@CommentDM@n#1#2\@empty{\lstKV@TwoArg{#2}%
    {\ifx\@empty##2\@empty\else
         \def\@tempa{##1}\def\@tempb{##2}%
         \ifx\@tempa\@tempb
             \PackageError{Listings}{Identical delimiters}%
             {These delimiters make no sense with nested comments.}%
         \else
             \lst@CArg ##1\relax\lst@CommentB{#1}%
                 {}%
                 {\ifnum\lst@mode=#1\relax \expandafter\@gobble \fi}%
                 {}\lst@commentstyle
             \lst@CArg ##2\relax\lst@CommentE{#1}{}{}{}%
         \fi
     \fi}}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
% \begin{aspect}{pod}
% PODs are defined as separate aspect.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{pod}
%    \end{macrocode}
%
% \begin{lstkey}{printpod}
% \begin{lstkey}{podcomment}
% We begin with the user keys, which I introduced after communication with
% \lsthelper{Michael~Piotrowski}{1997/11/11}{printpod}.
%    \begin{macrocode}
\lst@Key{printpod}{false}[t]{\lstKV@SetIf{#1}\lst@ifprintpod}
\lst@Key{podcomment}{false}[t]{\lstKV@SetIf{#1}\lst@ifpodcomment}
\lst@AddToHookExe{SetLanguage}{\let\lst@ifpodcomment\iffalse}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@PODmode}
% is the static mode for PODs.
%    \begin{macrocode}
\lst@NewMode\lst@PODmode
%    \end{macrocode}
% \end{macro}
%
% We adjust some characters if the user has selected |podcomment=true|.
%    \begin{macrocode}
\lst@NewMode\lst@PODmode
\lst@AddToHook{SelectCharTable}
    {\lst@ifpodcomment
         \lst@CArgX =\relax\lst@CommentB\lst@PODmode
           {}{}%
%    \end{macrocode}
% The following code is executed if we've found an equality sign and haven't
% entered a mode (in fact if mode changes are allowed): We `begin drop output'
% and gobble the usual begin of comment sequence (via |\@goblethree|) if PODs
% aren't be printed. Moreover we gobble it if the current column number is not
% one---|\@tempcnta| is valued below.
%    \begin{macrocode}
           {\ifnum\@tempcnta=\z@
                \lst@ifprintpod\else
                    \def\lst@bnext{\lst@BeginDropOutput\lst@PODmode}%
                    \expandafter\expandafter\expandafter\@gobblethree
                \fi
            \else
               \expandafter\@gobblethree
            \fi}%
           \lst@commentstyle
%    \end{macrocode}
% If we come to |=|, we always calculate the current column number (minus one).
%    \begin{macrocode}
         \lst@CArgX =cut\^^M\relax\lst@CommentE\lst@PODmode
           {\lst@CalcLineLength}%
%    \end{macrocode}
% If there is additionally |cut|+EOL and if we are in |\lst@PODmode| but not in
% column one, we must gobble the `end comment sequence'.
%    \begin{macrocode}
           {\ifnum\@tempcnta=\z@\else
                \expandafter\@gobblethree
            \fi}%
           {}%
	 \fi}
%    \end{macrocode}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{`Invisible comments'}
%
% \begingroup
%    \begin{macrocode}
%<*unused>
%    \end{macrocode}
% \endgroup
% Just some experimental code which is mainly a copy of the comment macros.
% \begin{macro}{\lst@icommenttypes}
% \begin{macro}{\lst@xicommenttypes}
%    \begin{macrocode}
\gdef\lst@icommenttypes{l,s,d,n}
\gdef\lst@xicommenttypes{l,s,d,n}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{invisiblecomment}
% \begin{lstkey}{moreinvisiblecomment}
% \begin{lstkey}{deleteinvisiblecomment}
% The keys are easy since defined in terms of |\lst@SAC|. The replacement texts
% only differ in the very last token |\@empty| respectively |\relax|.
%    \begin{macrocode}
\lst@Key{invisiblecomment}{}
    {\lstKV@XOptArg[]{#1}\lst@SAC
         {InvisibleComment}c\lst@icommenttypes\lst@xicommenttypes
         \lst@DefInvisibleComments\lst@XCConvert \@empty}
\lst@Key{moreinvisiblecomment}\relax
    {\lstKV@XOptArg[]{#1}\lst@SAC
         {InvisibleComment}c\lst@icommenttypes\lst@xicommenttypes
         \lst@DefInvisibleComments\lst@XCConvert \relax}
\lst@Key{deleteinvisiblecomment}\relax{%
    \lstKV@XOptArg[]{#1}\lst@SACDelete
         {InvisibleComment}c\lst@icommenttypes\lst@xicommenttypes
         \lst@DefInvisibleComments}
%    \end{macrocode}
% Initialization.
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}{\lst@DefInvisibleComments}
\lst@AddToHook{SetLanguage}{\let\lst@DefInvisibleComments\@empty}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@BeginIComment}
% We print preceding characters (if any), begin the comment and output the
% comment delimiter. The temporary mode change ensures that the characters
% can't end the current comment or start a new one.
%    \begin{macrocode}
\gdef\lst@BeginIComment#1#2#3\@empty{%
    \lst@TrackNewLines \lst@PrintToken
    \lst@InterruptModes
    \lst@EnterMode{\lst@TeXCLmode}{\lst@modetrue\setbox\z@\hbox\bgroup}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ICommentB}
% We put the arguments together to fit |\lst@CDef|. Note that the very last
% argument |\@empty| to |\lst@CDef| is used as `brake' for |\lst@CArgEmpty|
% or |\lst@BeginComment|. Both definitions use |\@empty| to delimit the last
% argument.
%    \begin{macrocode}
\gdef\lst@ICommentB#1#2#3#4#5#6#7#8#9{%
    \lst@CDef#1#2{#3}#4%
        {#6}%
        {\let\lst@bnext\lst@CArgEmpty
         \lst@ifmode #7\else
             #8%
             \def\lst@bnext{\lst@BeginIComment#5#9}%
         \fi
         \lst@bnext}%
        \@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InvisibleComment@l}
% is easy---thanks to |\lst@CArg| and |\lst@CommentB|.
%    \begin{macrocode}
\gdef\lst@InvisibleComment@l#1\@empty{%
    \lst@CArg #1\relax
        \lst@ICommentB\lst@CLmode{}{}{}\lst@commentstyle}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CommentDM@s}
% uses the dynamically allocated mode |#1|.
%    \begin{macrocode}
\gdef\lst@CommentDM@s#1#2#3\@empty{%
    \lst@CArg #2\relax\lst@CommentB{#1}{}{}{}\lst@commentstyle
    \lst@CArg #3\relax\lst@CommentE{#1}{}{}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Comment@d}
% makes implicitly use of dynamic modes.
%    \begin{macrocode}
\gdef\lst@Comment@d#1\@empty{\lstKV@FourArg{#1}%
    {\ifx\@empty##4\@empty\else
         \lst@UseDynamicMode\lst@CommentDM@s{##1}{##2}\@empty
         \lst@UseDynamicMode\lst@CommentDM@s{##3}{##4}\@empty
     \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CommentDM@n}
% We either give an error message or define the nested comment.
%    \begin{macrocode}
\gdef\lst@CommentDM@n#1#2\@empty{\lstKV@TwoArg{#2}%
    {\ifx\@empty##2\@empty\else
         \def\@tempa{##1}\def\@tempb{##2}%
         \ifx\@tempa\@tempb
             \PackageError{Listings}{Identical delimiters}%
             {These delimiters make no sense with nested comments.}%
         \else
             \lst@CArg ##1\relax\lst@CommentB{#1}%
                 {}%
                 {\ifnum\lst@mode=#1\relax \expandafter\@gobble \fi}%
                 {}\lst@commentstyle
             \lst@CArg ##2\relax\lst@CommentE{#1}{}{}{}%
         \fi
     \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@XCConvert}
%    \begin{macrocode}
\gdef\lst@XCConvert#1{%
    \ifx\@nil#1\else
        \lst@FVConvert{#1}\@nil
        \expandafter\lst@XCConvert@
    \fi}
\gdef\lst@XCConvert@#1{%
    \ifx\@nil#1\else
        \lst@XCConvert@b#1\relax\relax
        \expandafter\lst@XCConvert
    \fi}
\gdef\lst@XCConvert@b#1#2\relax{%
    \ifx\relax#2%
        \begingroup\lccode`\~=`#1\lowercase{\endgroup
            \lst@XCConvert@c~}{}%
    \else
        \begingroup\lccode`\~=`#1\lowercase{\endgroup
            \lst@XCConvert@c~}{#2}%
    \fi}
\gdef\lst@XCConvert@c#1#2{\lst@lAddTo\lst@arg{{#1#2}}}
%    \end{macrocode}
%\end{macro}
% \begingroup
%    \begin{macrocode}
%</unused>
%    \end{macrocode}
% \endgroup
%
%
% \subsection{Replacing input}
%
% \begingroup
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
% \endgroup
%
% \begin{macro}{\lst@ReplaceInput}
% is defined in terms of |\lst@CArgX| and |\lst@CDefX|.
%    \begin{macrocode}
\def\lst@ReplaceInput#1{\lst@CArgX #1\relax\lst@CDefX{}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{literate}
% \lsthelper{Jason~Alexander}{1999/03/10}{literate programming} asked for
% something like that. The key simply saves the argument.
%    \begin{macrocode}
\lst@Key{literate}{}{\def\lst@literate{#1}}
\lst@AddToHook{SelectCharTable}
    {\ifx\lst@literate\@empty\else
         \expandafter\lst@Literate\lst@literate{}\relax\z@
     \fi}
%    \end{macrocode}
% Internally we make use of the `replace input' feature.
% We print the preceding text, assign token and length, and output it.
%    \begin{macrocode}
\def\lst@Literate#1#2#3{%
    \ifx\relax#2\@empty\else
        \lst@ReplaceInput{#1}%
            {\lst@PrintToken \lst@letterfalse
             \lst@token{#2}\lst@length#3\relax\lst@PrintToken}%
        \expandafter\lst@Literate
    \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@BeginDropInput}
% We deactivate all `process' macros. |\lst@modetrue| does this for all
% up-coming string delimiters, comments, and so on. Note that we don't use
% |\lst@PrintToken|!
%    \begin{macrocode}
\def\lst@BeginDropInput#1{%
    \lst@EnterMode{#1}%
    {\lst@modetrue
     \let\lst@ProcessLetter\@gobble
     \let\lst@ProcessDigit\@gobble
     \let\lst@ProcessOther\@gobble
     \let\lst@ProcessSpace\@empty
     \let\lst@ProcessTabulator\@empty
     \let\lst@ProcessFormFeed\@empty}}
%    \end{macrocode}
% \end{macro}
%
% \begingroup
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \endgroup
%
%
% \subsection{Escaping to \LaTeX}
%
% \begin{aspect}{escape}
% We now define the \ldots\ damned \ldots\ the aspect has escaped!
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{escape}
%    \end{macrocode}
%
% \begin{lstkey}{texcl}
% Communication with \lsthelper{J\"orn~Wilms}{1997/07/07}{\TeX\ comments} is
% responsible for this key. The definition and the first hooks are easy.
%    \begin{macrocode}
\lst@Key{texcl}{false}[t]{\lstKV@SetIf{#1}\lst@iftexcl}
\lst@AddToHook{TextStyle}{\let\lst@iftexcl\iffalse}
\lst@AddToHook{EOL}
    {\ifnum\lst@mode=\lst@TeXCLmode
         \expandafter\lst@escapeend
         \expandafter\lst@LeaveAllModes
         \expandafter\lst@ReenterModes
     \fi}
%    \end{macrocode}
% If the user wants \TeX\ comment lines, we print the comment separator and
% interrupt the normal processing.
%    \begin{macrocode}
\lst@AddToHook{AfterBeginComment}
    {\lst@iftexcl \ifnum\lst@mode=\lst@CLmode
         \lst@PrintToken
         \lst@LeaveMode \lst@InterruptModes
         \lst@EnterMode{\lst@TeXCLmode}{\lst@modetrue\lst@commentstyle}%
         \expandafter\expandafter\expandafter\lst@escapebegin
     \fi \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@NewMode\lst@TeXCLmode
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@ActiveCDefX}
% Same as |\lst@CDefX| but we also make |#1| active.
%    \begin{macrocode}
\gdef\lst@ActiveCDefX#1#2#3#4#5#6#7{%
    \let#4#1%
    \catcode`#1\active\lccode`\~=`#1%
    \ifx\@empty#2\@empty
        \lowercase{\def~}{#5\def\lst@next{#6#7}\lst@next}%
    \else \ifx\@empty#3\@empty
        \lowercase{\def~}##1{%
            #5%
            \ifx##1#2\def\lst@next{#6#7}\else
                     \def\lst@next{#4##1}\fi
            \lst@next}%
    \else
        \lowercase{\def~}{%
            #5%
            \lst@IfNextCharsArg{#2#3}{#6#7}%
                                     {\expandafter#4\lst@eaten}}%
    \fi \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Escape}
% gets four arguments all in all. The first and second are the `begin' and
% `end' escape sequences, the third is executed when the escape starts, and the
% fourth right before ending it. We use the same mechanism as for \TeX\ comment
% lines.
%    \begin{macrocode}
\gdef\lst@Escape#1#2#3#4{%
    \lst@CArgX #1\relax\lst@CDefX
        {}%
        {\lst@TrackNewLines\lst@UseLostSpace \lst@PrintToken
         \lst@InterruptModes
         \lst@EnterMode{\lst@TeXmode}{\lst@modetrue}%
%    \end{macrocode}
% Now we must define the character sequence to end the escape.
%    \begin{macrocode}
         \ifx\^^M#2%
             \lst@CArg #2\relax\lst@ActiveCDefX
                 {}%
                 {\lst@escapeend #4\lst@LeaveAllModes\lst@ReenterModes}%
                 {\lst@MProcessListing}%
         \else
             \lst@CArg #2\relax\lst@ActiveCDefX
                 {}%
                 {\lst@escapeend #4\lst@LeaveAllModes\lst@ReenterModes}%
                 {}%
         \fi
         #3\lst@escapebegin}%
        {}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@NewMode\lst@TeXmode
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{escapebegin}
% \begin{lstkey}{escapeend}
% The keys simply store the arguments.
%    \begin{macrocode}
\lst@Key{escapebegin}{}{\def\lst@escapebegin{#1}}
\lst@Key{escapeend}{}{\def\lst@escapeend{#1}}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{escapechar}
% The introduction of this key is due to a communication with \lsthelper
% {Rui~Oliveira}{1998/06/05}{escape characters}. We define |\lst@DefEsc| and
% execute it after selecting the standard character table.
%    \begin{macrocode}
\lst@Key{escapechar}{}
    {\ifx\@empty#1\@empty
         \let\lst@DefEsc\relax
     \else
         \def\lst@DefEsc{\lst@Escape{#1}{#1}{}{}}%
     \fi}
\lst@AddToHook{TextStyle}{\let\lst@DefEsc\@empty}
\lst@AddToHook{SelectCharTable}{\lst@DefEsc}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{escapeinside}
% Nearly the same.
%    \begin{macrocode}
\lst@Key{escapeinside}{}{\lstKV@TwoArg{#1}%
    {\let\lst@DefEsc\@empty
     \ifx\@empty##1@empty\else \ifx\@empty##2\@empty\else
         \def\lst@DefEsc{\lst@Escape{##1}{##2}{}{}}%
     \fi\fi}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{mathescape}
% This is a switch tested after character table selection.
% We use |\lst@Escape| with math shifts as arguments.
%    \begin{macrocode}
\lst@Key{mathescape}{false}[t]{\lstKV@SetIf{#1}\lst@ifmathescape}
\lst@AddToHook{SelectCharTable}
    {\lst@ifmathescape \lst@Escape{\$}{\$}%
        {\setbox\@tempboxa=\hbox\bgroup$}%
        {$\egroup \lst@CalcLostSpaceAndOutput}\fi}
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \section{Doing output}
%
%
% \subsection{General keys and registers}
%
% \begin{lstkey}{identifierstyle}
% A simple definition.
%    \begin{macrocode}
%<*kernel>
\lst@Key{identifierstyle}{}{\def\lst@identifierstyle{#1}}
\lst@AddToHook{EmptyStyle}{\let\lst@identifierstyle\@empty}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{flexiblecolumns}
% Nothing else but a key, isn't it?
%    \begin{macrocode}
\lst@Key{flexiblecolumns}{false}[t]{\lstKV@SetIf{#1}\lst@ifflexible}
\def\lst@flexibletrue{\let\lst@ifflexible\iftrue}
\def\lst@flexiblefalse{\let\lst@ifflexible\iffalse}
\lst@Key{columns}{fixed}{\def\lst@arg{#1}%
    \def\lst@temp{fixed}%
    \ifx\lst@arg\lst@temp 
        \lst@flexibletrue
    \else
        \def\lst@temp{flexible}%
        \ifx\lst@arg\lst@temp
            \lst@flexiblefalse
        \else
            \PackageWarning{Listings}{Unknown column format `#1'}%
        \fi
    \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@width}
% \begin{lstkey}{basewidth}
% The width of a single character box is controlled by \keyname{basewidth}.
% We assign the values to macros and test whether they are negative.
%    \begin{macrocode}
\newdimen\lst@width
\lst@Key{basewidth}{0.6em,0.45em}{\lstKV@CSTwoArg{#1}%
    {\def\lst@widthfixed{##1}\def\lst@widthflexible{##2}%
     \ifx\lst@widthflexible\@empty
         \let\lst@widthflexible\lst@widthfixed
     \fi
     \gdef\lst@error{\PackageError{Listings}%
         {Nonnegative value(s) treated as zero}%
         {Type <RETURN> to proceed.}}%
     \global\let\@gtempa\relax
     \ifdim \lst@widthfixed<\z@
         \global\let\@gtempa\lst@error \let\lst@widthfixed\z@
     \fi
     \ifdim \lst@widthflexible<\z@
         \global\let\@gtempa\lst@error \let\lst@widthflexible\z@
     \fi
     \@gtempa}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{FontAdjust}
    {\lst@width=\lst@ifflexible\lst@widthflexible
                          \else\lst@widthfixed\fi \relax}
%    \end{macrocode}
% \end{lstkey}
% \end{macro}
%
% \begin{lstkey}{fontadjust}
% A simple \texttt{if} used in |\lst@EnterMode|.
% We always adjust internal `font' variables at \keyname{InitVars}.
%    \begin{macrocode}
\lst@Key{fontadjust}{false}[t]{\lstKV@SetIf{#1}\lst@iffontadjust}
\lst@AddToHook{InitVars}{\lsthk@FontAdjust}
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@FontAdjustPre{%
    \lst@iffontadjust
        \setbox\@tempboxa\hbox{{\lst@thestyle{\lsthk@FontAdjust
            \xdef\@gtempa{\noexpand\lst@width\the\lst@width\relax}}}}%
        \@gtempa
    \fi}
\def\lst@FontAdjustPost{\lst@iffontadjust \lsthk@FontAdjust \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@currlwidth}
% \begin{macro}{\lst@column}
% \begin{macro}{\lst@pos}
% the current line width and two counters.
%    \begin{macrocode}
\newdimen\lst@currlwidth % \global
\newcount\lst@column \newcount\lst@pos % \global
\lst@AddToHook{InitVarsBOL}
    {\global\lst@currlwidth\z@ \global\lst@pos\z@ \global\lst@column\z@}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@CalcLineLength}
% returns |\@tempcnta| $=$ |\lst@column| $+$ |\lst@length| $-$
% |\lst@pos|---|\lst@pos| will be nonpositive.
%    \begin{macrocode}
\def\lst@CalcLineLength{%
            \@tempcnta\lst@column
    \advance\@tempcnta\lst@length
    \advance\@tempcnta-\lst@pos}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@lostspace}
% Whenever this dimension is positive we can insert space to fix the column
% alignment.
% A negative `lost space' means that the printed line is wider than expected.
%    \begin{macrocode}
\newdimen\lst@lostspace % \global
\lst@AddToHook{InitVarsBOL}{\global\lst@lostspace\z@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@UseLostSpace}
% \begin{macro}{\lst@InsertLostSpace}
% \begin{macro}{\lst@InsertHalfLostSpace}
% We insert space and reset it (if and) only if |\lst@lostspace| is positive.
%    \begin{macrocode}
\def\lst@UseLostSpace{\ifdim\lst@lostspace>\z@ \lst@InsertLostSpace \fi}
%    \end{macrocode}
% Ditto, but insert always (even if negative).
%    \begin{macrocode}
\def\lst@InsertLostSpace{%
    \lst@Kern\lst@lostspace \global\lst@lostspace\z@}
\def\lst@InsertHalfLostSpace{%
    \global\lst@lostspace.5\lst@lostspace \lst@Kern\lst@lostspace}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{outputpos}
% We test for |l|, |c| and |r|.
% If none of them is given, we issue a warning and assume |r|---it's default
% since it looks most bad to me.
% The fixed column format makes use of |\lst@lefthss| and |\lst@righthss|,
% whereas the flexible needs only |\lst@leftinsert|.
%    \begin{macrocode}
\def\lstoutputpos@#1#2\relax{%
    \ifx #1l%
        \let\lst@lefthss\@empty \let\lst@righthss\hss
        \let\lst@leftinsert\@empty
    \else\ifx #1c%
        \let\lst@lefthss\hss \let\lst@righthss\hss
        \let\lst@leftinsert\lst@InsertHalfLostSpace
    \else
        \let\lst@lefthss\hss \let\lst@righthss\@empty
        \let\lst@leftinsert\lst@InsertLostSpace
        \ifx #1r\else \PackageWarning{Listings}%
            {Unknown positioning for output boxes}%
        \fi
    \fi\fi}
%    \end{macrocode}
% And now the key.
%    \begin{macrocode}
\lst@Key{outputpos}{c}{\lstoutputpos@#1\relax\relax}
%    \end{macrocode}
% \end{lstkey}
%
%
% \subsection{Low-level output}
%
% \begin{macro}{\lst@OutputBox}
% \begin{macro}{\lst@alloverstyle}
% The lowest level is the output of a box register.
% Here we use |\box#1| as argument to |\lst@alloverstyle| (if necessary).
%    \begin{macrocode}
\def\lst@OutputBox#1{\lst@alloverstyle{\box#1}\lsthk@PostOutput}
%    \end{macrocode}
% \begin{ALTERNATIVE}
% Instead of |\global\advance\lst@currlwidth| |\wd|\meta{box number} in
% both definitions |\lst@Kern| and |\lst@CalcLostSpaceAndOutput|, we could
% also advance the dimension here. But I decided not to do so since it
% simplifies possible redefinitions of |\lst@OutputBox|: we need not to care
% about |\lst@currlwidth|.
% \end{ALTERNATIVE}
%    \begin{macrocode}
\let\lst@alloverstyle\@empty % init
\lst@AddToHook{PostOutput}{}% init
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@Kern}
% has been used to insert `lost space'.
% It must not use |\@tempboxa| since that box
%    \begin{macrocode}
\def\lst@Kern#1{%
    \setbox\z@\hbox{{\lst@currstyle{\kern#1}}}%
    \global\advance\lst@currlwidth \wd\z@
    \lst@OutputBox\z@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@CalcLostSpaceAndOutput}
% is used here.
% We keep track of |\lst@lostspace|, |\lst@currlwidth| and |\lst@pos|.
%    \begin{macrocode}
\def\lst@CalcLostSpaceAndOutput{%
    \global\advance\lst@lostspace \lst@length\lst@width
    \global\advance\lst@lostspace-\wd\@tempboxa
    \global\advance\lst@currlwidth \wd\@tempboxa
    \global\advance\lst@pos -\lst@length
%    \end{macrocode}
% Before |\@tempboxa| is output, we insert space if there is enough lost space.
% This possibly invokes |\lst@Kern| via `insert half lost space', which is the
% reason for why we mustn't use |\@tempboxa| above.
%    \begin{macrocode}
    \ifdim\lst@lostspace>\z@ \lst@leftinsert \fi
    \lst@OutputBox\@tempboxa}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@OutputToken}
% Now comes a mid-level definition.
% Here we use |\lst@token| to set |\@tempboxa| and eventually output the box.
% We take care of font adjustment and special output styles (|\lst@thestyle|).
% Finally we reset |\lst@token| and |\lst@length|.
%    \begin{macrocode}
\def\lst@OutputToken{%
    \lst@TrackNewLines \lst@UseLostSpace
    \lst@FontAdjustPre
    \setbox\@tempboxa\lst@hbox
        {\lsthk@OutputBox
        {\lst@lefthss
         \lst@thestyle
             {\expandafter\lst@FillOutputBox\the\lst@token\@empty}%
         \lst@righthss}}%
    \lst@CalcLostSpaceAndOutput
    \lst@FontAdjustPost
    \lst@token{}\lst@length\z@}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{OutputBox}{}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@FillOutputBox}
% Filling up a box is easy.
%    \begin{macrocode}
\def\lst@FillOutputBox#1{#1\lst@FillOutputBox@}
%    \end{macrocode}
% While not reaching the end (|\@empty| from above), we insert dynamic space,
% output the argument and call the submacro again.
%    \begin{macrocode}
\def\lst@FillOutputBox@#1{%
    \ifx\@empty#1\else \hss#1\expandafter\lst@FillOutputBox@ \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{`High-level' output}
%
% \begin{macro}{\lst@hbox}
% By default the boxes we output are |\hbox|es to |\lst@length\lst@width|.
%    \begin{macrocode}
\def\lst@hbox{\hbox to\lst@length\lst@width}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@OutputOther}
% If there is anything `other' ($=$ string with nonletters) to output, we
% possibly start a new line, insert `lost space' if necessary, select a default
% style, change that style as needed, and eventually output the token register.
%    \begin{macrocode}
\def\lst@OutputOther{%
    \ifnum\lst@length=\z@\else
        \let\lst@thestyle\lst@currstyle
        \lsthk@OutputOther
        \lst@OutputToken
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{OutputOther}{}% init
\let\lst@currstyle\relax % init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@Output}
% We might use `identifier style' as default and reset |\lst@lastother|.
%    \begin{macrocode}
\def\lst@Output{%
    \ifnum\lst@length=\z@\else
        \ifx\lst@currstyle\relax
            \let\lst@thestyle\lst@identifierstyle
        \else
            \let\lst@thestyle\lst@currstyle
        \fi
        \lsthk@Output
        \lst@OutputToken
    \fi
    \let\lst@lastother\relax}
%    \end{macrocode}
% Note that |\lst@lastother| becomes equivalent to |\relax| and not equivalent
% to |\@empty| as everywhere else (e.g.~\hookname{InitVarsEOL}).
% I don't know whether this will be important in future or not.
%    \begin{macrocode}
\lst@AddToHook{Output}{}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@GotoTabStop}
% Here we look whether the line already contains printed characters.
% If true, we output a box with the width of a blank space.
%    \begin{macrocode}
\def\lst@GotoTabStop{%
    \ifx\lst@newlines\@empty
        \setbox\@tempboxa\hbox{\lst@outputspace}%
        \setbox\@tempboxa\hbox to\wd\@tempboxa{{\lst@currstyle{\hss}}}%
        \lst@CalcLostSpaceAndOutput
    \else
%    \end{macrocode}
% Otherwise (no printed characters) we only need to advance |\lst@lostspace|
% (which is inserted by the output macros above) and update the column.
%    \begin{macrocode}
        \global\advance\lst@lostspace \lst@length\lst@width
        \global\advance\lst@column\lst@length \lst@length\z@
    \fi}
%    \end{macrocode}
% Note that this version works also in flexible column mode.
% In fact it's mainly the flexible version of \packagename{listings} 0.20.
% \end{macro}
%
% \begingroup
% \noindent
% The adjustments for flexible column format:
% We don't insert dynamic space (the first three assignments) and use |\hbox|
% without |to| |\lst@length\lst@width|.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\lst@ifflexible
         \let\lst@FillOutputBox\@empty
         \let\lst@lefthss\@empty
         \let\lst@righthss\@empty
         \let\lst@hbox\hbox
     \fi}
%    \end{macrocode}
% \endgroup
%
%
% \subsection{New lines}
%
% \begin{macro}{\lst@NewLine}
% This is how we start a new line: begin new paragraph and output an empty box
% (only if low-level definition |\lst@OutputBox| doesn't gobble the box).
%    \begin{macrocode}
\def\lst@NewLine{%
    \ifx\lst@OutputBox\@gobble\else
        \par\noindent \hbox{}%
    \fi \lst@newlinetrue}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@newlines}
% The macro |\lst@newlines| contains |\lst@NewLine| sequences depending on how
% many (empty) new lines are between the last (already printed) string and the
% current one. We initialize the macro and append |\lst@NewLine| at the
% beginning of each line.
%    \begin{macrocode}
\lst@AddToHook{InitVars}{\global\let\lst@newlines\@empty}
\lst@AddToHook{InitVarsBOL}{\lst@AddTo\lst@newlines\lst@NewLine}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@TrackNewLines}
% If |\lst@newlines| is not already empty, we execute the hook, insert the
% new lines and empty the macro.
%    \begin{macrocode}
\def\lst@TrackNewLines{%
    \ifx\lst@newlines\@empty\else
        \lsthk@OnNewLine
        \lst@newlines
        \global\let\lst@newlines\@empty
    \fi}
\lst@AddToHook{OnNewLine}{}% init
%    \end{macrocode}
% Define |\lst@newlinetrue| and reset if after output.
%    \begin{macrocode}
\def\lst@newlinetrue{\global\let\lst@ifnewline\iftrue}
\lst@AddToHook{PostOutput}{\global\let\lst@ifnewline\iffalse}
\global\let\lst@ifnewline\iffalse
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@RemoveNewLine}
% is used to discard one |\lst@NewLine| from |\lst@newlines|. This is done
% in |\lst@DeInit| to ensure correct number of empty lines at the  end of a
% listing. In particular we ensure correct labelling. The argument (read by
% submacro) is executed if and only if a |\lst@NewLine| has been removed.
%    \begin{macrocode}
\def\lst@RemoveNewLine{%
    \def\lst@temp##1\lst@NewLine##2\@empty{%
        \ifx\@empty##2\@empty \expandafter\@gobble \else
            \expandafter\lst@RNL@\lst@newlines\@empty
        \fi}%
    \expandafter\lst@temp\lst@newlines\lst@NewLine\@empty}
\def\lst@RNL@#1\lst@NewLine#2\@empty#3{%
    \gdef\lst@newlines{#1#2}#3}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Dropping the whole output}
%
% \begin{macro}{\lst@BeginDropOutput}
% It's sometimes useful to process a part of a listing as usual, but to drop
% the output.
% This macro does the main work and gets one argument, namely the internal mode
% it enters.
% We save |\lst@newlines|, restore it |\aftergroup| and redefine one macro.
%    \begin{macrocode}
\def\lst@BeginDropOutput#1{%
    \global\let\lst@BDOnewlines\lst@newlines
    \lst@EnterMode{#1}%
        {\lst@modetrue
         \let\lst@OutputBox\@gobble
         \aftergroup\lst@BDORestore}}
%    \end{macrocode}
% Restoring |\lst@newlines| is quite easy:
%    \begin{macrocode}
\def\lst@BDORestore{\global\let\lst@newlines\lst@BDOnewlines}
%    \end{macrocode}
% Note that there is no |\lst@EndDropOutput| since this macro would be
% equivalent to |\lst@LeaveMode|.
% \end{macro}
% \begingroup
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \endgroup
%
%
% \subsection{Writing to an external file}
%
% \begin{aspect}{writefile}
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{writefile}
%    \end{macrocode}
%
% \begin{macro}{\lst@WF}
% \begin{macro}{\lst@WFtoken}
% The contents of the token will be written to file.
%    \begin{macrocode}
\newwrite\lst@WF \newtoks\lst@WFtoken
\lst@AddToHook{InitVarsBOL}{\global\lst@WFtoken{}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@WFWriteToFile}
% To do this, we have to expand the contents and then expand this via |\edef|.
% Empty |\lst@UM| ensures that `special characters' (underscore, dollar, etc.)
% are written correctly.
%    \begin{macrocode}
\gdef\lst@WFWriteToFile{%
  \begingroup
   \let\lst@UM\@empty
   \expandafter\edef\expandafter\lst@temp\expandafter{\the\lst@WFtoken}%
   \immediate\write\lst@WF{\lst@temp}%
  \endgroup
  \global\lst@WFtoken{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@WFAppend}
% Similar to |\lst@Append| but use |\lst@WFtoken|.
%    \begin{macrocode}
\gdef\lst@WFAppend#1{%
    \global\expandafter\lst@WFtoken\expandafter{\the\lst@WFtoken#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BeginWriteFile}
% redefines some macros additionally to |\lst@WFBegin|.
%    \begin{macrocode}
\gdef\lst@BeginWriteFile{%
    \begingroup
    \let\lst@OutputBox\@gobble
    \lst@WFBegin}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BeginAlsoWriteFile}
% just opens a group and calls |\lst@WFBegin|.
%    \begin{macrocode}
\gdef\lst@BeginAlsoWriteFile{\begingroup \lst@WFBegin}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BeginWF}
% redefines some (more) macros to meet our purpose: |\lst@Append...| macros and
% |\lst@PreGotoTabStop| must update |\lst@WFtoken|, and we need slightly
% different `EOL' and `DeInit' definitions to write the token register to file.
%    \begin{macrocode}
\begingroup \catcode`\^^I=11
\gdef\lst@WFBegin#1{%
    \def\lst@Append##1{\advance\lst@length\@ne
        \expandafter\lst@token\expandafter{\the\lst@token##1}%
        \lst@WFAppend##1}%
    \def\lst@AppendOther##1{%
        \let\lst@lastother=##1\advance\lst@length\@ne
        \expandafter\lst@token\expandafter{\the\lst@token##1}%
        \ifx ##1\lst@outputspace
            \lst@WFAppend{ }%
        \else
            \lst@WFAppend##1%
        \fi}%
    \lst@lAddTo\lst@PreGotoTabStop{\lst@WFAppend{^^I}}%
    \def\lst@ProcessSpace{%
        \lst@ifletter \lst@Output\lst@letterfalse \fi
        \lst@AppendOther\lst@outputspace}%
    \let\lst@DeInit\lst@WFDeInit
    \let\lst@MProcessListing\lst@WFMProcessListing
    \immediate\openout\lst@WF=#1\relax}%
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EndWriteFile}
% closes the file and restores original macro meanings.
%    \begin{macrocode}
\gdef\lst@EndWriteFile{\immediate\closeout\lst@WF \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@WFMProcessListing}
% \begin{macro}{\lst@WFDeInit}
% write (additionally) |\lst@WFtoken| to external file.
%    \begin{macrocode}
\global\let\lst@WFMProcessListing\lst@MProcessListing
\global\let\lst@WFDeInit\lst@DeInit
\lst@AddToAtTop\lst@WFMProcessListing{\lst@WFWriteToFile}
\lst@AddToAtTop\lst@WFDeInit{%
    \ifnum\lst@length=\z@\else \lst@WFWriteToFile \fi}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \section{Keywords}
%
%
% \subsection{Making tests}\lstlabel{iMakingTests}
%
% \begin{aspect}{keywords}
% We begin a new and very important aspect.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{keywords}
%    \end{macrocode}
% All keyword tests take the following three arguments.
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@|\meta{name}|@list| (a list of macros which contain the keywords)
% \item |\lst@g|\meta{name}|@sty| (global style macro)
% \end{macroargs}
% We begin with non memory-saving tests.
% \begingroup
%    \begin{macrocode}
\lst@ifsavemem\else
%    \end{macrocode}
% \endgroup
%
% \begin{macro}{\lst@KeywordTest}
% Fast keyword tests take advance of the |\lst@CCUseMacro| construction in
% section \ref{iCharacterTables}. If |\lst@UM| is empty, all `use macro'
% characters expand to their original characters (instead of to a printable
% version). Since |\lst|\meta{prefix}|@|\meta{keyword} will be equivalent to
% the appropriate style, we only need to build the control sequence
% |\lst|\meta{prefix}|@|\meta{current token} and assign it to |\lst@thestyle|.
%    \begin{macrocode}
\gdef\lst@KeywordTest#1#2#3{%
    \begingroup \let\lst@UM\@empty
    \global\expandafter\let\expandafter\@gtempa
        \csname lst#1@\the\lst@token\endcsname
    \endgroup
    \ifx\@gtempa\relax\else
        \let\lst@thestyle\@gtempa
    \fi}
%    \end{macrocode}
% Note that we need neither |#2| nor |#3| here.
% \end{macro}
%
% \begin{macro}{\lst@KEYWORDTEST}
% Case insensitive tests make the current character string upper case and give
% it to a submacro similar to |\lst@KeywordTest|.
%    \begin{macrocode}
\gdef\lst@KEYWORDTEST{%
    \uppercase\expandafter{\expandafter
        \lst@KEYWORDTEST@\the\lst@token}\relax}
\gdef\lst@KEYWORDTEST@#1\relax#2#3#4{%
    \begingroup \let\lst@UM\@empty
    \global\expandafter\let\expandafter\@gtempa
        \csname lst#2@#1\endcsname
    \endgroup
    \ifx\@gtempa\relax\else
        \let\lst@thestyle\@gtempa
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@WorkingTest}
% \begin{macro}{\lst@WORKINGTEST}
% Nearly the same.
%    \begin{macrocode}
\gdef\lst@WorkingTest#1#2#3{%
    \begingroup \let\lst@UM\@empty
    \global\expandafter\let\expandafter\@gtempa
        \csname lst#1@\the\lst@token\endcsname
    \endgroup
    \@gtempa}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@WORKINGTEST{%
    \uppercase\expandafter{\expandafter
        \lst@WORKINGTEST@\the\lst@token}\relax}
\gdef\lst@WORKINGTEST@#1\relax#2#3#4{%
    \begingroup \let\lst@UM\@empty
    \global\expandafter\let\expandafter\@gtempa
        \csname lst#2@#1\endcsname
    \endgroup
    \@gtempa}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@DefineKeywords}
% Eventually we need macros which define and undefine
% |\lst|\meta{prefix}|@|\meta{keyword}. Here the arguments are
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@|\meta{name} (a keyword list)
% \item |\lst@g|\meta{name}|@sty|
% \end{macroargs}
% We make the keywords upper case if necessary, \ldots
%    \begin{macrocode}
\gdef\lst@DefineKeywords#1#2#3{%
    \lst@ifsensitive
        \def\lst@next{\lst@for#2}%
    \else
        \def\lst@next{\uppercase\expandafter{\expandafter\lst@for#2}}%
    \fi
    \lst@next\do
%    \end{macrocode}
% iterate through the list, and make |\lst|\meta{prefix}|@|\meta{keyword}
% (if not already defined) equivalent to |\lst@g|\meta{name}|@sty|
% (which is possibly a working macro).
%    \begin{macrocode}
    {\expandafter\ifx\csname lst#1@##1\endcsname\relax
        \global\expandafter\let\csname lst#1@##1\endcsname#3%
     \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@UndefineKeywords}
% We make the keywords upper case if necessary, \ldots
%    \begin{macrocode}
\gdef\lst@UndefineKeywords#1#2#3{%
    \lst@ifsensitivedefed
        \def\lst@next{\lst@for#2}%
    \else
        \def\lst@next{\uppercase\expandafter{\expandafter\lst@for#2}}%
    \fi
    \lst@next\do
%    \end{macrocode}
% iterate through the list, and `undefine' |\lst|\meta{prefix}|@|\meta{keyword}
% if it's equivalent to |\lst@g|\meta{name}|@sty| (which is possibly a working
% macro).
%    \begin{macrocode}
    {\expandafter\ifx\csname lst#1@##1\endcsname#3%
        \global\expandafter\let\csname lst#1@##1\endcsname\relax
     \fi}}
%    \end{macrocode}
% Thanks to \lsthelper{Magnus~Lewis-Smith}{1999/09/08}{keywords do not
% undefine} a wrong |#2| in the replacement text could be changed to |#3|.
% \end{macro}
%
% \begingroup
% And now memory-saving tests.
%    \begin{macrocode}
\fi
\lst@ifsavemem
%    \end{macrocode}
% \endgroup
%
% \begin{macro}{\lst@IfOneOutOf}
% The definition here is similar to |\lst@IfOneOf|, but its second argument
% is a |\lst@|\meta{name}|@list|. Therefore we test a list of macros here.
%    \begin{macrocode}
\gdef\lst@IfOneOutOf#1\relax#2{%
    \def\lst@temp##1,#1,##2##3\relax{%
        \ifx\@empty##2\else \expandafter\lst@IOOOfirst \fi}%
    \def\lst@next{\lst@IfOneOutOf@#1\relax}%
    \expandafter\lst@next#2\relax\relax}
%    \end{macrocode}
% We either execute \meta{else} part or make the next test.
%    \begin{macrocode}
\gdef\lst@IfOneOutOf@#1\relax#2#3{%
    \ifx#2\relax
        \expandafter\@secondoftwo
    \else
        \expandafter\lst@temp\expandafter,#2,#1,\@empty\relax
        \expandafter\lst@next
    \fi}
\ifx\iffalse\else\fi
\gdef\lst@IOOOfirst#1\relax#2#3{\fi#2}
%    \end{macrocode}
% The line |\ifx\iffalse\else\fi| balances the |\fi| inside |\lst@IOOOfirst|.
% \end{macro}
%
% \begin{macro}{\lst@IFONEOUTOF}
% As in |\lst@IFONEOF| we need two |\uppercase|s here.
%    \begin{macrocode}
\gdef\lst@IFONEOUTOF#1\relax#2{%
    \uppercase{\def\lst@temp##1,#1},##2##3\relax{%
        \ifx\@empty##2\else \expandafter\lst@IOOOfirst \fi}%
    \def\lst@next{\lst@IFONEOUTOF@#1\relax}%
    \expandafter\lst@next#2\relax}
\gdef\lst@IFONEOUTOF@#1\relax#2#3{%
    \ifx#2\relax
        \expandafter\@secondoftwo
    \else
        \uppercase
            {\expandafter\lst@temp\expandafter,#2,#1,\@empty\relax}%
        \expandafter\lst@next
    \fi}
%    \end{macrocode}
% Note: The third last line uses the fact that keyword lists (not the list
% of keyword lists) are already made upper case if keywords are insensitive.
% \end{macro}
%
% \begin{macro}{\lst@KWTest}
% is a helper for the keyword and working identifier tests. We expand the
% token and call |\lst@IfOneOf|. The tests below will append appropriate
% \meta{then} and \meta{else} arguments.
%    \begin{macrocode}
\gdef\lst@KWTest{%
    \begingroup \let\lst@UM\@empty
    \expandafter\xdef\expandafter\@gtempa\expandafter{\the\lst@token}%
    \endgroup
    \expandafter\lst@IfOneOutOf\@gtempa\relax}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@KeywordTest}
% \begin{macro}{\lst@KEYWORDTEST}
% are fairly easy now. Note that we don't need |#1|=\meta{prefix} here.
%    \begin{macrocode}
\gdef\lst@KeywordTest#1#2#3{\lst@KWTest #2{\let\lst@thestyle#3}{}}
\global\let\lst@KEYWORDTEST\lst@KeywordTest
%    \end{macrocode}
% For case insensitive tests we've already assigned the insensitive version
% to |\lst@IfOneOutOf|. Thus we need no extra definition here.
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@WorkingTest}
% \begin{macro}{\lst@WORKINGTEST}
% Ditto.
%    \begin{macrocode}
\gdef\lst@WorkingTest#1#2#3{\lst@KWTest #2#3{}}
\global\let\lst@WORKINGTEST\lst@WorkingTest
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begingroup
%    \begin{macrocode}
\fi
%    \end{macrocode}
% \endgroup
%
% \begin{lstkey}{sensitive}
% is an \texttt{if}, preset \texttt{true} every language selection.
%    \begin{macrocode}
\lst@Key{sensitive}\relax[t]{\lstKV@SetIf{#1}\lst@ifsensitive}
\lst@AddToHookExe{SetLanguage}{\let\lst@ifsensitive\iftrue}
%    \end{macrocode}
% We select case insensitive definitions if necessary.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\lst@ifsensitive\else
         \let\lst@KeywordTest\lst@KEYWORDTEST
         \let\lst@WorkingTest\lst@WORKINGTEST
         \let\lst@IfOneOutOf\lst@IFONEOUTOF
     \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@MakeMacroUppercase}
% makes the contents of |#1| (if defined) upper case.
%    \begin{macrocode}
\gdef\lst@MakeMacroUppercase#1{%
    \ifx\@undefined#1\else \uppercase\expandafter
        {\expandafter\def\expandafter#1\expandafter{#1}}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Installing tests}
%
% \begin{macro}{\lst@InstallTest}
% The arguments are
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@|\meta{name}|@list|
% \item |\lst@|\meta{name}
% \item |\lst@g|\meta{name}|@list|
% \item |\lst@g|\meta{name}
% \item |\lst@g|\meta{name}|@sty|
% \item \alternative{w,s} (working procedure or style)
% \item \alternative{d,o} (\hookname{DetectKeywords} or \hookname{Output} hook)
% \end{macroargs}
% We just insert hook material. The tests will be inserted on demand.
%    \begin{macrocode}
\gdef\lst@InstallTest#1#2#3#4#5#6#7#8{%
    \lst@AddToHook{TrackKeywords}{\lst@TrackKeywords{#1}#2#4#6#7#8}%
    \lst@AddToHook{PostTrackKeywords}{\lst@PostTrackKeywords#2#3#4#5}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{Init}{\lsthk@TrackKeywords\lsthk@PostTrackKeywords}
\lst@AddToHook{TrackKeywords}{}% init
\lst@AddToHook{PostTrackKeywords}{}% init
%    \end{macrocode}
% We have to detect the keywords somewhere.
%    \begin{macrocode}
\lst@AddToHook{Output}{\lst@ifkeywords \lsthk@DetectKeywords \fi}
\lst@AddToHook{DetectKeywords}{}% init
\lst@AddToHook{ModeTrue}{\let\lst@ifkeywords\iffalse}
\lst@AddToHook{Init}{\let\lst@ifkeywords\iftrue}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InstallTestNow}
% actually inserts a test.
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@|\meta{name}|@list|
% \item |\lst@g|\meta{name}|@sty|
% \item \alternative{w,s} (working procedure or style)
% \item \alternative{d,o} (\hookname{DetectKeywords} or \hookname{Output} hook)
% \end{macroargs}
% For example, |#4#5|$=$|sd| will add
%    |\lst@KeywordTest{|\meta{prefix}|}|
%       |\lst@|\meta{name}|@list| |\lst@g|\meta{name}|@sty|
% to the \hookname{DetectKeywords} hook.
%    \begin{macrocode}
\gdef\lst@InstallTestNow#1#2#3#4#5{%
    \@ifundefined{\string#2#1}%
    {\global\@namedef{\string#2#1}{}%
     \edef\@tempa{%
         \noexpand\lst@AddToHook{\ifx#5dDetectKeywords\else Output\fi}%
         {\ifx #4w\noexpand\lst@WorkingTest
             \else\noexpand\lst@KeywordTest \fi
          {#1}\noexpand#2\noexpand#3}}%
%    \end{macrocode}
% If we are advised to save memory, we insert a test for each \meta{name}.
% Otherwise we install the tests according to \meta{prefix}.
%    \begin{macrocode}
     \lst@ifsavemem
         \@tempa
     \else
         \@ifundefined{lst@if#1@ins}%
             {\@tempa \global\@namedef{lst@if#1@ins}{}}%
             {}%
     \fi}
    {}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@TrackKeywords}
% Now it gets a bit tricky. We expand the class list |\lst@|\meta{name}|@list|
% behind |\lst@TK@{|\meta{prefix}|}||\lst@g|\meta{name}|@sty| and use two
% |\relax|es as terminators. This will define the keywords of all the classes
% as keywords of type \meta{prefix}. More details come soon.
%    \begin{macrocode}
\gdef\lst@TrackKeywords#1#2#3#4#5#6{%
    \lst@false
    \def\lst@arg{{#1}#4}%
    \expandafter\expandafter\expandafter\lst@TK@
        \expandafter\lst@arg#2\relax\relax
%    \end{macrocode}
% And nearly the same to undefine all out-dated keywords, which is necessary
% only if we don't save memory.
%    \begin{macrocode}
    \lst@ifsavemem\else
        \def\lst@arg{{#1}#4#2}%
        \expandafter\expandafter\expandafter\lst@TK@@
            \expandafter\lst@arg#3\relax\relax
    \fi
%    \end{macrocode}
% Finally we install the keyword test if keywords changed, in particular if
% they are defined the first time. Note that |\lst@InstallTestNow| inserts a
% test only once.
%    \begin{macrocode}
    \lst@if \lst@InstallTestNow{#1}#2#4#5#6\fi}
%    \end{macrocode}
% But first back to the current keywords.
% Global macros |\lst@g|\meta{id} contain globally defined keywords, whereas
% |\lst@|\meta{id} the true keyword contain.
% This way we can keep track of the keywords:
% If keywords or \keyname{sensitive} changed, we undefine the old ($=$
% globally defined) keywords and define the true ones.
% The arguments of |\lst@TK@| are as follows.
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@g|\meta{name}|@sty|
% \item |\lst@|\meta{id}
% \item |\lst@g|\meta{id}
% \end{macroargs}
%    \begin{macrocode}
\gdef\lst@TK@#1#2#3#4{%
    \ifx\lst@ifsensitive\lst@ifsensitivedefed
        \ifx#3#4\else
            \lst@true
            \lst@ifsavemem\else
                \lst@UndefineKeywords{#1}#4#2%
                \lst@DefineKeywords{#1}#3#2%
            \fi
        \fi
    \else
        \ifx#3\relax\else
            \lst@true
            \lst@ifsavemem\else
                \lst@UndefineKeywords{#1}#4#2%
                \lst@DefineKeywords{#1}#3#2%
            \fi
        \fi
    \fi
%    \end{macrocode}
% We don't define and undefine keywords if we try to save memory.
% But we probably need to make them upper case, which again wastes some memory.
%    \begin{macrocode}
    \lst@ifsavemem \ifx#3\relax\else
        \lst@ifsensitive\else \lst@MakeMacroUppercase#3\fi
    \fi \fi
%    \end{macrocode}
% Reaching the end |\relax\relax| of the class list, we gobble the `once again'.
%    \begin{macrocode}
    \ifx#3\relax
        \expandafter\@gobblethree
    \fi
    \lst@TK@{#1}#2}
%    \end{macrocode}
% Here now we undefine the out-dated keywords.
% While not reaching the end of the global list, we look whether the keyword
% class |#4#5| is still in use or needs to be undefined.
% Our arguments are
% \begin{macroargs}
% \item \meta{prefix}
% \item |\lst@g|\meta{name}|@sty|
% \item |\lst@|\meta{name}|@list|
% \item |\lst@|\meta{id}
% \item |\lst@g|\meta{id}
% \end{macroargs}
%    \begin{macrocode}
\gdef\lst@TK@@#1#2#3#4#5{%
    \ifx#4\relax
        \expandafter\@gobblefour
    \else
        \lst@IfSubstring{#4#5}#3{}{\lst@UndefineKeywords{#1}#5#2}%
    \fi
    \lst@TK@@{#1}#2#3}
%    \end{macrocode}
% Keywords are up-to-date after |Init|.
%    \begin{macrocode}
\lst@AddToHook{InitVars}
    {\global\let\lst@ifsensitivedefed\lst@ifsensitive}
\global\let\lst@ifsensitivedefed\iffalse % init % \global
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@PostTrackKeywords}
% After updating all the keywords, the global keywords and the global list
% become equivalent to the local ones.
%    \begin{macrocode}
\gdef\lst@PostTrackKeywords#1#2#3#4{%
    \lst@ifsavemem\else
        \global\let#3#1%
        \global\let#4#2%
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Classes and families}
%
% \begin{lstkey}{defaultclass}
% just stores the argument in a macro.
%    \begin{macrocode}
\lst@Key{defaultclass}\@ne{\def\lst@defaultclass{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@InstallFamily}
% Recall the parameters
% \begin{macroargs}
% \item \meta{prefix}
% \item \meta{name}
% \item \meta{style name}
% \item \meta{style init}
% \item \meta{default style name}
% \item \meta{working procedure}
% \item \alternative{l,o} (language or other key)
% \item \alternative{d,o} (\hookname{DetectKeywords} or \hookname{Output} hook)
% \end{macroargs}
% First we define the keys and the style key \meta{style name} if and only if
% the name is not empty.
%    \begin{macrocode}
\gdef\lst@InstallFamily#1#2#3#4#5{%
    \lst@Key{#2}\relax{\lst@UseFamily{#2}##1\relax\lst@MakeKeywords}%
    \lst@Key{more#2}\relax
        {\lst@UseFamily{#2}##1\relax\lst@MakeMoreKeywords}%
    \lst@Key{delete#2}\relax
        {\lst@UseFamily{#2}##1\relax\lst@DeleteKeywords}%
    \ifx\@empty#3\@empty\else
        \lst@Key{#3}{#4}{\lstKV@OptArg[\lst@defaultclass]{##1}%
            {\@tempcnta####1\relax
             \@namedef{lst@#3\ifnum\@tempcnta=\@ne\else \the\@tempcnta
                             \fi}{####2}}}%
    \fi
    \expandafter\lst@InstallFamily@
        \csname lst@#2@data\expandafter\endcsname
        \csname lst@#5\endcsname {#1}{#2}{#3}}
%    \end{macrocode}
% Now we check whether \meta{working procedure} is empty. Accordingly we use
% \texttt working procedure or \texttt style in the `data' definition.
% The working procedure is defined right here if necessary.
%    \begin{macrocode}
\gdef\lst@InstallFamily@#1#2#3#4#5#6#7#8{%
    \gdef#1{{#3}{#4}{#5}#2#7}%
    \long\def\lst@temp##1{#6}%
    \ifx\lst@temp\@gobble
        \lst@AddTo#1{s#8}%
    \else
        \lst@AddTo#1{w#8}%
        \global\@namedef{lst@g#4@wp}##1{#6}%
    \fi}
%    \end{macrocode}
% Nothing else is defined here, all the rest is done on demand.
% \end{macro}
%
% \begin{macro}{\lst@ProvideFamily}
% provides the member `|\the\@tempcnta|' of the family |#1|. We do nothing if
% the member already exists. Otherwise we expand the data macro defined above.
% Note that we don't use the counter if it equals one.
%    \begin{macrocode}
\gdef\lst@ProvideFamily#1{%
    \@ifundefined{lst@#1\ifnum\@tempcnta=\@ne\else \the\@tempcnta \fi}%
    {\expandafter\expandafter\expandafter\lst@ProvideFamily@
         \csname lst@#1@data\endcsname
         {\ifnum\@tempcnta=\@ne\else \the\@tempcnta \fi}}%
    {}}
%    \end{macrocode}
% Now we have the following arguments
% \begin{macroargs}
% \item \meta{prefix}
% \item \meta{name}
% \item \meta{style name}
% \item \meta{default style name}
% \item \alternative{l,o} (language or other key)
% \item \alternative{w,s} (working procedure or style)
% \item \alternative{d,o} (\hookname{DetectKeywords} or \hookname{Output} hook)
% \item |\ifnum\@tempcnta=\@ne\else \the\@tempcnta \fi|
% \end{macroargs}
% We define |\lst@g|\meta{name}\meta{number}|@sty| to call either
% |\lst@g|\meta{name}|@wp| with the number as argument or
% |\lst@|\meta{style name}\meta{number} where the number belongs to the control
% sequence. Note again that we don't use the counter if it equals zero.
%    \begin{macrocode}
\gdef\lst@ProvideFamily@#1#2#3#4#5#6#7#8{%
    \expandafter\xdef\csname lst@g#2#8@sty\endcsname
    {\if #6w%
         \expandafter\noexpand\csname lst@g#2@wp\endcsname{#8}%
     \else
         \expandafter\noexpand\csname lst@#3#8\endcsname
     \fi}%
%    \end{macrocode}
% We ensure the existence of the style macro. This is done in the
% \hookname{Init} hook by assigning the default style if necessary.
%    \begin{macrocode}
    \ifx\@empty#3\@empty\else
        \edef\lst@temp{\noexpand\lst@AddToHook{Init}{%
            \noexpand\lst@ProvideStyle\expandafter\noexpand
                \csname lst@#3#8\endcsname\noexpand#4}}%
        \lst@temp
    \fi
%    \end{macrocode}
% We call a submacro to do the rest. It requires some control sequences.
%    \begin{macrocode}
    \expandafter\lst@ProvideFamily@@
         \csname lst@#2#8@list\expandafter\endcsname
         \csname lst@#2#8\expandafter\endcsname
         \csname lst@#2#8@also\expandafter\endcsname
         \csname lst@g#2#8@list\expandafter\endcsname
         \csname lst@g#2#8\expandafter\endcsname
         \csname lst@g#2#8@sty\expandafter\endcsname
         {#1}#5#6#7}
%    \end{macrocode}
% Now we have (except that \meta{number} is probably always missing)
% \begin{macroargs}
% \item |\lst@|\meta{name}\meta{number}|@list|
% \item |\lst@|\meta{name}\meta{number}
% \item |\lst@|\meta{name}\meta{number}|@also|
% \item |\lst@g|\meta{name}\meta{number}|@list|
% \item |\lst@g|\meta{name}\meta{number}
% \item |\lst@g|\meta{name}\meta{number}|@sty|
% \item \meta{prefix}
% \item \alternative{l,o} (language or other key)
% \item \alternative{w,s} (working procedure or style)
% \item \alternative{d,o} (\hookname{DetectKeywords} or \hookname{Output} hook)
% \end{macroargs}
% Note that |#9| and `|#10|' are read by |\lst@InstallTest|.
% We initialize all required `variables' (probably at \hookname{SetLanguage})
% and install the test (which definition is in fact also delayed).
%    \begin{macrocode}
\gdef\lst@ProvideFamily@@#1#2#3#4#5#6#7#8{%
    \gdef#1{#2#5}\global\let#2\@empty \global\let#3\@empty % init
    \gdef#4{#2#5}\global\let#5\@empty % init
    \lst@AddToHook{Init}{\expandafter\lst@UseBasicClasses#3{}{}{}}%
    \if #8l\relax
        \lst@AddToHook{SetLanguage}{\def#1{#2#5}\let#2\@empty}%
    \fi
    \lst@InstallTest{#7}#1#2#4#5#6}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@UseFamily}
% looks for the optional class number, provides this member, \ldots
%    \begin{macrocode}
\gdef\lst@UseFamily#1{%
    \def\lst@family{#1}%
    \@ifnextchar[\lst@UseFamily@{\lst@UseFamily@[\lst@defaultclass]}}
\gdef\lst@UseFamily@[#1]{%
    \@tempcnta#1\relax
    \lst@ProvideFamily\lst@family
%    \end{macrocode}
% and builds control sequences with the help of |\lst@family| and |\@tempcnta|
%    \begin{macrocode}
    \lst@UseFamily@a
        {\lst@family\ifnum\@tempcnta=\@ne\else \the\@tempcnta \fi}}
\gdef\lst@UseFamily@a#1{%
    \expandafter\lst@UseFamily@b
       \csname lst@#1@list\expandafter\endcsname
       \csname lst@#1\expandafter\endcsname
       \csname lst@#1@also\expandafter\endcsname
       \csname lst@g#1\endcsname}
%    \end{macrocode}
% required for |\lst@MakeKeywords| and others (|#6|).
%    \begin{macrocode}
\gdef\lst@UseFamily@b#1#2#3#4#5\relax#6{\lstKV@XOptArg[]{#5}#6#1#2#3#4}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InstallKeywords}
% Now we take advance of the `optional' |\@tempcnta| construction above.
% Thus, we just insert |[\@ne]| as \meta{number} in the definitions of the keys.
%    \begin{macrocode}
\gdef\lst@InstallKeywords#1#2#3#4#5{%
    \lst@Key{#2}\relax
        {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeKeywords}%
    \lst@Key{more#2}\relax
        {\lst@UseFamily{#2}[\@ne]##1\relax\lst@MakeMoreKeywords}%
    \lst@Key{delete#2}\relax
        {\lst@UseFamily{#2}[\@ne]##1\relax\lst@DeleteKeywords}%
    \ifx\@empty#3\@empty\else
        \lst@Key{#3}{#4}{\@namedef{lst@#3}{##1}}%
    \fi
    \expandafter\lst@InstallFamily@
        \csname lst@#2@data\expandafter\endcsname
        \csname lst@#5\endcsname {#1}{#2}{#3}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@ProvideStyle}
% If the style macro |#1| is not defined, it becomes equivalent to |#2|.
%    \begin{macrocode}
\gdef\lst@ProvideStyle#1#2{%
    \ifx#1\@undefined \let#1#2%
    \else\ifx#1\relax \let#1#2\fi\fi}
%    \end{macrocode}
% \end{macro}
%
% Finally we define |\lst@MakeKeywords|, \ldots, |\lst@DeleteKeywords|---well,
% this finally takes lots of code lines. We begin with two helper.
%
% \begin{macro}{\lst@BuildClassList}
% After |#1| follows a comma separated list of keyword classes terminated by
% |,\relax,|, e.g.~|keywords2,emph1,\relax,|. For each \meta{item} in this
% list we \emph{append} the two macros |\lst@|\meta{item}|\lst@g|\meta{item}
% to |#1|.
%    \begin{macrocode}
\gdef\lst@BuildClassList#1#2,{%
    \ifx\relax#2\@empty\else
        \ifx\@empty#2\@empty\else
            \lst@lExtend#1{\csname lst@#2\expandafter\endcsname
                           \csname lst@g#2\endcsname}%
        \fi
        \expandafter\lst@BuildClassList\expandafter#1
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@DeleteClassesIn}
% deletes pairs of tokens, namely the arguments |#2#3| to the submacro.
%    \begin{macrocode}
\gdef\lst@DeleteClassesIn#1#2{%
    \expandafter\lst@DCI@\expandafter#1#2\relax\relax}
\gdef\lst@DCI@#1#2#3{%
    \ifx#2\relax
        \expandafter\@gobbletwo
    \else
%    \end{macrocode}
% If we haven't reached the end of the class list, we define a temporary macro
% which removes all appearences.
%    \begin{macrocode}
        \def\lst@temp##1#2#3##2{%
            \lst@lAddTo#1{##1}%
            \ifx ##2\relax\else
                \expandafter\lst@temp
            \fi ##2}%
        \let\@tempa#1\let#1\@empty
        \expandafter\lst@temp\@tempa#2#3\relax
    \fi
    \lst@DCI@#1}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@MakeKeywords}
% We empty some macros and make use of |\lst@MakeMoreKeywords|.
% Note that this and the next two definitions have the following arguments:
% \begin{macroargs}
% \item class list (in brackets)
% \item keyword list
% \item |\lst@|\meta{name}|@list|
% \item |\lst@|\meta{name}
% \item |\lst@|\meta{name}|@also|
% \item |\lst@g|\meta{name}
% \end{macroargs}
%    \begin{macrocode}
\gdef\lst@MakeKeywords[#1]#2#3#4#5#6{%
    \def#3{#4#6}\let#4\@empty \let#5\@empty
    \lst@MakeMoreKeywords[#1]{#2}#3#4#5#6}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@MakeMoreKeywords}
% First we append classes and keywords. Then we scan for special characters
% (= nonletters and nondigits) which must get `letter' or `digit' status for
% correct keyword detection.
% Note: The arguments |{}{}| are required if |#5| equals |\@empty|.
%    \begin{macrocode}
\gdef\lst@MakeMoreKeywords[#1]#2#3#4#5#6{%
    \lst@BuildClassList#3#1,\relax,%
    \lst@DefOther\lst@temp{,#2}\lst@lExtend#4\lst@temp
    \expandafter\lst@SpecialKeywordScan\expandafter
        #4\expandafter#5#5{}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@DeleteKeywords}
% We convert the keyword arguments via |\lst@MakeKeywords|, remove the classes
% and keywords, and scan for special characters.
%    \begin{macrocode}
\gdef\lst@DeleteKeywords[#1]#2#3#4#5#6{%
    \lst@MakeKeywords[#1]{#2}\@tempa\@tempb#5#6%
    \lst@DeleteClassesIn#3\@tempa
    \lst@DeleteKeysIn#4\@tempb
    \lst@SpecialKeywordScan#4#5{}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{specialscan}
% Since the `special keyword scan' is slow, we define a key to drop the scan.
%    \begin{macrocode}
\lst@Key{specialscan}t[t]{\lstKV@SetIf{#1}\lst@ifspecialscan}
%    \end{macrocode}
% But the scan is activated each language selection.
%    \begin{macrocode}
\lst@AddToHook{SelectLanguage}{\let\lst@ifspecialscan\iftrue}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@SpecialKeywordScan}
% The list of nonletters we are scanning for:
%    \begin{macrocode}
\lst@DefOther\lst@others{!"\#\%&'()*+-./0123456789:;<=>?[\]^`\{|\}~}
\global\let\lst@others\lst@others % init
%    \end{macrocode}
% First we define which characters already have a letter and/or digit status.
% The scan extends these two macros, which are eventually expanded inside
% |\lst@|\meta{name}|@also| with surrounding braces.
%    \begin{macrocode}
\gdef\lst@SpecialKeywordScan#1#2#3#4{%
    \lst@ifspecialscan
        \def\lst@ialsoletter{#3}\def\lst@ialsodigit{#4}%
        \expandafter\lst@SKS@\expandafter#1\lst@others\relax
        \edef#2{{\lst@ialsoletter}{\lst@ialsodigit}}%
    \fi}
%    \end{macrocode}
% Reaching the end of our `other' list we terminate the loop by gobbling two
% tokens after the latest |\fi|.
%    \begin{macrocode}
\gdef\lst@SKS@#1#2{%
    \ifx\relax#2%
        \expandafter\@gobbletwo
    \else
%    \end{macrocode}
% Otherwise we look for the character |#2|.
% Refer section \ref{iSubstringTests} on how we scan for substrings.
%    \begin{macrocode}
        \def\lst@temp##1#2##2##3\relax{%
            \ifx\@empty##2\else
                \def\lst@temp####1,#2####2####3\relax{%
%    \end{macrocode}
% If we've found |#2|, we scan for |,#2|---i.e.~we look whether |#2| starts
% a keyword or not.
% Then we are able to decide whether |#2| gets letter or digit status.
% Note that a digit need not to become a digit; we use a submacro to test it.
%    \begin{macrocode}
                    \ifx\@empty####2%
                        \lst@SKS@@#2%
                    \else
                        \lst@SKSAdd\lst@ialsoletter#2%
                    \fi}%
                \expandafter\lst@temp\expandafter,#1,#2\@empty\relax
            \fi}%
        \expandafter\lst@temp #1#2\@empty\relax
    \fi
    \lst@SKS@#1}
%    \end{macrocode}
% The special test for digits:
%    \begin{macrocode}
\gdef\lst@SKS@@#1{%
    \ifnum`#1<`0%
        \lst@SKSAdd\lst@ialsodigit#1%
    \else\ifnum`#1>`9%
        \lst@SKSAdd\lst@ialsodigit#1%
    \fi \fi}
%    \end{macrocode}
% Here we actually append the character, but only if it's necessary.
%    \begin{macrocode}
\gdef\lst@SKSAdd#1#2{%
    \def\lst@temp##1#2##2\relax{%
        \ifx\@empty##2\@empty \lst@lAddTo#1{#2}\fi}%
    \expandafter\lst@temp#1#2\relax}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Main families and classes}
%
% \begin{lstkey}{keywords}
% Defining the keyword family became very, very easy.
%    \begin{macrocode}
\lst@InstallFamily k{keywords}{keywordstyle}\bfseries{keywordstyle}{}ld
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{ndkeywords}
% Second order keywords use the same trick as |\lst@InstallKeywords|.
%    \begin{macrocode}
\lst@Key{ndkeywords}\relax
    {\lst@UseFamily{keywords}[\tw@]#1\relax\lst@MakeKeywords}%
\lst@Key{morendkeywords}\relax
    {\lst@UseFamily{keywords}[\tw@]#1\relax\lst@MakeMoreKeywords}%
\lst@Key{deletendkeywords}\relax
    {\lst@UseFamily{keywords}[\tw@]#1\relax\lst@DeleteKeywords}%
\lst@Key{ndkeywordstyle}\relax{\@namedef{lst@keywordstyle2}{#1}}%
%    \end{macrocode}
% \lsthelper{Dr.~Peter~Leibner}{1999/11/05}{undefined \lst@UseKeywords,
% Illegal parameter number (##1)} reported two bugs: |\lst@UseKeywords| and
% |##1| became |\lst@UseFamily| and |#1|.
% \end{lstkey}
%
% \begin{lstkey}{otherkeywords}
% Save the argument and define `keywords' when selecting the character table.
%    \begin{macrocode}
\lst@Key{otherkeywords}{}{\lst@DefActive\lst@otherkeywords{#1}}
\lst@AddToHook{SelectCharTable}
    {\expandafter\lst@DefineOtherKeywords\lst@otherkeywords,\relax,}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@DefineOtherKeywords}
% Iterates down the list.
%    \begin{macrocode}
\gdef\lst@DefineOtherKeywords#1,{%
    \ifx\relax#1\@empty\else
        \ifx\@empty#1\@empty\else
            \lst@CArg#1\relax\lst@CDef {}\lst@PrintOtherKeyword\@empty
        \fi
        \expandafter\lst@DefineOtherKeywords
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@PrintOtherKeyword}
% prints preceding characters, prepares the output and typesets the argument in
% keyword style.
%    \begin{macrocode}
\gdef\lst@PrintOtherKeyword#1\@empty{%
    \lst@PrintToken
    \begingroup
        \lst@modetrue \lsthk@TextStyle
        \let\lst@ProcessDigit\lst@ProcessLetter
        \let\lst@ProcessOther\lst@ProcessLetter
        \lst@lettertrue
        \lst@gkeywords@sty{#1\lst@PrintToken}%
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \paragraph{The emphasize family}
%
% \begin{aspect}{emph}
% is just one macro call here.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{emph}
\lst@InstallFamily e{emph}{emphstyle}\relax{empty}{}od
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \paragraph{\TeX\ control sequences}
%
% \begin{aspect}{tex}
% Here we check the last `other' processed token.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{tex}
%    \end{macrocode}
%    \begin{macrocode}
\lst@InstallKeywords{cs}{texcs}{texcsstyle}\relax{keywordstyle}
    {\ifx\lst@lastother\lstum@backslash
         \let\lst@thestyle\lst@texcsstyle
     \fi}
    ld
%    \end{macrocode}
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \paragraph{Compiler directives}
%
% \begin{aspect}{directives}
% \begin{lstkey}{directives}
% First some usual stuff.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{directives}
%    \end{macrocode}
%    \begin{macrocode}
\lst@NewMode\lst@CDmode
\lst@AddToHook{EOL}{\ifnum\lst@mode=\lst@CDmode \lst@LeaveMode \fi}
\lst@InstallKeywords{d}{directives}{directivestyle}\relax{keywordstyle}
    {\ifnum\lst@mode=\lst@CDmode
         \let\lst@thestyle\lst@directivestyle
     \fi}
    ld
%    \end{macrocode}
% If the user has defined directives, we redefine the character |#| (but save
% the old meaning before).
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}
    {\ifx\lst@directives\@empty\else
         \lst@DefSaveDef{`\#}\lsts@CCD
         {\lst@CalcLineLength
          \lst@ifmode\else
%    \end{macrocode}
% We enter `directive mode' only in column 1 (without setting |\lst@ifmode|
% true).
%    \begin{macrocode}
              \ifnum\@tempcnta=\z@
                  \lst@EnterMode{\lst@CDmode}{}%
              \fi
          \fi
          \ifnum\lst@mode=\lst@CDmode
%    \end{macrocode}
% We print |#| in directive style if and only if we are in column 1.
%    \begin{macrocode}
              \ifnum\@tempcnta=\z@
                  \lst@PrintToken
                  {\let\lst@currstyle\lst@directivestyle
                   \lsts@CCD\lst@PrintToken}%
              \else \lsts@CCD
              \fi
          \else \lsts@CCD
          \fi}%
     \fi}
%    \end{macrocode}
% We introduce a new string type (thanks to \lsthelper{R.~Isernhagen}
% {1999/11/12}{float isn't keyword in #include <float>}, which \ldots
%    \begin{macrocode}
\lst@AddTo\lst@stringtypes{,directive}
\lst@AddTo\lst@xstringtypes{,directive}
\gdef\lst@StringDM@directive#1#2#3\@empty{%
    \lst@CArg #2\relax\lst@CDef
        {}%
%    \end{macrocode}
% is active only in |\lst@CDmode|:
%    \begin{macrocode}
        {\let\lst@bnext\lst@CArgEmpty
         \ifnum\lst@mode=\lst@CDmode
             \def\lst@bnext{\lst@EnterMode#1{\lst@modetrue
                 \let\lst@currstyle\lst@stringstyle}}%
         \fi
         \lst@bnext}%
        \@empty
    \lst@CArg #3\relax\lst@CDef
        {}%
        {\let\lst@enext\lst@CArgEmpty
         \ifnum\lst@mode=#1%
             \let\lst@bnext\lst@EndXString
         \fi
         \lst@bnext}%
        \@empty}
\gdef\lst@EndXString#1\@empty{#1\lst@EndString}
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Restricted keywords}
%
% \begin{aspect}{html}
% Support HTML, what else?
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{html}
%    \end{macrocode}
%
% \begin{lstkey}{keywordsinside}
% Allocate a new mode and start the key.
%    \begin{macrocode}
\lst@NewMode\lst@insidemode
\lst@Key{keywordsinside}{}{\lstKV@TwoArg{#1}
    {\let\lst@DefInside\@empty
     \ifx\@empty##1\@empty\else \ifx\@empty##2\@empty\else
         \def\lst@DefInside{%
%    \end{macrocode}
% The redefinitions of the characters enter respectively leave the mode and
% execute the old meanings.
%    \begin{macrocode}
             \lst@DefSaveDef{`##1}\lsts@insideb
                 {\lst@ifmode\else \ifnum\lst@mode=\lst@insidemode\else
                      \lst@PrintToken
                      \lst@EnterMode\lst@insidemode{}%
                  \fi\fi
                  \lsts@insideb}%
             \lst@DefSaveDef{`##2}\lsts@insidee
                  {\ifnum\lst@mode=\lst@insidemode
                       \lsts@insidee \lst@PrintToken\lst@LeaveMode
                   \else
                       \expandafter\lsts@insidee
                   \fi}}%
     \fi\fi}}
%    \end{macrocode}
% The redefinition is done via \hookname{SelectCharTable}.
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}{\lst@DefInside}
%    \end{macrocode}
% We reset |\lst@thestyle| if necessary.
%    \begin{macrocode}
\lst@AddToHook{Output}
    {\ifx\lst@DefInside\@empty\else \ifx\lst@thestyle\lst@gkeywords@sty
         \ifnum\lst@mode=\lst@insidemode\else
             \let\lst@thestyle\@empty
         \fi
     \fi\fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{usekeywordsinside}
% Here we set |\lst@thestyle| to keyword style if necessary.
%    \begin{macrocode}
\lst@Key{usekeywordsinside}t[t]{\lstKV@SetIf{#1}\lst@ifusekeysinside}
\lst@AddToHook{Output}
    {\ifnum\lst@mode=\lst@insidemode \lst@ifusekeysinside\else
         \let\lst@thestyle\lst@gkeywords@sty
     \fi\fi}
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Keyword comments}
%
% \begin{aspect}{keywordcomments}
% includes both comment types and is possibly splitted into this and |dkcs|.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords,comments]{keywordcomments}
%    \end{macrocode}
%
% \begin{macro}{\lst@BeginKC}
% \begin{macro}{\lst@BeginKCS}
% Starting a keyword comment is easy, but \ldots
%    \begin{macrocode}
\lst@NewMode\lst@KCmode \lst@NewMode\lst@KCSmode
\gdef\lst@BeginKC{%
    \lst@token{}\lst@length\z@
    \lst@BeginComment\lst@KCmode\lst@commentstyle\@empty}
\gdef\lst@BeginKCS{%
    \lst@token{}\lst@length\z@
    \lst@BeginComment\lst@KCSmode\lst@commentstyle\@empty}
%    \end{macrocode}
% we must ensure that the comment starts after printing the comment delimiter
% since it is possibly a keyword. We'll assign |\lst@BeginKC|(|S|) to
% |\lst@KCpost|, which is executed and reset in \hookname{PostOutput}.
%    \begin{macrocode}
\lst@AddToHook{PostOutput}{\lst@KCpost \global\let\lst@KCpost\@empty}
\global\let\lst@KCpost\@empty
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@EndKC}
% leaves the comment mode before the comment delimiter is printed.
% This ruins the current character string in |\lst@token|.
% The solution: |\@gtempa| becomes\\
% \hbox{}\qquad |\lst@token{|\meta{current character string}|}\lst@length|^^A
%               \meta{current length}|\relax|\\
% and is executed after leaving the mode.
%    \begin{macrocode}
\gdef\lst@EndKC{%
    \xdef\@gtempa{%
        \noexpand\lst@token{\the\lst@token}%
        \noexpand\lst@length\the\lst@length\relax}%
    \aftergroup\@gtempa \lst@LeaveMode}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{keywordcomment}
% The delimiters must be identical here, thus we use |\lst@KCmatch|. Note the
% last argument |o| to |\lst@InstallKeywords|: The working test is installed
% in the \hookname{Output} hook and not in \hookname{DetectKeywords}.
% Otherwise we couldn't detect the ending delimiter since keyword detection is
% done if and only if mode changes are allowed.
%    \begin{macrocode}
\lst@InstallKeywords{kc}{keywordcomment}{}\relax{}
    {\ifnum\lst@mode=\lst@KCmode
         \edef\lst@temp{\the\lst@token}%
         \ifx\lst@temp\lst@KCmatch
             \lst@EndKC
         \fi
     \else
         \lst@ifmode\else
             \xdef\lst@KCmatch{\the\lst@token}%
             \global\let\lst@KCpost\lst@BeginKC
         \fi
     \fi}
    lo
%    \end{macrocode}
% \end{lstkey}
%
% \begin{lstkey}{keywordcommentsemicolon}
% The key simply stores the keywords.
%    \begin{macrocode}
\lst@Key{keywordcommentsemicolon}{}{\lstKV@ThreeArg{#1}%
    {\def\lst@KCAkeywordsB{##1}%
     \def\lst@KCAkeywordsE{##2}%
     \def\lst@KCBkeywordsB{##3}%
     \def\lst@KCkeywords{##1##2##3}}}
%    \end{macrocode}
% We define an appropriate semicolon if this keyword comment type is defined.
% Appropriate means that we leave any keyword comment mode if active.
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}
    {\ifx\lst@KCkeywords\@empty\else
        \lst@DefSaveDef{`\;}\lsts@EKC
            {\lst@ifletter \lst@Output\lst@letterfalse \fi
             \ifnum\lst@mode=\lst@KCmode \lst@EndComment \else
             \ifnum\lst@mode=\lst@KCSmode \lst@EndComment
             \fi \fi
             \lsts@EKC}%
     \fi}
%    \end{macrocode}
% The `working identifier' macros enter respectively leave comment mode.
%    \begin{macrocode}
\gdef\lst@KCAWorkB{%
    \lst@ifmode\else \global\let\lst@KCpost\lst@BeginKC \fi}
\gdef\lst@KCBWorkB{%
    \lst@ifmode\else \global\let\lst@KCpost\lst@BeginKCS \fi}
\gdef\lst@KCAWorkE{\ifnum\lst@mode=\lst@KCmode \lst@EndKC \fi}
%    \end{macrocode}
% Now we install the tests and initialize the given macros.
%    \begin{macrocode}
\lst@ProvideFamily@@
    \lst@KCAkeywordsB@list\lst@KCAkeywordsB \lst@KC@also
    \lst@gKCAkeywordsB@list\lst@gKCAkeywordsB \lst@KCAWorkB
    {kcb}owo % prefix, other key, working procedure, Output hook
\lst@ProvideFamily@@
    \lst@KCAkeywordsE@list\lst@KCAkeywordsE \lst@KC@also
    \lst@gKCAkeywordsE@list\lst@gKCAkeywordsE \lst@KCAWorkE
    {kce}owo
\lst@ProvideFamily@@
    \lst@KCBkeywordsB@list\lst@KCBkeywordsB \lst@KC@also
    \lst@gKCBkeywordsB@list\lst@gKCBkeywordsB \lst@KCBWorkB
    {kcs}owo
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Export of identifiers}
%
% \begin{aspect}{index}
% \begin{macro}{\lstindexmacro}
% One more `keyword' class.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{index}
\lst@InstallFamily w{index}{indexstyle}\lstindexmacro{indexstyle1}
    {\csname lst@indexstyle#1\expandafter\endcsname
         \expandafter{\the\lst@token}}
    od
\lst@UserCommand\lstindexmacro#1{\index{{\ttfamily#1}}}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{macro}
% \end{aspect}
%
% \begin{aspect}{procnames}
% \begin{lstkey}{procnamestyle}
% \begin{lstkey}{prockeywords}
% \begin{lstkey}{indexprocnames}
% The `idea' here is the usage of a global |\lst@ifprocname|, indicating a
% preceding `procedure keyword'. All the other is known stuff.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{procnames}
\gdef\lst@procnametrue{\global\let\lst@ifprocname\iftrue}
\gdef\lst@procnamefalse{\global\let\lst@ifprocname\iffalse}
\lst@AddToHook{Init}{\lst@procnamefalse}
\lst@AddToHook{DetectKeywords}
    {\lst@ifprocname
         \let\lst@thestyle\lst@procnamestyle
         \lst@ifindexproc \csname lst@gindex@sty\endcsname \fi
         \lst@procnamefalse
     \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@Key{procnamestyle}{}{\def\lst@procnamestyle{#1}}
\lst@Key{indexprocnames}{false}[t]{\lstKV@SetIf{#1}\lst@ifindexproc}
\lst@AddToHook{Init}
    {\lst@ifindexproc
         \@ifundefined{lst@indexstyle1}%
             {\@namedef{lst@indexstyle1}##1{}}%
             {}%
     \fi \fi}
%    \end{macrocode}
%    \begin{macrocode}
\lst@InstallKeywords w{procnamekeys}{}\relax{}
    {\global\let\lst@PNpost\lst@procnametrue}
    od
\lst@AddToHook{PostOutput}{\lst@PNpost\global\let\lst@PNpost\@empty}
\global\let\lst@PNpost\@empty % init
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{aspect}
%
%
% \section{More \lst-aspects and keys}
%
% \begin{lstkey}{basicstyle}
% There is no better place to define this key, I think.
%    \begin{macrocode}
%<*kernel>
\lst@Key{basicstyle}\relax{\def\lst@basicstyle{#1}}
\lst@AddToHook{Init}{\lst@basicstyle}
\lst@AddToHookExe{EmptyStyle}{\let\lst@basicstyle\@empty}
%</kernel>
%    \end{macrocode}
% \end{lstkey}
%
%
% \subsection{Styles and languages}
%
% \begin{aspect}{style}
% We begin with style definition and selection.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{style}
%    \end{macrocode}
%
% \begin{macro}{\lststylefiles}
% This macro is defined if and only if it's undefined yet.
%    \begin{macrocode}
\@ifundefined{lststylefiles}
    {\lst@UserCommand\lststylefiles{lststy0.sty}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstdefinestyle}
% \begin{macro}{\lst@definestyle}
% \begin{macro}{\lst@DefStyle}
% are defined in terms of |\lst@DefStyle|, which is defined via
% |\lst@DefDriver|.
%    \begin{macrocode}
\lst@UserCommand\lstdefinestyle{\lst@DefStyle\iftrue}
\lst@UserCommand\lst@definestyle{\lst@DefStyle\iffalse}
\gdef\lst@DefStyle{\lst@DefDriver{style}{sty}\lstset}
%    \end{macrocode}
% The `empty' style calls the initial empty hook \hookname{EmptyStyle}.
%    \begin{macrocode}
\global\@namedef{lststy@$}{\lsthk@EmptyStyle}
\lst@AddToHook{EmptyStyle}{}% init
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{style}
% is an application of |\lst@LAS|. We just specify the hook and an empty
% argument as `pre' and `post' code.
%    \begin{macrocode}
\lst@Key{style}\relax{%
    \lst@LAS{style}{sty}{[]{#1}}\lst@NoAlias\lststylefiles
        \lsthk@SetStyle
        {}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SetStyle}{}% init
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
% \begin{aspect}{language}
% Now we deal with commands used in defining and selecting programming
% languages, in particular with aliases.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{language}
%    \end{macrocode}
%
% \begin{macro}{\lstlanguagefiles}
% This macro is defined if and only if it's undefined yet.
%    \begin{macrocode}
\@ifundefined{lstdriverfiles}
    {\lst@UserCommand\lstlanguagefiles{lstlang0.sty}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstdefinelanguage}
% \begin{macro}{\lst@definelanguage}
% \begin{macro}{\lst@DefLang}
% are defined in terms of |\lst@DefLang|, which is defined via
% |\lst@DefDriver|.
%    \begin{macrocode}
\lst@UserCommand\lstdefinelanguage{\lst@DefLang\iftrue}
\lst@UserCommand\lst@definelanguage{\lst@DefLang\iffalse}
\gdef\lst@DefLang{\lst@DefDriver{language}{lang}\lstset}
%    \end{macrocode}
% Now we can provide the `empty' language.
%    \begin{macrocode}
\lstdefinelanguage{}{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{language}
% \begin{lstkey}{alsolanguage}
% is mainly an application of |\lst@LAS|.
%    \begin{macrocode}
\lst@Key{language}\relax{\lstKV@OptArg[]{#1}%
    {\lst@LAS{language}{lang}{[##1]{##2}}\lst@FindAlias\lstlanguagefiles
         \lsthk@SetLanguage
         {\lst@FindAlias[##1]{##2}%
          \let\lst@language\lst@malias
          \let\lst@dialect\lst@oalias}}}
%    \end{macrocode}
% Ditto, we simply don't execute |\lsthk@SetLanguage|.
%    \begin{macrocode}
\lst@Key{alsolanguage}\relax{\lstKV@OptArg[]{#1}%
    {\lst@LAS{language}{lang}{[##1]{##2}}\lst@FindAlias\lstlanguagefiles
         {}%
         {\lst@FindAlias[##1]{##2}%
          \let\lst@language\lst@malias
          \let\lst@dialect\lst@oalias}}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SetLanguage}{}% init
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lstalias}
% Now we concentrate on aliases and default dialects.
% |\lsta@|\meta{language}|$|\meta{dialect} and |\lsta@|\meta{language} contain
% the aliases of a particular dialect respectively a complete language.
% We'll use a |$|-character to separate a language name from its dialect.
%    \begin{macrocode}
\lst@UserCommand\lstalias{\@ifnextchar[\lstalias@\lstalias@@}
\gdef\lstalias@[#1]#2[#3]#4{\lst@NormedNameDef{lsta@#2$#1}{#4$#3}}
\gdef\lstalias@@#1#2{\lst@NormedNameDef{lsta@#1}{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{defaultdialect}
% We simply store the dialect.
%    \begin{macrocode}
\lst@Key{defaultdialect}\relax
    {\lstKV@OptArg[]{#1}{\lst@NormedNameDef{lstdd@##2}{##1}}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@FindAlias}
% Now we have to find a language. First we test for a complete language alias,
% then we set the default dialect if necessary.
%    \begin{macrocode}
\gdef\lst@FindAlias[#1]#2{%
    \lst@NormedDef\lst@oalias{#1}%
    \lst@NormedDef\lst@malias{#2}%
    \@ifundefined{lsta@\lst@malias}{}%
        {\edef\lst@malias{\csname lsta@\lst@malias\endcsname}}%
%    \end{macrocode}
%    \begin{macrocode}
    \ifx\@empty\lst@oalias \@ifundefined{lstdd@\lst@malias}{}%
        {\edef\lst@oalias{\csname lstdd@\lst@malias\endcsname}}%
    \fi
%    \end{macrocode}
% Now we are ready for an alias of a single dialect.
%    \begin{macrocode}
    \edef\lst@temp{\lst@malias $\lst@oalias}%
    \@ifundefined{lsta@\lst@temp}{}%
        {\edef\lst@temp{\csname lsta@\lst@temp\endcsname}}%
%    \end{macrocode}
% Finally we again set the default dialect---for the case of a dialect alias.
%    \begin{macrocode}
    \expandafter\lst@FindAlias@\lst@temp $}
\gdef\lst@FindAlias@#1$#2${%
    \def\lst@malias{#1}\def\lst@oalias{#2}%
    \ifx\@empty\lst@oalias \@ifundefined{lstdd@\lst@malias}{}%
        {\edef\lst@oalias{\csname lstdd@\lst@malias\endcsname}}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@RequireLanguages}
% This definition will be equivalent to |\lstloadlanguages|.
% First we put (the alias of) each requested and undefined language in a list.
% Then we input all necessary driver files (and give a warning), and load
% additionally required aspects.
%    \begin{macrocode}
\gdef\lst@RequireLanguages#1{%
    \lst@Require{language}{lang}{#1}\lst@FindAlias\lstlanguagefiles
    \ifx\lst@loadaspects\@empty\else
        \lst@RequireAspects\lst@loadaspects
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstloadlanguages}
% is the same as |\lst@RequireLanguages|.
%    \begin{macrocode}
\global\let\lstloadlanguages\lst@RequireLanguages
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{*Format definitions}
%
% \begin{aspect}{formats}
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{formats}
%    \end{macrocode}
%
% \begin{macro}{\lstformatfiles}
% This macro is defined if and only if it's undefined yet.
%    \begin{macrocode}
\@ifundefined{lstformatfiles}
    {\lst@UserCommand\lstformatfiles{lstfmt0.sty}}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstdefineformat}
% \begin{macro}{\lst@defineformat}
% \begin{macro}{\lst@DefFormat}
% are defined in terms of |\lst@DefFormat|, which is defined via
% |\lst@DefDriver|.
%    \begin{macrocode}
\lst@UserCommand\lstdefineformat{\lst@DefFormat\iftrue}
\lst@UserCommand\lst@defineformat{\lst@DefFormat\iffalse}
\gdef\lst@DefFormat{\lst@DefDriver{format}{fmt}\lst@UseFormat}
%    \end{macrocode}
% We provide the `empty' format.
%    \begin{macrocode}
\lstdefineformat{}{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{format}
% is an application of |\lst@LAS|. We just specify the hook as `pre' and an
% empty argument as  `post' code.
%    \begin{macrocode}
\lst@Key{format}\relax{%
    \lst@LAS{format}{fmt}{[]{#1}}\lst@NoAlias\lstformatfiles
        \lsthk@SetFormat
        {}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SetFormat}{\let\lst@fmtformat\@empty}% init
%    \end{macrocode}
% \end{lstkey}
%
%
% \paragraph{Helpers}
% Our goal is to define the yet unkown |\lst@UseFormat|. This definition
% will parse the user supplied format. We start with some general macros.
%
% \begin{macro}{\lst@fmtSplit}
% splits the content of the macro |#1| at |#2| in the preceding characters
% |\lst@fmta| and the following ones |\lst@fmtb|. |\lst@if| is false if and
% only if |#1| doesn't contain |#2|.
%    \begin{macrocode}
\gdef\lst@fmtSplit#1#2{%
    \def\lst@temp##1#2##2\relax##3{%
        \ifnum##3=\z@
            \ifx\@empty##2\@empty
                \lst@false
                \let\lst@fmta#1%
                \let\lst@fmtb\@empty
            \else
                \expandafter\lst@temp#1\relax\@ne
            \fi
        \else
            \def\lst@fmta{##1}\def\lst@fmtb{##2}%
        \fi}%
    \lst@true
    \expandafter\lst@temp#1#2\relax\z@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@IfNextCharWhitespace}
% is defined in terms of |\lst@IfSubstring|.
%    \begin{macrocode}
\gdef\lst@IfNextCharWhitespace#1#2#3{%
    \lst@IfSubstring#3\lst@whitespaces{#1}{#2}#3}
%    \end{macrocode}
% And here come all white space characters.
%    \begin{macrocode}
\begingroup
\catcode`\^^I=12\catcode`\^^J=12\catcode`\^^M=12\catcode`\^^L=12\relax%
\lst@DefActive\lst@whitespaces{\ ^^I^^J^^M}% ^^L removed
\global\let\lst@whitespaces\lst@whitespaces%
\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtIfIdentifier}
% tests the first character of |#1|
%    \begin{macrocode}
\gdef\lst@fmtIfIdentifier#1{%
    \ifx\relax#1\@empty
        \expandafter\@secondoftwo
    \else
        \expandafter\lst@fmtIfIdentifier@\expandafter#1%
    \fi}
%    \end{macrocode}
% against the `letters' |_|, |@|, |A|,\ldots,|Z| and |a|,\ldots,|z|.
%    \begin{macrocode}
\gdef\lst@fmtIfIdentifier@#1#2\relax{%
    \let\lst@next\@secondoftwo
    \ifnum`#1=`_\else
    \ifnum`#1<64\else
    \ifnum`#1<91\let\lst@next\@firstoftwo\else
    \ifnum`#1<97\else
    \ifnum`#1<123\let\lst@next\@firstoftwo\else
    \fi \fi \fi \fi \fi
    \lst@next}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtIfNextCharIn}
% is required for the optional \meta{exceptional characters}.
% The implementation is easy---refer section \ref{iSubstringTests}.
%    \begin{macrocode}
\gdef\lst@fmtIfNextCharIn#1{%
    \ifx\@empty#1\@empty \expandafter\@secondoftwo \else
                         \def\lst@next{\lst@fmtIfNextCharIn@{#1}}%
                         \expandafter\lst@next\fi}
\gdef\lst@fmtIfNextCharIn@#1#2#3#4{%
    \def\lst@temp##1#4##2##3\relax{%
        \ifx \@empty##2\expandafter\@secondoftwo
                 \else \expandafter\@firstoftwo \fi}%
    \lst@temp#1#4\@empty\relax{#2}{#3}#4}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtCDef}
% We need derivations of |\lst@CDef| and |\lst@CDefX|: we have to test the
% next character against the sequence |#5| of exceptional characters.
% These tests are inserted here.
%    \begin{macrocode}
\gdef\lst@fmtCDef#1#2#3#4#5#6#7{%
    \let#4#1%
    \ifx\@empty#2\@empty
        \def#1{\lst@fmtIfNextCharIn{#5}{#4}{#6#4#7}}%
    \else \ifx\@empty#3\@empty
        \def#1##1{%
            \ifx##1#2%
                \def\lst@next{\lst@fmtIfNextCharIn{#5}{#4##1}%
                                                      {#6#4#2#7}}%
            \else
                 \def\lst@next{#4##1}%
            \fi
            \lst@next}%
    \else
        \def#1{%
            \lst@IfNextCharsArg{#2#3}%
                {\lst@fmtIfNextCharIn{#5}{\expandafter#4\lst@eaten}%
                                         {#6#4#2#3#7}}%
                {\expandafter#4\lst@eaten}}%
    \fi \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtCDefX}
% The same but `drop input'.
%    \begin{macrocode}
\gdef\lst@fmtCDefX#1#2#3#4#5#6#7{%
    \let#4#1%
    \ifx\@empty#2\@empty
        \def#1{\lst@fmtIfNextCharIn{#5}{#4}{#6#7}}%
    \else \ifx\@empty#3\@empty
        \def#1##1{%
            \ifx##1#2%
                \def\lst@next{\lst@fmtIfNextCharIn{#5}{#4##1}%
                                                      {#6#7}}%
            \else
                 \def\lst@next{#4##1}%
            \fi
            \lst@next}%
    \else
        \def#1{%
            \lst@IfNextCharsArg{#2#3}%
                {\lst@fmtIfNextCharIn{#5}{\expandafter#4\lst@eaten}%
                                         {#6#7}}%
                {\expandafter#4\lst@eaten}}%
    \fi \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \paragraph{The parser}
% applies |\lst@fmtSplit| to cut a format definition into items, items into
% `input' and `output', and `output' into `pre' and 'post'. This should be
% clear if you are in touch with format definitions.
%
% \begin{macro}{\lst@UseFormat}
% Now we can start with the parser.
%    \begin{macrocode}
\gdef\lst@UseFormat#1{%
    \def\lst@fmtwhole{#1}%
    \lst@UseFormat@}
\gdef\lst@UseFormat@{%
    \lst@fmtSplit\lst@fmtwhole,%
%    \end{macrocode}
% We assign the rest of the format definition, \ldots
%    \begin{macrocode}
    \let\lst@fmtwhole\lst@fmtb
    \ifx\lst@fmta\@empty\else
%    \end{macrocode}
% split the item at the equal sign, and work on the item.
%    \begin{macrocode}
        \lst@fmtSplit\lst@fmta=%
        \ifx\@empty\lst@fmta\else
%    \end{macrocode}
% \begin{TODO}
% Insert |\let\lst@arg\@empty| |\expandafter\lst@FVConvert\lst@fmtb\@nil|
% |\let\lst@fmtb\lst@arg|.
% \end{TODO}
%    \begin{macrocode}
            \expandafter\lstKV@XOptArg\expandafter[\expandafter]%
                \expandafter{\lst@fmtb}\lst@UseFormat@b
        \fi
    \fi
%    \end{macrocode}
% Finally we process the next item if the rest is not empty.
%    \begin{macrocode}
    \ifx\lst@fmtwhole\@empty\else
        \expandafter\lst@UseFormat@
    \fi}
%    \end{macrocode}
% We make |\lst@fmtc| contain the preceding characters as a braced argument.
% To add more arguments, we first split the replacement tokens at the control
% sequence |\string|.
%    \begin{macrocode}
\gdef\lst@UseFormat@b[#1]#2{%
    \def\lst@fmtc{{#1}}\lst@lExtend\lst@fmtc{\expandafter{\lst@fmta}}%
    \def\lst@fmtb{#2}%
    \lst@fmtSplit\lst@fmtb\string
%    \end{macrocode}
% We append an empty argument or |\lst@fmtPre| with `|\string|-preceding'
% tokens as argument. We do the same for the tokens after |\string|.
%    \begin{macrocode}
    \ifx\@empty\lst@fmta
        \lst@lAddTo\lst@fmtc{{}}%
    \else
        \lst@lExtend\lst@fmtc{\expandafter
            {\expandafter\lst@fmtPre\expandafter{\lst@fmta}}}%
    \fi
    \ifx\@empty\lst@fmtb
        \lst@lAddTo\lst@fmtc{{}}%
    \else
        \lst@lExtend\lst@fmtc{\expandafter
            {\expandafter\lst@fmtPost\expandafter{\lst@fmtb}}}%
    \fi
%    \end{macrocode}
% Eventually we extend |\lst@fmtformat| appropriately. Note that |\lst@if|
% still indicates whether the replacement tokens contain |\string|.
%    \begin{macrocode}
    \expandafter\lst@UseFormat@c\lst@fmtc}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@UseFormat@c#1#2#3#4{%
    \lst@fmtIfIdentifier#2\relax
    {\lst@fmtIdentifier{#2}%
     \lst@if\else \PackageWarning{Listings}%
         {Cannot drop identifier in format definition}%
     \fi}%
    {\lst@if
         \lst@lAddTo\lst@fmtformat{\lst@CArgX#2\relax\lst@fmtCDef}%
     \else
         \lst@lAddTo\lst@fmtformat{\lst@CArgX#2\relax\lst@fmtCDefX}%
     \fi
     \lst@DefActive\lst@fmtc{#1}%
     \lst@lExtend\lst@fmtformat{\expandafter{\lst@fmtc}{#3}{#4}}}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}{\lst@fmtformat}
\global\let\lst@fmtformat\@empty
%    \end{macrocode}
% \end{macro}
%
%
% \paragraph{The formatting}
%
% \begin{macro}{\lst@fmtPre}
%    \begin{macrocode}
\gdef\lst@fmtPre#1{%
    \lst@PrintToken
    \begingroup
    \let\newline\lst@fmtEnsureNewLine
    \let\space\lst@fmtEnsureSpace
    \let\indent\lst@fmtIndent
    \let\noindent\lst@fmtNoindent
    #1%
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtPost}
%    \begin{macrocode}
\gdef\lst@fmtPost#1{%
    \global\let\lst@fmtPostOutput\@empty
    \begingroup
    \def\newline{\lst@AddTo\lst@fmtPostOutput\lst@fmtEnsureNewLine}%
    \def\space{\aftergroup\lst@fmtEnsurePostSpace}%
    \def\indent{\lst@AddTo\lst@fmtPostOutput\lst@fmtIndent}%
    \def\noindent{\lst@AddTo\lst@fmtPostOutput\lst@fmtNoindent}%
    \aftergroup\lst@PrintToken
    #1%
    \endgroup}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{Init}{\global\let\lst@fmtPostOutput\@empty}
\lst@AddToHook{PostOutput}
    {\lst@fmtPostOutput \global\let\lst@fmtPostOutput\@empty}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtEnsureSpace}
% \begin{macro}{\lst@fmtEnsurePostSpace}
%    \begin{macrocode}
\gdef\lst@fmtEnsureSpace{%
    \lst@ifwhitespace\else \expandafter\lst@ProcessSpace \fi}
\gdef\lst@fmtEnsurePostSpace{%
    \lst@IfNextCharWhitespace{}{\lst@ProcessSpace}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{lstkey}{fmtindent}
% \begin{macro}{\lst@fmtIndent}
% \begin{macro}{\lst@fmtNoindent}
%    \begin{macrocode}
\lst@Key{fmtindent}{20pt}{\def\lst@fmtindent{#1}}
\newdimen\lst@fmtcurrindent
\lst@AddToHook{InitVars}{\global\lst@fmtcurrindent\z@}
\gdef\lst@fmtIndent{\global\advance\lst@fmtcurrindent\lst@fmtindent}
\gdef\lst@fmtNoindent{\global\advance\lst@fmtcurrindent-\lst@fmtindent}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{lstkey}
%
% \begin{macro}{\lst@fmtEnsureNewLine}
% \begin{macro}{\lst@EnsuredNewLine}
%    \begin{macrocode}
\gdef\lst@fmtEnsureNewLine{%
    \ifx\lst@newlines\@empty
        \lst@AddTo\lst@newlines\lst@EnsuredNewLine
    \fi
    \lst@fmtignoretrue}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@EnsuredNewLine#1{%
    \lst@ifnewline\else
        \ifx#1\lst@NewLine\else \lst@NewLine \fi
    \fi
    #1}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{PostOutput}{\global\let\lst@ifnewline\iffalse}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@fmtignoretrue{\let\lst@fmtifignore\iftrue}
\gdef\lst@fmtignorefalse{\let\lst@fmtifignore\iffalse}
\lst@AddToHook{InitVars}{\lst@fmtignorefalse}
\lst@AddToHook{Output}{\lst@fmtignorefalse}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@fmtUseLostSpace}
%    \begin{macrocode}
\gdef\lst@fmtUseLostSpace{%
    \lst@ifnewline \kern\lst@fmtcurrindent \global\lst@lostspace\z@
    \else
        \ifdim\lst@lostspace>\z@ \lst@InsertLostSpace \fi
    \fi}
\lst@AddToHook{Init}
    {\lst@true
     \ifx\lst@fmtformat\@empty \ifx\lst@fmt\@empty \lst@false \fi\fi
     \lst@if
        \let\lst@UseLostSpace\lst@fmtUseLostSpace
        \let\lst@ProcessSpace\lst@fmtProcessSpace
     \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@fmtProcessSpace}
%    \begin{macrocode}
\gdef\lst@fmtProcessSpace{%
    \lst@ifletter
        \lst@Output\lst@letterfalse
        \lst@fmtifignore\else
            \lst@AppendOther\lst@outputspace
        \fi
    \else \lst@ifkeepspaces
        \lst@AppendOther\lst@outputspace
    \else \ifx\lst@newlines\@empty
        \lst@AppendSpecialSpace
    \else \ifnum\lst@length=\z@
            \global\advance\lst@lostspace\lst@width
            \global\advance\lst@pos\m@ne
        \else
            \lst@AppendSpecialSpace
        \fi
    \fi \fi \fi
    \lst@whitespacetrue}
%    \end{macrocode}
% \end{macro}
%
%
% \paragraph{Formatting identifiers}
%
% \begin{macro}{\lst@fmtIdentifier}
% We install a (keyword) test for the `format identifiers'.
%    \begin{macrocode}
\lst@InstallTest{f}
    \lst@fmt@list\lst@fmt \lst@gfmt@list\lst@gfmt
    \lst@gfmt@wp
    wd
\gdef\lst@fmt@list{\lst@fmt\lst@gfmt}\global\let\lst@fmt\@empty
\gdef\lst@gfmt@list{\lst@fmt\lst@gfmt}\global\let\lst@gfmt\@empty
%    \end{macrocode}
% The working procedure expands |\lst@fmt$|\meta{string} (and defines
% |\lst@PrintToken| to do nothing).
%    \begin{macrocode}
\gdef\lst@gfmt@wp{%
    \begingroup \let\lst@UM\@empty
    \let\lst@PrintToken\@empty
    \csname\lst@ @fmt$\the\lst@token\endcsname
    \endgroup}
%    \end{macrocode}
% This control sequence is probably defined as `working identifier'.
%    \begin{macrocode}
\gdef\lst@fmtIdentifier#1#2#3#4{%
    \lst@DefOther\lst@fmta{#2}\edef\lst@fmt{\lst@fmt,\lst@fmta}%
    \@namedef{\lst@ @fmt$\lst@fmta}{#3#4}}
%    \end{macrocode}
% |\lst@fmt$|\meta{identifier} expands to a |\lst@fmtPre|/|\lst@fmtPost|
% sequence defined by |#2| and |#3|.
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
%
% \subsection{Labels}
%
% \begin{aspect}{labels}
% \lsthelper{Rolf~Niepraschk}{1997/04/24}{labels} asked for labels.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{labels}
%    \end{macrocode}
%
% \begin{lstkey}{labelstyle}
% \begin{lstkey}{labelsep}
% \begin{lstkey}{labelstep}
% \begin{lstkey}{firstlabel}
% \begin{lstkey}{advancelabel}
% Definition of the keys.
%    \begin{macrocode}
\lst@Key{labelstyle}{}{\def\lst@labelstyle{#1}}
\lst@Key{labelsep}{10pt}{\def\lst@labelsep{#1}}
\lst@Key{labelstep}{0}{\def\lst@labelstep{#1\relax}}
\lst@Key{firstlabel}\relax{\def\lst@firstlabel{#1\relax}}
\lst@Key{advancelabel}\relax{\def\lst@advancelabel{#1\relax}}
\lst@AddToHook{EmptyStyle}{\let\lst@labelstep\z@}
%    \end{macrocode}
% \keyname{firstlabel} and \keyname{advancelabel} need no initialization since
% this is done via \hookname{PreSet}.
%    \begin{macrocode}
\lst@AddToHook{PreSet}
    {\let\lst@firstlabel\@undefined \let\lst@advancelabel\z@}
\lst@AddToHook{PreInit}
    {\ifx\lst@firstlabel\@undefined
         \let\lst@firstlabel\lst@firstline
     \fi}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}\end{lstkey}\end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@SetFirstLabel}
% \begin{macro}{\lst@SaveFirstLabel}
% \lsthelper{Boris~Veytsman}{1998/03/25}{continue line numbering: a.c b.c a.c}
% proposed to continue line numbers according to listing names.
% We define the label number of the first printing line here.
%    \begin{macrocode}
\gdef\lst@SetFirstLabel{%
    \ifx\lst@firstlabel\@undefined
        \@tempcnta 0\csname lstno@\lst@intname\endcsname\relax
        \ifnum\@tempcnta=\z@ \@tempcnta\@ne \else \lst@continuetrue \fi
        \advance\@tempcnta\lst@advancelabel
        \edef\lst@firstlabel{\the\@tempcnta\relax}%
    \fi}
%    \end{macrocode}
% The current label is stored in|\lstno@|\meta{name}. If the name is empty,
% we use a space instead, which leaves |\lstno@| undefined.
%    \begin{macrocode}
\gdef\lst@SaveFirstLabel{%
    \expandafter\xdef
        \csname lstno\ifx\lst@intname\@empty @ \else @\lst@intname\fi
        \endcsname{\the\c@lstlabel}}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{macro}{\c@lstlabel}
% This counter keeps the current label number. It advances \emph{before}
% the label is printed and not afterwards. Otherwise we have wrong
% references---reported by \lsthelper{Gregory~Van~Vooren}{1999/06/04}{reference
% one unit too large}.
%    \begin{macrocode}
\newcounter{lstlabel}% \global
\renewcommand*\thelstlabel{\@arabic\c@lstlabel}
\lst@AddToHook{EveryPar}
    {\global\advance\c@lstlabel\lst@labeladvance \lst@SkipOrPrintLabel}
\global\let\lst@labeladvance\@ne
%    \end{macrocode}
% We use it as current label to make line numbers referenced by |\ref|.
% This was proposed by \lsthelper{Boris~Veytsman}{1998/03/25}{make line numbers
% referenced via \label and \ref}.
%    \begin{macrocode}
\lst@AddToHook{Init}{\def\@currentlabel{\thelstlabel}}
%    \end{macrocode}
% The label number is initialized and we ensure correct line numbers for
% continued listings.
%    \begin{macrocode}
\lst@AddToHook{InitVars}
    {\global\c@lstlabel\lst@firstlabel
     \global\advance\c@lstlabel\lst@advancelabel
     \global\advance\c@lstlabel-\lst@labeladvance}
\lst@AddToHook{ExitVars}
    {\global\advance\c@lstlabel\lst@labeladvance}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@skiplabels}
% There are more things to do. We calculate how many lines must skip their
% label. The formula is
%	$$|\lst@skiplabels|=
%		\textrm{\emph{first printing line}}\bmod|\lst@labelstep|.$$
% Note that we use a nonpositive representative for |\lst@skiplabels|.
%    \begin{macrocode}
\newcount\lst@skiplabels % \global
\lst@AddToHook{Init}
    {\ifnum \z@>\lst@labelstep
         \let\lst@labeladvance\m@ne
         \edef\lst@labelstep{-\lst@labelstep}%
     \fi
     \ifnum \z@<\lst@labelstep
         \global\lst@skiplabels\lst@firstlabel
         \global\divide\lst@skiplabels\lst@labelstep
         \global\multiply\lst@skiplabels-\lst@labelstep
         \global\advance\lst@skiplabels\lst@firstlabel
         \ifnum\lst@skiplabels>\z@
             \global\advance\lst@skiplabels -\lst@labelstep
         \fi
%    \end{macrocode}
% If |\lst@labelstep| is nonpositive (in fact zero), no labels are printed:
%    \begin{macrocode}
     \else
         \let\lst@SkipOrPrintLabel\relax
     \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@SkipOrPrintLabel}
% But default is this. We use the fact that |\lst@skiplabels| is nonpositive.
% The counter advances every line and if that counter is zero, we print a line
% number and decrement the counter by |\lst@labelstep|.
%    \begin{macrocode}
\gdef\lst@SkipOrPrintLabel{%
    \ifnum\lst@skiplabels=\z@
        \global\advance\lst@skiplabels-\lst@labelstep\relax
        \llap{\normalfont\lst@labelstyle{\thelstlabel}%
              \kern\lst@labelsep}%
    \fi
    \global\advance\lst@skiplabels\@ne}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Line shape and line breaking}
%
% \begin{macro}{\lst@parshape}
% We define a default version of |\lst@parshape| for the case that the
% \aspectname{lineshape} aspect is not loaded. We use this parshape every line
% (in fact every paragraph). Furthermore we must repeat the parshape if we
% close a group level---or the shape is forgotten.
%    \begin{macrocode}
%<*kernel>
\def\lst@parshape{\parshape\@ne \z@ \linewidth}
\lst@AddToHookAtTop{EveryLine}{\lst@parshape}
\lst@AddToHookAtTop{EndGroup}{\lst@parshape}
%</kernel>
%    \end{macrocode}
% \end{macro}
%
% \begin{aspect}{lineshape}
% Our first aspect in this section.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{lineshape}
%    \end{macrocode}
%
% \begin{macro}{\lst@innerspread}
% \begin{macro}{\lst@outerspread}
% Just allocate these dimensions.
%    \begin{macrocode}
\newdimen\lst@innerspread \newdimen\lst@outerspread
%    \end{macrocode}
% They become zero if we make an exact box around the listing.
%    \begin{macrocode}
\lst@AddToHook{BoxUnsafe}{\lst@outerspread\z@ \lst@innerspread\z@}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{lstkey}{wholeline}
% \begin{lstkey}{linewidth}
% \begin{lstkey}{indent}
% \begin{lstkey}{spread}
% Usual stuff.
%    \begin{macrocode}
\lst@Key{wholeline}{false}[t]{\lstKV@SetIf{#1}\lst@ifwholeline}
\lst@Key{linewidth}\linewidth{\def\lst@linewidth{#1}}
\lst@AddToHook{PreInit}{\linewidth\lst@linewidth\relax}
%    \end{macrocode}
% Hook added after bug report from \lsthelper{Magnus~Lewis-Smith}{1999/08/06}
% {|\lstinline| indented} and \lsthelper{Jos\'e~Romildo~Malaquias}{2000/08/22}
% {|\lstinline| indented (wholeline)} respectively.
%    \begin{macrocode}
\lst@Key{indent}{\z@}{\def\lst@indent{#1}}
\lst@AddToHook{TextStyle}{\let\lst@indent\z@ \let\lst@ifwholeline\iftrue}
%    \end{macrocode}
% \lsthelper{Harald~Harders}{1998/03/30}{inner- and outerspread} had the idea
% of two spreads (inner and outer). We either divide the dimension by two or
% assign the two dimensions to inner- and outerspread.
%    \begin{macrocode}
\lst@Key{spread}{\z@,\z@}{\lstKV@CSTwoArg{#1}%
    {\lst@innerspread##1\relax
     \ifx\@empty##2\@empty
         \divide\lst@innerspread\tw@\relax
         \lst@outerspread\lst@innerspread
     \else
         \lst@outerspread##2\relax
     \fi}}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}\end{lstkey}\end{lstkey}
%
% \begin{macro}{\lst@parshape}
% The definition itself is easy.
%    \begin{macrocode}
\gdef\lst@parshape{%
    \parshape\@ne
        \ifodd\c@page -\lst@innerspread\else -\lst@outerspread\fi
        \linewidth}
%    \end{macrocode}
% We calculate the line width and (inner/outer) indent for a listing.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\advance\linewidth\lst@innerspread
     \advance\linewidth\lst@outerspread
     \advance\linewidth-\lst@indent\relax
     \advance\lst@innerspread-\lst@indent\relax
     \advance\lst@outerspread-\lst@indent\relax
     \lst@ifwholeline
         \advance\linewidth\@totalleftmargin
     \else
         \advance\lst@innerspread-\@totalleftmargin
         \advance\lst@outerspread-\@totalleftmargin
     \fi
     \if@twoside\else \lst@outerspread\lst@innerspread \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{lineskip}
% The introduction of this key is due to communication with
% \lsthelper{Andreas~Bartelt}{1997/09/11}{problem with redefed \parskip;
% \lstlineskip introduced}.
%    \begin{macrocode}
\lst@Key{lineskip}{\z@}{\def\lst@lineskip{#1\relax}}
\lst@AddToHook{Init}{\parskip\lst@lineskip}
%    \end{macrocode}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
% \begin{aspect}{breaklines}
% As usual \ldots
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[lineshape]{breaklines}
%    \end{macrocode}
%
% \begin{lstkey}{breaklines}
% \begin{lstkey}{breakindent}
% \begin{lstkey}{breakautoindent}
% \begin{lstkey}{prebreak}
% \begin{lstkey}{postbreak}
% we have no problems in announcing the keys.
%    \begin{macrocode}
\lst@Key{breaklines}{false}[t]{\lstKV@SetIf{#1}\lst@ifbreaklines}
\lst@Key{breakindent}{20pt}{\def\lst@breakindent{#1}}
\lst@Key{breakautoindent}{t}[t]{\lstKV@SetIf{#1}\lst@ifbreakautoindent}
\lst@Key{prebreak}{}{\def\lst@prebreak{#1}}
\lst@Key{postbreak}{}{\def\lst@postbreak{#1}}
%    \end{macrocode}
% We assign some different macros and (if necessary) suppress ``underfull
% |\hbox|'' messages (and use different pretolerance):
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\lst@ifbreaklines
         \hbadness\@M \pretolerance\@M
%    \end{macrocode}
% We use the normal parshape and the calculated |\lst@breakshape| (see below).
%    \begin{macrocode}
         \def\lst@parshape{\parshape\tw@
             \ifodd\c@page -\lst@innerspread\else -\lst@outerspread\fi
             \linewidth %
             \lst@breakshape}%
     \else
         \let\lst@discretionary\relax
     \fi}
\lst@AddToHook{OnNewLine}
    {\lst@ifbreaklines \lst@breakNewLine \fi}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}\end{lstkey}\end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\lst@discretionary}
% \begin{macro}{\lst@spacekern}
% Here comes the whole magic: We set a discretionary break after each `output
% unit'. However we redefine |\space| to be used inside |\discretionary| and
% use \hookname{EveryLine} hook.
%    \begin{macrocode}
\gdef\lst@discretionary{%
    \discretionary{\let\space\lst@spacekern\lst@prebreak}%
                  {\llap{\lsthk@EveryLine \kern\lst@breakcurrindent}%
                   \let\space\lst@spacekern\lst@postbreak}{}}
\lst@AddToHook{PostOutput}{\lst@discretionary}
\gdef\lst@spacekern{\kern\lst@width}
%    \end{macrocode}
% \begin{ALTERNATIVE}
% |\penalty\@M \hskip\z@ plus 1fil \penalty0\hskip\z@ plus-1fil| \emph{before}
% each `output unit' (i.e.~before |\hbox{...}| in the output macros) also break
% the lines as desired. But we wouldn't have |prebreak| and |postbreak|.
% \end{ALTERNATIVE}
% \end{macro}\end{macro}
%
% \begin{macro}{\lst@breakNewLine}
% We use \keyname{breakindent}, and additionally the current line indention
% (coming from white spaces at the beginning of the line) if `auto indent' is
% on.
%    \begin{macrocode}
\gdef\lst@breakNewLine{%
    \@tempdima\lst@breakindent\relax
    \lst@ifbreakautoindent \advance\@tempdima\lst@lostspace \fi
%    \end{macrocode}
% Now we calculate the inner/outer spread and line width of the wrapped part
%    \begin{macrocode}
    \@tempdimb\@tempdima \@tempdimc-\@tempdima
    \advance\@tempdima-\lst@innerspread
    \advance\@tempdimb-\lst@outerspread
    \advance\@tempdimc\linewidth
%    \end{macrocode}
% and store it in |\lst@breakshape|.
%    \begin{macrocode}
    \xdef\lst@breakshape{\noexpand\lst@breakcurrindent \the\@tempdimc}%
    \xdef\lst@breakcurrindent{%
        \noexpand\ifodd\c@page \the\@tempdima
        \noexpand\else \the\@tempdimb \noexpand\fi}}
%    \end{macrocode}
% \begin{TODO}
% We could speed this up by allocating three more (global) dimensions.
% \end{TODO}
% \end{macro}
%
% \begin{macro}{\lst@breakProcessOther}
% is the same as |\lst@ProcessOther| except that it also outputs the current
% token string. This inserts a potential linebreak point.
% Only the closing parenthesis uses this macro yet.
%    \begin{macrocode}
\gdef\lst@breakProcessOther#1{%
    \lst@ifletter \lst@Output\lst@letterfalse \fi
    \lst@AppendOther#1\lst@OutputOther}
\lst@AddToHook{SelectCharTable}
    {\lst@ifbreaklines \lst@Def{`)}{\lst@breakProcessOther)}\fi}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Frames}
%
% \begin{aspect}{frames}
% Another aspect.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[lineshape]{frames}
%    \end{macrocode}
%
% \begin{lstkey}{framerulewidth}
% \begin{lstkey}{framerulesep}
% \begin{lstkey}{frametextsep}
% \begin{lstkey}{framespread}
% \begin{lstkey}{frameshape}
% All keys store the argument.
%    \begin{macrocode}
\lst@Key{framerulewidth}{.4pt}{\def\lst@framerulewidth{#1}}
\lst@Key{framerulesep}{2pt}{\def\lst@framerulesep{#1}}
\lst@Key{frametextsep}{3pt}{\def\lst@frametextsep{#1}}
\lst@Key{framespread}{\z@}{\def\lst@framespread{#1}}
\lst@Key{frameshape}{}{\lstKV@FourArg{#1}%
    {\uppercase{\def\lst@frametshape{##1}}%
     \uppercase{\def\lst@framelshape{##2}}%
     \uppercase{\def\lst@framershape{##3}}%
     \uppercase{\def\lst@framebshape{##4}}%
     \let\lst@ifframeround\iffalse
     \lst@IfSubstring R\lst@frametshape{\let\lst@ifframeround\iftrue}{}%
     \lst@IfSubstring R\lst@framebshape{\let\lst@ifframeround\iftrue}{}%
     \def\lst@frame{##1##2##3##4}}}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}\end{lstkey}\end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{frameround}
% \begin{lstkey}{frame}
% We have to do some conversion here.
%    \begin{macrocode}
\lst@Key{frameround}\relax
    {\uppercase{\def\lst@frameround{#1}}%
     \expandafter\lstframe@\lst@frameround ffff\relax}
\global\let\lst@frameround\@empty
\lst@Key{frame}\relax
    {\def\lst@frame{#1}%
     \expandafter\lstframe@\lst@frameround ffff\relax}
%    \end{macrocode}
% Adding |t|, |r|, |b|, and |l| in case of their upper case versions makes
% later tests easier.
%    \begin{macrocode}
\gdef\lstframe@#1#2#3#4#5\relax{%
    \lst@IfSubstring T\lst@frame{\edef\lst@frame{t\lst@frame}}{}%
    \lst@IfSubstring R\lst@frame{\edef\lst@frame{r\lst@frame}}{}%
    \lst@IfSubstring B\lst@frame{\edef\lst@frame{b\lst@frame}}{}%
    \lst@IfSubstring L\lst@frame{\edef\lst@frame{l\lst@frame}}{}%
%    \end{macrocode}
% We now check top and bottom frame rules, \ldots
%    \begin{macrocode}
    \let\lst@frametshape\@empty \let\lst@framebshape\@empty
    \lst@frameCheck
        ltr\lst@framelshape\lst@frametshape\lst@framershape #4#1%
    \lst@frameCheck
        LTR\lst@framelshape\lst@frametshape\lst@framershape #4#1%
    \lst@frameCheck
        lbr\lst@framelshape\lst@framebshape\lst@framershape #3#2%
    \lst@frameCheck
        LBR\lst@framelshape\lst@framebshape\lst@framershape #3#2%
%    \end{macrocode}
% look for round corners \ldots
%    \begin{macrocode}
    \let\lst@ifframeround\iffalse
    \lst@IfSubstring R\lst@frametshape{\let\lst@ifframeround\iftrue}{}%
    \lst@IfSubstring R\lst@framebshape{\let\lst@ifframeround\iftrue}{}%
%    \end{macrocode}
% and define left and right frame shape.
%    \begin{macrocode}
    \let\lst@framelshape\@empty \let\lst@framershape\@empty
    \lst@IfSubstring L\lst@frame
        {\def\lst@framelshape{YY}}%
        {\lst@IfSubstring l\lst@frame{\def\lst@framelshape{Y}}{}}%
    \lst@IfSubstring R\lst@frame
        {\def\lst@framershape{YY}}%
        {\lst@IfSubstring r\lst@frame{\def\lst@framershape{Y}}{}}}
%    \end{macrocode}
% Now comes the macro used to define top and bottom frame shape.
% It extends the macro |#5|.
% The last two arguments show whether left and right corners are round.
% |#4| and |#6| are temporary macros.
% |#1#2#3| are the three characters we test for.
%    \begin{macrocode}
\gdef\lst@frameCheck#1#2#3#4#5#6#7#8{%
    \lst@IfSubstring #1\lst@frame
        {\if #7T\def#4{R}\else \def#4{Y}\fi}%
        {\def#4{N}}%
    \lst@IfSubstring #3\lst@frame
        {\if #8T\def#6{R}\else \def#6{Y}\fi}%
        {\def#6{N}}%
    \lst@IfSubstring #2\lst@frame{\edef#5{#5#4Y#6}}{}}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
% \begin{lstkey}{backgroundcolor}
% \lsthelper{Ralf~Imh\"auser}{2000/01/08}{coloured background} inspired this
% key.
%    \begin{macrocode}
\lst@Key{backgroundcolor}{}{\lstKV@OptArg[]{#1}%
    {\ifx\@empty##2\@empty
         \let\lst@bkgcolor\@empty
     \else
         \ifx\@empty##1\@empty
             \def\lst@bkgcolor{\color{##2}}%
         \else
             \def\lst@bkgcolor{\color[##1]{##2}}%
         \fi
     \fi}}
\lst@Key{framerulecolor}{}{\lstKV@OptArg[]{#1}%
    {\ifx\@empty##2\@empty
         \let\lst@framerulecolor\@empty
     \else
         \ifx\@empty##1\@empty
             \def\lst@framerulecolor{\color{##2}}%
         \else
             \def\lst@framerulecolor{\color[##1]{##2}}%
         \fi
     \fi}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{EveryLine}
    {\ifx\lst@bkgcolor\@empty\else
         \@tempdima\linewidth \advance\@tempdima\lst@indent
         \rlap{\begingroup \lst@bkgcolor
               \kern-\lst@indent\relax
               \color@block{\@tempdima}{\ht\strutbox}{\dp\strutbox}%
               \endgroup}%
     \fi}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@frameBkgBox}
%    \begin{macrocode}
\gdef\lst@frameBkgBox#1{%
    \ifx\lst@bkgcolor\@empty\else
        \setbox#1\hbox{\begingroup \lst@bkgcolor
                       \color@block{\wd#1}{\ht#1}{\dp#1}%
                       \endgroup \box#1}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameR}
% typesets right rules.
% We only need to iterate through |\lst@framershape|.
%    \begin{macrocode}
\gdef\lst@frameR{%
    \strut\smash{\expandafter\lst@frameR@\lst@framershape\relax}%
    \kern-\lst@framerulesep}
\gdef\lst@frameR@#1{%
    \ifx\relax#1\@empty\else
        \if #1Y\lst@framevrule \else \kern\lst@framerulewidth \fi
        \kern\lst@framerulesep
        \expandafter\lst@frameR@
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameL}
% Ditto left rules.
%    \begin{macrocode}
\gdef\lst@frameL{%
    \kern-\lst@framerulesep
    \strut\smash{\expandafter\lst@frameL@\lst@framelshape\relax}}
\gdef\lst@frameL@#1{%
    \ifx\relax#1\@empty\else
        \kern\lst@framerulesep
        \if#1Y\lst@framevrule \else \kern\lst@framerulewidth \fi
        \expandafter\lst@frameL@
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameH}
% This is the central macro used to draw top and bottom frame rules.
% The first argument is either |T| or |B| and the second contains the shape.
% We use |\@tempcntb| as size counter.
%    \begin{macrocode}
\gdef\lst@frameH#1#2{%
    \global\let\lst@framediml\z@ \global\let\lst@framedimr\z@
    \setbox\z@\hbox{}\@tempcntb\z@
    \expandafter\lst@frameH@\expandafter#1#2\relax\relax\relax
%    \end{macrocode}
% Now we add background if necessary.
%    \begin{macrocode}
    \ifx\lst@bkgcolor\@empty\else
        \@tempdima\lst@framediml
        \advance\@tempdima\lst@indent
        \setbox\z@\hbox{\rlap{%
            \kern-\@tempdima
            \kern-\ifodd\c@page\lst@innerspread\else\lst@outerspread\fi
            \kern-\lst@framehalfspread
%    \end{macrocode}
%    \begin{macrocode}
            \advance\@tempdima\linewidth
            \advance\@tempdima\lst@framedimr
            \advance\@tempdima\lst@framespread
            \begingroup \lst@bkgcolor
            \color@block{\@tempdima}{\ht\z@}{\dp\z@}%
            \endgroup}%
            \box\z@}%
    \fi}
\gdef\lst@frameH@#1#2#3#4{%
    \ifx\relax#4\@empty\else
        \lst@frameh \@tempcntb#1#2#3#4%
        \advance\@tempcntb\@ne
        \expandafter\lst@frameH@\expandafter#1%
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameh}
% This is the low-level macro used to draw top and bottom frame rules.
% It \emph{adds} one rule plus corners to box 0.
% The first parameter gives the size of the corners and the second is either
% |T| or |B|.
% |#3#4#5| is a left-to-right description of the frame and is in
% $\{$\texttt{Y,N,R}$\}\times\{$\texttt{Y,N}$\}\times\{$\texttt{Y,N,R}$\}$.
% We move to the correct horizontal position, set the left corner, the
% horizontal line, and the right corner.
%    \begin{macrocode}
\gdef\lst@frameh#1#2#3#4#5{%
    \lst@frameCalcDimA#1%
    \lst@ifframeround \@getcirc\@tempdima \fi
%    \end{macrocode}
%    \begin{macrocode}
    \setbox\z@=\hbox{\rlap{\copy\z@}%
      \setbox\z@=\hbox{%
        \begingroup \lst@framerulecolor
        \kern-\lst@indent
        \kern\ifodd\c@page -\lst@innerspread\else -\lst@outerspread\fi
        \kern-\lst@framehalfspread
%    \end{macrocode}
% |\lst@frameCorner| gets three arguments:
% |\llap|, |TL| or |BL|, and the corner type $\in\{$\texttt{Y,N,R}$\}$.
%    \begin{macrocode}
        \lst@frameCornerX\llap{#2L}#3%
        \ifdim\lst@framediml<\@tempdimb
            \xdef\lst@framediml{\the\@tempdimb}%
        \fi
        \begingroup
        \if#4Y\else\let\lst@framerulewidth\z@ \fi
        \vrule\@width\lst@framespread\@height\lst@framerulewidth
              \@depth\z@
        \vrule\@width\lst@indent\@height\lst@framerulewidth\@depth\z@
        \vrule\@width\linewidth\@height\lst@framerulewidth\@depth\z@
        \endgroup
        \lst@frameCornerX\rlap{#2R}#5%
        \ifdim\lst@framedimr<\@tempdimb
            \xdef\lst@framedimr{\the\@tempdimb}%
        \fi
        \kern-\lst@framehalfspread
        \endgroup}%
%    \end{macrocode}
%    \begin{macrocode}
    \if#2T\raise\dp\z@\copy\z@
     \else\lower\ht\z@\copy\z@ \fi}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameCornerX}
% typesets a single corner and returns |\@tempdimb|, the width of the corner.
%    \begin{macrocode}
\gdef\lst@frameCornerX#1#2#3{%
    \setbox\@tempboxa\hbox{\csname lst@frame\if#3RR\fi #2\endcsname}%
    \@tempdimb\wd\@tempboxa
    \if #3R%
        #1{\box\@tempboxa}%
    \else
        \if #3Y\expandafter#1\else
               \@tempdimb\z@ \expandafter\vphantom \fi
        {\box\@tempboxa}
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameCalcDimA}
% calculates an all over width; used by |\lst@frameh| and |\lst@frameInit|.
%    \begin{macrocode}
\gdef\lst@frameCalcDimA#1{%
            \@tempdima\lst@framerulesep
    \advance\@tempdima\lst@framerulewidth
    \multiply\@tempdima#1\relax
    \advance\@tempdima\lst@frametextsep
    \advance\@tempdima\lst@framerulewidth
    \multiply\@tempdima\tw@}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameInit}
% First we look which frame types we have on the left and on the right.
% We speed up things if there are no vertical rules.
%    \begin{macrocode}
\lst@AddToHook{Init}{\ifx\lst@frame\@empty\else \lst@frameInit \fi}
\gdef\lst@frameInit{%
    \ifx\lst@framelshape\@empty \let\lst@frameL\relax \fi
    \ifx\lst@framershape\@empty \let\lst@frameR\relax \fi
    \def\lst@framelr{%
        \begingroup \lst@framerulecolor
        \setbox\z@\hbox{\lst@frameL \kern\lst@frametextsep
                        \kern\lst@framehalfspread}%
        \lst@frameBkgBox\z@
        \llap{\box\z@ \kern\lst@indent}%
        \setbox\z@\hbox{\kern\lst@framehalfspread \kern\lst@frametextsep
                        \lst@frameR}%
        \lst@frameBkgBox\z@
        \rlap{\kern\linewidth \box\z@}%
        \endgroup}%
    \ifx\lst@frameL\relax \ifx\lst@frameR\relax
        \let\lst@framelr\strut
    \fi \fi
%    \end{macrocode}
% We determine the height and depth of a vertical rule \ldots
%    \begin{macrocode}
    \@tempdima\ht\strutbox \advance\@tempdima\lst@lineskip
    \@tempdimb\dp\strutbox \advance\@tempdimb\lst@lineskip
    \edef\lst@framevrule{%
        \vrule\noexpand\@height\the\@tempdima
              \noexpand\@depth\the\@tempdimb
              \noexpand\@width\noexpand\lst@framerulewidth}%
%    \end{macrocode}
% and two other dimensions.
%    \begin{macrocode}
    \@tempdima\lst@framerulewidth \divide\@tempdima\tw@
    \edef\lst@framerulehalfwidth{\the\@tempdima}%
    \@tempdima\lst@framespread\relax \divide\@tempdima\tw@
    \edef\lst@framehalfspread{\the\@tempdima}%
%    \end{macrocode}
% We adjust values to round corners if necessary.
%    \begin{macrocode}
    \lst@ifframeround
        \lst@frameCalcDimA\z@ \@getcirc\@tempdima
        \@tempdimb\@tempdima \divide\@tempdimb\tw@
        \advance\@tempdimb -\@wholewidth
        \edef\lst@frametextsep{\the\@tempdimb}%
        \edef\lst@framerulewidth{\the\@wholewidth}%
        \edef\lst@framerulehalfwidth{\the\@halfwidth}%
%    \end{macrocode}
%    \begin{macrocode}
        \lst@frameCalcDimA\@ne \@getcirc\@tempdima
        \@tempdimb\@tempdima \divide\@tempdimb\tw@
        \advance\@tempdimb -\tw@\@wholewidth
        \advance\@tempdimb -\lst@frametextsep
        \edef\lst@framerulesep{\the\@tempdimb}%
    \fi
%    \end{macrocode}
% Finally we typeset the rules (+ corners).
% We possibly need to insert negative |\vskip| to remove space between
% preceding text and top rule.
% \begin{TODO}
% Use |\vspace| instead of |\vskip|?
% \end{TODO}
%    \begin{macrocode}
    \expandafter\lst@frameH T\lst@frametshape
    \ifvoid\z@\else
        \par\parshape\z@
        \@tempdima-\baselineskip \advance\@tempdima\ht\z@
        \ifdim\prevdepth<\@cclvi\p@\else
            \advance\@tempdima\prevdepth
        \fi
        \ifdim\@tempdima<\z@
            \vskip\@tempdima\vskip\lineskip
        \fi
        \noindent\box\z@\par
        \lineskiplimit\maxdimen \lineskip\z@
    \fi
    \lst@frameSpreadV}
%    \end{macrocode}
% |\parshape\z@| ensures that the top rules aren't indented.
% The bug was reported by \lsthelper{Marcin~Kasperski}{1999/04/28}{top rules
% indented right inside itemize}.
%
% We typeset left and right rules every line.
%    \begin{macrocode}
\lst@AddToHook{EveryLine}{\lst@framelr}
\global\let\lst@framelr\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameExit}
% The rules at the bottom.
%    \begin{macrocode}
\lst@AddToHook{DeInit}{\ifx\lst@frame\@empty\else \lst@frameExit \fi}
\gdef\lst@frameExit{%
    \lst@frameSpreadV
    \lst@frameH B\lst@framebshape
    \ifvoid\z@\else
        \everypar{}\par\nointerlineskip\noindent\box\z@
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameSpreadV}
% sets rules for vertical spread.
%    \begin{macrocode}
\gdef\lst@frameSpreadV{%
    \ifdim\z@=\lst@framespread\else
        \everypar{}\par\lst@parshape\nointerlineskip\noindent
        \setbox\z@=\hbox{%
          \def\lst@framevrule{\vrule\@height\lst@framehalfspread
              \@depth\z@\@width\lst@framerulewidth}%
          \def\strut{\vrule\@height\lst@framehalfspread
              \@depth\z@\@width\z@}%
          \lst@framelr
          \kern-\lst@indent
          \ifx\lst@bkgcolor\@empty\else
          \begingroup \lst@bkgcolor
          \vrule\@height\lst@framehalfspread\@depth\z@\@width\linewidth
          \vrule\@height\lst@framehalfspread\@depth\z@\@width\lst@indent
          \endgroup
          \fi}%
        \rlap{\box\z@}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@frameTR}
% \begin{macro}{\lst@frameBR}
% \begin{macro}{\lst@frameBL}
% \begin{macro}{\lst@frameTL}
% These macros make a vertical and horizontal rule.
% The implicit argument |\@tempdima| gives the size of two corners and is
% provided by |\lst@frameh|.
%    \begin{macrocode}
\gdef\lst@frameTR{%
    \vrule\@width.5\@tempdima\@height\lst@framerulewidth\@depth\z@
    \kern-\lst@framerulewidth
    \raise\lst@framerulewidth\hbox{%
        \vrule\@width\lst@framerulewidth\@height\z@\@depth.5\@tempdima}}
\gdef\lst@frameBR{%
    \vrule\@width.5\@tempdima\@height\lst@framerulewidth\@depth\z@
    \kern-\lst@framerulewidth
    \vrule\@width\lst@framerulewidth\@height.5\@tempdima\@depth\z@}
\gdef\lst@frameBL{%
    \vrule\@width\lst@framerulewidth\@height.5\@tempdima\@depth\z@
    \kern-\lst@framerulewidth
    \vrule\@width.5\@tempdima\@height\lst@framerulewidth\@depth\z@}
\gdef\lst@frameTL{%
    \raise\lst@framerulewidth\hbox{%
        \vrule\@width\lst@framerulewidth\@height\z@\@depth.5\@tempdima}%
    \kern-\lst@framerulewidth
    \vrule\@width.5\@tempdima\@height\lst@framerulewidth\@depth\z@}
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}\end{macro}
%
% \begin{macro}{\lst@frameRoundT}
% \begin{macro}{\lst@frameRoundB}
% are helper macros to typeset round corners. We set height and depth to
% the visible parts of the circle font.
%    \begin{macrocode}
\gdef\lst@frameRoundT{%
    \setbox\@tempboxa\hbox{\@circlefnt\char\@tempcnta}%
    \ht\@tempboxa\lst@framerulewidth
    \box\@tempboxa}
\gdef\lst@frameRoundB{%
    \setbox\@tempboxa\hbox{\@circlefnt\char\@tempcnta}%
    \dp\@tempboxa\z@
    \box\@tempboxa}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@frameRTR}
% \begin{macro}{\lst@frameRBR}
% \begin{macro}{\lst@frameRBL}
% \begin{macro}{\lst@frameRTL}
% The round corners.
%    \begin{macrocode}
\gdef\lst@frameRTR{%
    \hb@xt@.5\@tempdima{\kern-\lst@framerulewidth
                           \kern.5\@tempdima \lst@frameRoundT \hss}}
\gdef\lst@frameRBR{%
    \hb@xt@.5\@tempdima{\kern-\lst@framerulewidth
    \advance\@tempcnta\@ne \kern.5\@tempdima \lst@frameRoundB \hss}}
\gdef\lst@frameRBL{%
    \advance\@tempcnta\tw@ \lst@frameRoundB
    \kern-.5\@tempdima}
\gdef\lst@frameRTL{%
    \advance\@tempcnta\thr@@\lst@frameRoundT
    \kern-.5\@tempdima}
%    \end{macrocode}
% \end{macro}\end{macro}\end{macro}\end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Macro use for make}
%
% \begin{aspect}{make}
% \begin{macro}{\lst@makemode}
% \begin{macro}{\lst@ifmakekey}
% We begin with preliminaries.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{make}
%    \end{macrocode}
%    \begin{macrocode}
\lst@NewMode\lst@makemode
\gdef\lst@makekeyfalse{\let\lst@ifmakekey\iffalse}
\gdef\lst@makekeytrue{\let\lst@ifmakekey\iftrue}
\global\lst@makekeyfalse
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{lstkey}{makemacrouse}
% adjusts the character table if necessary
%    \begin{macrocode}
\lst@Key{makemacrouse}f[t]{\lstKV@SetIf{#1}\lst@ifmakemacrouse}
\lst@AddToHook{SelectCharTable}
    {\lst@ifmakemacrouse
%    \end{macrocode}
% The opening |$(| prints preceding characters, enters a special mode and
% stores the two characters in |\lst@aside|.
%    \begin{macrocode}
         \lst@ReplaceInput{$(}{%
             \lst@PrintToken
             \lst@EnterMode\lst@makemode{\lst@makekeyfalse}%
             \def\lst@aside{\lst@ProcessOther\$\lst@ProcessOther(}}%
%    \end{macrocode}
% The closing parenthesis tests for the mode and either processes |)| as usual
% or outputs it right here (in keyword style if a keyword was between |$(| and
% |)|).
%    \begin{macrocode}
         \lst@ReplaceInput{)}{%
             \ifnum\lst@mode=\lst@makemode
                 \lst@PrintToken
                 \begingroup
                     \lst@ProcessOther)%
                     \lst@ifmakekey
                         \lst@gkeywords@sty\lst@OutputOther
                     \else
                         \lst@OutputOther
                     \fi
                 \endgroup
                 \lst@LeaveMode
             \else
                 \expandafter\lst@ProcessOther\expandafter)%
             \fi}%
%    \end{macrocode}
% If \keyname{makemacrouse} is off but the programming language Make is active
% then both characters |$(| are treated `other'.
%    \begin{macrocode}
     \else \ifx\lst@language\lst@make
         \lst@ReplaceInput{$(}{\lst@ProcessOther\$\lst@ProcessOther(}%
     \fi \fi}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@make{make}
\lst@AddToHook{InitVars}{\let\lst@aside\@empty}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@makePrintAside}
% does what the name says.
% The argument |#1| determines the printing style.
% This will be either |\relax| or |\lst@thestyle|.
% Because of recursion we must empty |\lst@aside| twice.
%    \begin{macrocode}
\gdef\lst@makePrintAside#1{%
    \ifx\lst@aside\@empty\else
        \begingroup
        \lst@token{}\lst@length\z@ \lst@aside \let\lst@aside\@empty
        #1{\lst@OutputOther}%
        \endgroup
        \let\lst@aside\@empty
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begingroup
% \noindent
% The remaining part is easy and important since we switch to
% |\lst@makekeytrue| if `make mode' is active and a keyword was found.
% Here we print all characters put aside.
%    \begin{macrocode}
\lst@AddToHook{OutputOther}{\lst@makePrintAside\relax}
\lst@AddToHook{Output}{%
    \ifnum\lst@mode=\lst@makemode
        \ifx\lst@thestyle\lst@gkeywords@sty
            \lst@makekeytrue
        \fi
    \fi
    \lst@makePrintAside\lst@thestyle}
%    \end{macrocode}
% \endgroup
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \section{Typesetting a listing}
%
% \begingroup
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
% \endgroup
% \begin{macro}{\lst@lineno}
% \begin{lstkey}{print}
% \begin{lstkey}{first}
% \begin{lstkey}{last}
% The `current line' counter and three keys.
%    \begin{macrocode}
\newcount\lst@lineno % \global
\lst@AddToHook{InitVars}{\global\lst@lineno\@ne}
%    \end{macrocode}
%    \begin{macrocode}
\lst@Key{print}{true}[t]{\lstKV@SetIf{#1}\lst@ifprint}
\lst@Key{first}\relax{\def\lst@firstline{#1\relax}}
\lst@Key{last}\relax{\def\lst@lastline{#1\relax}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{PreSet}
    {\let\lst@firstline\@ne \def\lst@lastline{9999999\relax}}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}\end{lstkey}\end{macro}
%
% \begin{lstkey}{continue}
% |\lst@ifcontinue| is undefined if the key is not used explicitly. But if
% undefined it becomes false before the \hookname{Init} hook is executed.
% The key is obsolete, I think. But |\lst@ifcontinue| isn't!
%    \begin{macrocode}
\lst@Key{continue}\relax[t]{\lstKV@SetIf{#1}\lst@ifcontinue}
\def\lst@continuetrue{\let\lst@ifcontinue\iftrue}
\def\lst@continuefalse{\let\lst@ifcontinue\iffalse}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{PreSet}{\let\lst@ifcontinue\@undefined}
\lst@AddToHook{PreInit}
    {\ifx\lst@ifcontinue\@undefined \lst@continuefalse \fi}
%    \end{macrocode}
% \end{lstkey}
%
%
% \subsection{Floats, boxes and captions}
%
% \begin{lstkey}{captionpos}
% \begin{lstkey}{abovecaptionskip}
% \begin{lstkey}{belowcaptionskip}
% \begin{lstkey}{label}
% \begin{lstkey}{title}
% \begin{lstkey}{caption}
% Some keys, \ldots
%    \begin{macrocode}
\lst@Key{captionpos}{t}{\def\lst@captionpos{#1}}
\lst@Key{abovecaptionskip}\smallskipamount{\def\lst@abovecaption{#1}}
\lst@Key{belowcaptionskip}\smallskipamount{\def\lst@belowcaption{#1}}
%    \end{macrocode}
% \lsthelper{Rolf~Niepraschk}{2000/01/10}{key: title} proposed \keyname{title}.
%    \begin{macrocode}
\lst@Key{label}\relax{\def\lst@label{#1}}
\lst@Key{title}\relax{\def\lst@title{#1}\let\lst@caption\relax}
\lst@Key{caption}\relax{\lstKV@OptArg[{#1}]{#1}%
    {\def\lst@caption{##2}\def\lst@@caption{##1}}%
     \let\lst@title\@empty}
\lst@AddToHook{PreSet}
    {\let\lst@caption\@empty \let\lst@@caption\@empty
     \let\lst@title\@empty \let\lst@label\@empty}
\lst@AddToHook{TextStyle}
    {\let\lst@caption\@empty \let\lst@@caption\@empty
     \let\lst@title\@empty \let\lst@label\@empty}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
% \begin{macro}{\thelstlisting}
% \begin{macro}{\lstlistingname}
% and how the caption numbers look like. I switched to |\@ifundefined|
% (instead of |\ifx| |\@undefined|) after an error report from
% \lsthelper{Denis~Girou}{1999/07/26}{incompatible if hyperref loaded before
% listings}.
%    \begin{macrocode}
\@ifundefined{thechapter}
    {\newcounter{lstlisting}
     \renewcommand\thelstlisting{\@arabic\c@lstlisting}}
    {\newcounter{lstlisting}[chapter]
     \renewcommand\thelstlisting
         {\ifnum \c@chapter>\z@ \thechapter.\fi \@arabic\c@lstlisting}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@UserCommand\lstlistingname{Listing}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lst@MakeCaption}
% We use $=$ |\refstepcounter| the listing counter if and only if
% |\lst@@caption| is not empty. Otherwise we ensure correct hyper-references,
% see |\lst@HRefStepCounter| below. We do this once a listing, namely at the
% top.
%    \begin{macrocode}
\def\lst@MakeCaption#1{%
    \ifx #1t%
        \ifx\lst@@caption\@empty\expandafter\lst@HRefStepCounter \else
                                \expandafter\refstepcounter
        \fi {lstlisting}%
        \ifx\lst@label\@empty\else \label{\lst@label}\fi
    \fi
%    \end{macrocode}
% We make a caption if and only if the caption is not empty and the user
% requested a caption at |#1| $\in\{\mathtt t,\mathtt b\}$.
%    \begin{macrocode}
    \ifx\lst@caption\@empty\else
        \lst@IfSubstring #1\lst@captionpos
            {\par\normalsize\normalfont
             \ifx\lst@title\@empty
                 \expandafter\@makecaption
             \else
                 \expandafter\lst@maketitle
             \fi
                {\noindent\lstlistingname
                 \ifx\lst@@caption\@empty\else~\thelstlisting\fi}%
                \lst@caption}{}%
    \fi}
%    \end{macrocode}
% I've inserted |\normalsize| after a bug report from
% \lsthelper{Andreas~Matthias}{2000/01/04}{caption affected by basicstyle}
% and moved it in front of |\@makecaption| after receiving another from
% \lsthelper{Sonja~Weidmann}{2000/02/01}{listings and caption packages
% not compatible}.
% \end{macro}
%
% \begin{macro}{\lst@maketitle}
% This definition depends on the existence of the \packagename{caption}
% package. The default ignores the arguments and uses |\lst@title| instead.
%    \begin{macrocode}
\def\lst@maketitle#1#2{%
    \vskip\abovecaptionskip
    \sbox\@tempboxa{\lst@title}%
    \ifdim \wd\@tempboxa >\hsize
        \lst@title\par
    \else
        \global \@minipagefalse
        \hb@xt@\hsize{\hfil\box\@tempboxa\hfil}%
    \fi
    \vskip\belowcaptionskip}
%    \end{macrocode}
% For \packagename{caption} $<$ 2.0 we drop the first argument and need to use
% some \packagename{caption} internals. Note that this is mainly a copy of
% |\as@makecaption|.
%    \begin{macrocode}
\AtBeginDocument{\@ifundefined{as@makecaption}{}{%
\def\lst@maketitle#1#2{%
  \vskip\abovecaptionskip
  \setlength{\as@captionwidth}{\linewidth}%
  \setlength{\leftskip}{\captionmargin}%
  \setlength{\rightskip}{\captionmargin}%
  \addtolength{\as@captionwidth}{-2\captionmargin}%
  \captionfont
  \sbox{\as@captionbox}{\lst@title}%
  \ifdim \wd\as@captionbox >\as@captionwidth
    \as@caption\ignorespaces\lst@title
  \else
    \as@shortcaption\ignorespaces\lst@title
  \fi
  \vskip\belowcaptionskip}%
}%
%    \end{macrocode}
% All this becomes much easier with \packagename{caption} 2.0: we modify the
% caption style locally and make this style \ldots
%    \begin{macrocode}
\@ifundefined{caption@make}{}{%
\def\lst@maketitle#1#2{%
    \begingroup
    \captionstyle{lsttitle}\@makecaption{}\lst@title
    \endgroup}
%    \end{macrocode}
% print only the title $=$ caption text.
%    \begin{macrocode}
\newcaptionstyle{lsttitle}{\caption@make{lsttitle}}%
\def\caption@@@lsttitle{\captiontext\par}%
}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@HRefStepCounter}
% This macro sets the listing number to a negative value since the user
% shouldn't refer to such a listing. If the \packagename{hyperref} package is
% present, we use `lstlisting' (argument from above) to hyperref to.
%    \begin{macrocode}
\def\lst@HRefStepCounter#1{%
    \c@lstlisting\lst@neglisting
    \advance\c@lstlisting\m@ne \xdef\lst@neglisting{\the\c@lstlisting}%
    \ifx\hyper@refstepcounter\@undefined\else
        \hyper@refstepcounter{#1}%
    \fi}
\gdef\lst@neglisting{\z@}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{boxpos}
% \begin{macro}{\lst@boxtrue}
% sets the vertical alignment of the (possibly) used box respectively indicates
% that a box is used.
%    \begin{macrocode}
\lst@Key{boxpos}{c}{\def\lst@boxpos{#1}}
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@boxtrue{\let\lst@ifbox\iftrue}
\let\lst@ifbox\iffalse
%    \end{macrocode}
% \end{macro}\end{lstkey}
%
% \begin{lstkey}{float}
% \begin{lstkey}{floatplacement}
% Just two keys.
%    \begin{macrocode}
\lst@Key{float}\relax[\lst@floatplacement]{\edef\lst@float{#1}}
\lst@Key{floatplacement}{tbp}{\def\lst@floatplacement{#1}}
\lst@AddToHook{PreSet}{\let\lst@float\relax}
\lst@AddToHook{TextStyle}{\let\lst@float\relax}
%    \end{macrocode}
% The float type |\ftype@lstlisting| is set according to whether the
% \packagename{float} package is loaded and whether \texttt{figure} and
% \texttt{table} floats are defined. This is done at |\begin{document}| to
% make the code independent of the order of package loading.
%    \begin{macrocode}
\AtBeginDocument{%
\@ifundefined{c@float@type}%
    {\edef\ftype@lstlisting{\ifx\c@figure\@undefined 1\else 4\fi}}
    {\edef\ftype@lstlisting{\the\c@float@type}%
     \addtocounter{float@type}{\value{float@type}}}%
}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
%
%
% \subsection{Init and EOL}
%
% \begin{lstkey}{aboveskip}
% \begin{lstkey}{belowskip}
% We define and initialize these keys and prevent extra spacing for `inline'
% listings (in particular if \packagename{fancyvrb} interface is active,
% problem reported by \lsthelper{Denis~Girou}{1999/08/03}{wrong spacing}).
%    \begin{macrocode}
\lst@Key{aboveskip}\medskipamount{\def\lst@aboveskip{#1}}
\lst@Key{belowskip}\medskipamount{\def\lst@belowskip{#1}}
\lst@AddToHook{TextStyle}
    {\let\lst@aboveskip\z@ \let\lst@belowskip\z@}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}
%
% \begin{macro}{\lst@Init}
% Begin a float if requested.
%    \begin{macrocode}
\def\lst@Init#1{%
    \begingroup
    \ifx\lst@float\relax\else
        \edef\@tempa{\noexpand\@float{lstlisting}[\lst@float]}%
        \expandafter\@tempa
    \fi
%    \end{macrocode}
% In restricted horizontal \TeX\ mode we switch to |\lst@boxtrue|.
% In that case we make appropriate box(es) around the listing.
%    \begin{macrocode}
    \ifhmode\ifinner \lst@boxtrue \fi\fi
    \lst@ifbox
        \lsthk@BoxUnsafe
        \hbox to\z@\bgroup
             $\if t\lst@boxpos \vtop
        \else \if b\lst@boxpos \vbox
        \else \vcenter \fi\fi
        \bgroup
    \else
        \par\penalty-50\relax
        \vspace\lst@aboveskip
    \fi
%    \end{macrocode}
% Moved |\vspace| after |\par|---or we can get an empty line atop listings.
% Bug reported by \lsthelper{Jim~Hefferon}{1999/08/27}{empty line before
% listings with |\lstinputlisting|}.
%
% Now make the top caption.
%    \begin{macrocode}
    \normalbaselines
    \abovecaptionskip\lst@abovecaption\relax
    \belowcaptionskip\lst@belowcaption\relax
    \lst@MakeCaption t%
%    \end{macrocode}
% Some initialization.
% I removed |\par\nointerlineskip| |\normalbaselines| after bug report from
% \lsthelper{Jim~Hefferon}{1999/08/23}{bad vertical space after lstlisting}.
% He reported the same problem as Aidan Philip Heerdegen (see below), but I
% immediately saw the bug here since Jim Hefferon used |\parskip|$\,\neq0$.
%    \begin{macrocode}
    \lsthk@PreInit \lsthk@Init
    \everypar{\lsthk@EveryLine\lsthk@EveryPar}%
    \lsthk@InitVars \lsthk@InitVarsBOL
%    \end{macrocode}
% The end of line character chr(13)=|^^M| controls the processing, see the
% definition of |\lst@MProcessListing| below.
% The argument |#1| is either |\relax| or |\lstenv@backslash|.
%    \begin{macrocode}
    \lst@Let{13}\lst@MProcessListing
    \let\lst@Backslash#1%
    \lst@EnterMode{\lst@Pmode}{\lst@SelectCharTable}}
%    \end{macrocode}
% Note: From version 0.19 on `listing processing' is implemented as an internal
% mode, namely a mode with special character table.
%    \begin{macrocode}
\lst@AddToHook{InitVars}
    {\rightskip\z@ \leftskip\z@ \parfillskip=\z@ plus 1fil
     \let\par\@@par}
\lst@AddToHook{EveryLine}{}% init
\lst@AddToHook{EveryPar}{}% init
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{showlines}
% lets the user control whether empty lines at the end of a listing are
% printed. But you know that if you've read the user's guide.
%    \begin{macrocode}
\lst@Key{showlines}f[t]{\lstKV@SetIf{#1}\lst@ifshowlines}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@DeInit}
% Output the remaining characters and update all things.
% Note that we remove two
%    \begin{macrocode}
\def\lst@DeInit{%
    \lst@PrintToken \lst@EOLUpdate
    \lst@RemoveNewLine\@empty
    \lst@RemoveNewLine{%
        \lst@ifshowlines
            \lst@TrackNewLines
        \else
            \setbox\@tempboxa\vbox{\lst@TrackNewLines}%
        \fi}%
    \par\removelastskip
    \everypar{}\lsthk@ExitVars \lsthk@DeInit
%    \end{macrocode}
% Making the bottom caption.
%    \begin{macrocode}
    \lst@MakeCaption b%
%    \end{macrocode}
% Close the boxes if necessary and make a rule to get the right width.
% I added the |\par\nointerlineskip| (and removed |\nointerlineskip| later
% again) after receiving a bug report from \lsthelper{Aidan~Philip~Heerdegen}
% {1999/07/23}{wrong vertical spacing}. |\everypar{}| is due to a bug report
% from \lsthelper{Sonja~Weidmann}{2000/02/01}{listings and caption packages
% not compatible}.
%    \begin{macrocode}
    \lst@ifbox
        \egroup $\hss \egroup
        \vrule\@width\lst@maxwidth\@height\z@\@depth\z@
    \else
        \par\penalty-50\vspace\lst@belowskip
    \fi
%    \end{macrocode}
% End the float if necessary.
%    \begin{macrocode}
    \ifx\lst@float\relax\else
        \expandafter\end@float
    \fi
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@maxwidth}
% is to be allocated, initialized and updated.
%    \begin{macrocode}
\newdimen\lst@maxwidth % \global
\lst@AddToHook{InitVars}{\global\lst@maxwidth\z@}
\lst@AddToHook{InitVarsEOL}
    {\ifdim\lst@currlwidth>\lst@maxwidth
         \global\lst@maxwidth\lst@currlwidth
     \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EOLUpdate}
% What do you think this macro does?
%    \begin{macrocode}
\def\lst@EOLUpdate{\lsthk@EOL \lsthk@InitVarsEOL \lsthk@InitVarsBOL}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@MProcessListing}
% This is what we have to do at EOL while processing a listing.
% We output all remaining characters and update the variables.
% We call |\lst@EndProcessListing| if the next line number is greater than the
% last printing line.
% Finally we gobble characters to come to the beginning of the next line.
%    \begin{macrocode}
\def\lst@MProcessListing{%
    \lst@PrintToken \lst@EOLUpdate \global\advance\lst@lineno\@ne
    \ifnum \lst@lineno>\lst@lastline
        \expandafter\lst@EndProcessListing
    \else
        \expandafter\lst@BOLGobble
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@EndProcessListing}
% Default definition is |\endinput|.
% This works for |\lstinputlisting|.
%    \begin{macrocode}
\let\lst@EndProcessListing\endinput
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{gobble}
% The key sets the number of characters to gobble each line.
%    \begin{macrocode}
\lst@Key{gobble}{0}{\def\lst@gobble{#1}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lst@BOLGobble}
% If the number is positive, we set a temporary counter and start a loop.
%    \begin{macrocode}
\def\lst@BOLGobble{%
    \ifnum\lst@gobble>\z@
        \@tempcnta\lst@gobble\relax
        \expandafter\lst@BOLGobble@
	\fi}
%    \end{macrocode}
% A nonpositive number terminates the loop (by not continuing).
% Note: This is not the macro just used in |\lst@BOLGobble|.
%    \begin{macrocode}
\def\lst@BOLGobble@@{%
    \ifnum\@tempcnta>\z@
        \expandafter\lst@BOLGobble@
    \fi}
%    \end{macrocode}
% If we gobble a backslash, we have to look whether this backslash ends an
% environment. Whether the coming characters equal e.g.~|end{lstlisting}|,
% we either end the environment or insert all just eaten characters after the
% `continue loop' macro.
%    \begin{macrocode}
\def\lstenv@BOLGobble@@{%
    \lst@IfNextChars\lstenv@endstring{\lstenv@End}%
    {\advance\@tempcnta\m@ne \expandafter\lst@BOLGobble@@\lst@eaten}}
%    \end{macrocode}
% Now comes the loop: if we read |\relax|, EOL or FF, the next operation is
% exactly the same token.
%    \begin{macrocode}
\def\lst@BOLGobble@#1{%
    \let\lst@next#1%
    \ifx \lst@next\relax\else
    \ifx \lst@next\lst@MProcessListing\else
    \ifx \lst@next\lst@ProcessFormFeed\else
%    \end{macrocode}
% Otherwise we use one of the two submacros.
%    \begin{macrocode}
    \ifx \lst@next\lstenv@backslash
        \let\lst@next\lstenv@BOLGobble@@
    \else
        \let\lst@next\lst@BOLGobble@@
%    \end{macrocode}
% Now we really gobble characters. A tabulator decreases the temporary counter
% by |\lst@tabsize| (and deals with remaining amounts, if necessary), \ldots
%    \begin{macrocode}
        \ifx #1\lst@ProcessTabulator
            \advance\@tempcnta-\lst@tabsize\relax
            \ifnum\@tempcnta<\z@
                \lst@length-\@tempcnta \lst@PreGotoTabStop
            \fi
%    \end{macrocode}
% whereas any other character decreases the counter by one.
%    \begin{macrocode}
        \else
            \advance\@tempcnta\m@ne
        \fi
    \fi \fi \fi \fi
    \lst@next}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{List of listings}
%
% \begin{macro}{\lst@name}
% \begin{macro}{\lst@intname}
% Each pretty-printing command values |\lst@intname| before setting any keys.
%    \begin{macrocode}
\lst@AddToHookExe{PreSet}{\global\let\lst@intname\@empty}
\lst@AddToHook{PreInit}{%
    \let\lst@arg\lst@intname \lst@ReplaceIn\lst@arg\lst@filenamerpl
    \global\let\lst@name\lst@arg}
%    \end{macrocode}
% Use of |\lst@ReplaceIn| removes a bug first reported by
% \lsthelper{Magne~Rudshaug}{1998/01/09}{_ and list of listings}.
% Here is the replacement list.
%    \begin{macrocode}
\def\lst@filenamerpl{_\textunderscore $\textdollar -\textendash}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{macro}{\l@lstlisting}
% prints one `lol' line.
%    \begin{macrocode}
\def\l@lstlisting#1#2{\@dottedtocline{1}{1.5em}{2.3em}{#1}{#2}}
%    \end{macrocode}
% We make a `lol' entry if the name is neither empty nor a single space.
% But we test |\lst@|(|@|)|caption| and |\lst@ifcontinue| first.
%    \begin{macrocode}
\lst@AddToHook{Init}
    {\ifx\lst@@caption\@empty
         \ifx\lst@caption\@empty
             \lst@ifcontinue\else
                 \ifx\lst@intname\@empty \else \def\lst@temp{ }%
                 \ifx\lst@intname\lst@temp \else
                     \addcontentsline{lol}{lstlisting}\lst@name
                 \fi\fi
             \fi
         \fi
     \else
         \addcontentsline{lol}{lstlisting}%
             {\protect\numberline{\thelstlisting}\lst@@caption}%
     \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstlistlistingname}
% contains simply the header name.
%    \begin{macrocode}
\lst@UserCommand\lstlistlistingname{Listings}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstlistoflistings}
% We make local adjustments and call |\tableofcontents|. This way
% redefinitions of that macro (e.g.~without any |\MakeUppercase| inside)
% also take effect on the list of listings.
%    \begin{macrocode}
\lst@UserCommand\lstlistoflistings{\bgroup
    \let\contentsname\lstlistlistingname
    \let\lst@temp\@starttoc \def\@starttoc##1{\lst@temp{lol}}%
    \tableofcontents \egroup}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Inline listings}\lstlabel{iInlineListings}
%
% \begin{macro}{\lstinline}
% In addition to |\lsthk@PreSet|, we use |boxpos=b| and flexiblecolumns.
% Finally we check the delimiter.
% I've inserted |\leavevmode| after bug report from \lsthelper{Michael~Weber}
% {1999/12/16}{wrong spacing in list environments}.
%    \begin{macrocode}
\newcommand\lstinline[1][]{%
    \leavevmode\hbox\bgroup
        \def\lst@boxpos{b}\let\lst@ifflexible\iftrue
        \lsthk@PreSet\lstset{#1}%
        \lsthk@TextStyle \lst@Init\relax
        \everypar{}\let\lsthk@Endgroup\@empty
        \lstinline@}
\def\lstinline@#1{\lst@IfNextCharActive{\lst@InlineM#1}{\lst@InlineJ#1}}
\lst@AddToHook{TextStyle}{}% init
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHook{SelectCharTable}{\lst@inlinechars}
\global\let\lst@inlinechars\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InlineM}
% \begin{macro}{\lst@InlineJ}
% treat the cases of `normal' inlines and inline listings inside an argument.
% In the first case the given character ends the inline listing and EOL within
% such a listing immediately ends it and produces an error message.
%    \begin{macrocode}
\def\lst@InlineM#1{\gdef\lst@inlinechars{%
    \lst@Def{`#1}{\lst@DeInit\egroup \global\let\lst@inlinechars\@empty}%
    \lst@Def{13}{\lst@DeInit\egroup \global\let\lst@inlinechars\@empty
        \PackageError{Listings}{lstinline ended by EOL}\@ehc}}%
    \lst@inlinechars}
%    \end{macrocode}
% In the other case we get all characters up to |#1|, make these characters
% active, execute (typeset) them and end the listing (all via temporary macro).
% That's all about it.
%    \begin{macrocode}
\def\lst@InlineJ#1{%
    \def\lst@temp##1#1{%
        \let\lst@arg\@empty \lst@InsideConvert{##1}\lst@arg
        \lst@DeInit\egroup}%
    \lst@temp}
%    \end{macrocode}
% \end{macro}\end{macro}
%
%
% \subsection{The input command}\lstlabel{iTheInputCommand}
%
% \begin{macro}{\lstinputlisting}
% inputs the listing or asks the user for a new file name.
%    \begin{macrocode}
\newcommand\lstinputlisting[2][]{%
    \def\lst@set{#1}%
    \IfFileExists{#2}%
        {\lst@InputListing{#2}}%
        {\filename@parse{#2}%
         \edef\reserved@a{\noexpand\lst@MissingFileError
             {\filename@area\filename@base}%
             {\ifx\filename@ext\relax tex\else\filename@ext\fi}}%
         \reserved@a}%
    \@doendpe \@newlistfalse \ignorespaces}
%    \end{macrocode}
% We use |\@doendpe| to remove indention at the beginning of the next
% line---except there is an empty line after |\lstinputlisting|. Bug was
% reported by \lsthelper{David~John~Evans}{1999/06/08}{indention after
% listings} and \lsthelper{David~Carlisle}{1999/06/08}{LaTeX `display
% environment' code} pointed me to the solution.
% \end{macro}
%
% \begin{macro}{\lst@MissingFileError}
% is a derivation of \LaTeX's |\@missingfileerror|:
%    \begin{macrocode}
\def\lst@MissingFileError#1#2{%
    \typeout{^^J! Package Listings Error: File `#1.#2' not found.^^J^^J%
        Type X to quit or <RETURN> to proceed,^^J%
        or enter new name. (Default extension: #2)^^J}%
    \message{Enter file name: }%
    {\endlinechar\m@ne \global\read\m@ne to\@gtempa}%
%    \end{macrocode}
% Typing |x| or |X| exits.
%    \begin{macrocode}
    \ifx\@gtempa\@empty \else %
        \def\reserved@a{x}\ifx\reserved@a\@gtempa\batchmode\@@end\fi
        \def\reserved@a{X}\ifx\reserved@a\@gtempa\batchmode\@@end\fi
%    \end{macrocode}
% In all other cases we try the new file name.
%    \begin{macrocode}
        \filename@parse\@gtempa %
        \edef\filename@ext{%
            \ifx\filename@ext\relax#2\else\filename@ext\fi}%
        \edef\reserved@a{\noexpand\IfFileExists %
                {\filename@area\filename@base.\filename@ext}%
            {\noexpand\lst@InputListing %
                {\filename@area\filename@base.\filename@ext}}%
            {\noexpand\lst@MissingFileError
                {\filename@area\filename@base}{\filename@ext}}}%
        \expandafter\reserved@a %
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@InputListing}
% The one and only argument is the file name, but we have the `implicit'
% argument |\lst@set|. Note that |\lst@Init| takes |\relax| as argument.
%    \begin{macrocode}
\def\lst@InputListing#1{%
    \begingroup
    \lsthk@PreSet \gdef\lst@intname{#1}%
    \expandafter\lstset\expandafter{\lst@set}%
    \lst@ifprint
        \lst@Init\relax \let\lst@gobble\z@
        \lst@SkipToFirst \input{#1}\lst@DeInit
    \else
        \begin{center}%
        \footnotesize --- Listing of #1 has been skipped. ---
        \end{center}%
    \fi
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@SkipToFirst}
% The end of line character either processes the listing or is responsible for
% dropping lines up to first printing line.
%    \begin{macrocode}
\def\lst@SkipToFirst{%
    \ifnum \lst@lineno<\lst@firstline
%    \end{macrocode}
% We drop the input and redefine the end of line characters.
%    \begin{macrocode}
        \lst@BeginDropInput\lst@Pmode
        \lst@Let{13}\lst@MSkipToFirst
        \lst@Let{10}\lst@MSkipToFirst
    \else
        \expandafter\lst@BOLGobble
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@MSkipToFirst}
% We just look whether to drop more lines or to leave the mode which restores
% the definition of chr(13) and chr(10).
%    \begin{macrocode}
\def\lst@MSkipToFirst{%
    \global\advance\lst@lineno\@ne
    \ifnum \lst@lineno=\lst@firstline
        \lst@LeaveMode \global\let\lst@newlines\@empty
        \lsthk@InitVarsBOL
        \expandafter\lst@BOLGobble
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{The environment}
%
%
% \subsubsection{Low-level processing}
%
% \begin{macro}{\lstenv@DroppedWarning}
% gives a warning if characters have been dropped.
%    \begin{macrocode}
\def\lstenv@DroppedWarning{%
    \ifx\lst@dropped\@undefined\else
        \PackageWarning{Listings}{Text dropped after begin of listing}%
    \fi}
\let\lst@dropped\@undefined % init
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@Process}
% We execute `|\lstenv@ProcessM|' or |\lstenv@ProcessJ| according to whether we
% find an active EOL or a nonactive |^^J|.
%    \begin{macrocode}
\begingroup \lccode`\~=`\^^M\lowercase{%
\gdef\lstenv@Process#1{%
    \ifx~#1%
%    \end{macrocode}
% We make no extra |\lstenv@ProcessM| definition since there is nothing to do
% at all if we've found an active EOL.
%    \begin{macrocode}
        \lstenv@DroppedWarning \let\lst@next\lst@SkipToFirst
    \else\ifx^^J#1%
        \lstenv@DroppedWarning \let\lst@next\lstenv@ProcessJ
    \else
        \let\lst@dropped#1\let\lst@next\lstenv@Process
    \fi \fi
    \lst@next}
}\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@ProcessJ}
% Now comes the horrible scenario: a listing inside an argument. We've
% already worked in section \ref{iApplicationsTo} for this. Here we must get
% all characters up to `end environment'. We distinguish the cases `command
% fashion' and `true environment'.
%    \begin{macrocode}
\def\lstenv@ProcessJ{%
    \let\lst@arg\@empty
    \ifx\@currenvir\lstenv@name
        \expandafter\lstenv@ProcessJEnv
    \else
%    \end{macrocode}
% The first case is pretty simple: The code is terminated by
% |\end|\meta{name of environment}. Thus we expand that control sequence
% before defining a temporary macro, which gets the listing and does all
% the rest. Back to the definition of |\lstenv@ProcessJ| we call the
% temporary macro after expanding |\fi|.
%    \begin{macrocode}
        \expandafter\def\expandafter\lst@temp\expandafter##1%
            \csname end\lstenv@name\endcsname
                {\lst@InsideConvert{##1}\lstenv@ProcessJ@}%
        \expandafter\lst@temp
    \fi}
%    \end{macrocode}
% We must append an active backslash and the `end string' to |\lst@arg|. So all
% (in fact most) other processing won't notice that the code has been inside
% an argument. But the EOL character is chr(10)=|^^J| now and not chr(13).
%    \begin{macrocode}
\begingroup \lccode`\~=`\\\lowercase{%
\gdef\lstenv@ProcessJ@{%
    \lst@lExtend\lst@arg
        {\expandafter\ \expandafter~\lstenv@endstring}%
    \catcode10=\active \lst@Let{10}\lst@MProcessListing
%    \end{macrocode}
% We execute |\lst@arg| to typeset the listing.
%    \begin{macrocode}
    \lst@SkipToFirst \lst@arg}
}\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@ProcessJEnv}
% The `true environment' case is more complicated. We get all characters up to
% an |\end| and the following argument. If that equals |\lstenv@name|, we have
% found the end of environment and start typesetting.
%    \begin{macrocode}
\def\lstenv@ProcessJEnv#1\end#2{\def\lst@temp{#2}%
    \ifx\lstenv@name\lst@temp
        \lst@InsideConvert{#1}%
        \expandafter\lstenv@ProcessJ@
    \else
%    \end{macrocode}
% Otherwise we append the characters including the eaten |\end| and the eaten
% argument to current |\lst@arg|. And we look for the end of environment again.
%    \begin{macrocode}
        \lst@InsideConvert{#1\\end\{#2\}}%
        \expandafter\lstenv@ProcessJEnv
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@backslash}
% Coming to a backslash we either end the listing or process a backslash and
% insert the eaten characters again.
%    \begin{macrocode}
\def\lstenv@backslash{%
    \lst@IfNextChars\lstenv@endstring
        {\lstenv@End}%
        {\expandafter\lsts@backslash \lst@eaten}}%
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@End}
% This macro has just been used and terminates a listing environment:
% We call the `end environment' macro using |\end| or as a command.
%    \begin{macrocode}
\def\lstenv@End{%
    \ifx\@currenvir\lstenv@name
        \edef\lst@next{\noexpand\end{\lstenv@name}}%
    \else
        \def\lst@next{\csname end\lstenv@name\endcsname}%
    \fi
    \lst@next}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{\cs{lstnewenvironment}}
%
% \begin{macro}{\lstnewenvironment}
% Now comes the main command. We define undefined environments only. On the
% parameter text |#1#2#| (in particular the last sharp) see the paragraph
% following example 20.5 on page 204 of `The \TeX book'.
%    \begin{macrocode}
\lst@UserCommand\lstnewenvironment#1#2#{%
    \@ifundefined{#1}%
        {\lst@false \let\lst@arg\@empty
         \lst@FVConvert{#1}\@nil
         \expandafter\lstnewenvironment@\lst@arg{#1}{#2}}%
        {\PackageError{Listings}{Environment `#1' already defined}\@eha
         \@gobbletwo}}
\def\@tempa#1#2#3{%
\gdef\lstnewenvironment@##1##2##3##4##5{%
%    \end{macrocode}
% A lonely `end environment' produces an error.
%    \begin{macrocode}
    \global\@namedef{end##2}{\lstenv@Error{##2}}%
%    \end{macrocode}
% The `main' environment macro defines the environment name for later use and
% calls a submacro getting all arguments. We open a group and make EOL active.
% This ensures |\@ifnextchar[| not to read characters of the listing---it reads
% the active EOL instead.
%    \begin{macrocode}
    \global\@namedef{##2}{\def\lstenv@name{##2}%
        \begingroup \catcode\active=\active \csname##2@\endcsname}%
%    \end{macrocode}
% The submacro is defined via |\new@command|. We misuse |\l@ngrel@x| to make
% the definition |\global|. First we execute |##4|$=$\meta{begin code}.
%    \begin{macrocode}
    \let\l@ngrel@x\global
    \expandafter\new@command\csname##2@\endcsname##3%
        {\lsthk@PreSet ##4%
%    \end{macrocode}
% The definition of the terminating string (|end{lstlisting}| or
% |endlstlisting|, for example):
%    \begin{macrocode}
         \ifx\@currenvir\lstenv@name
             \def\lstenv@endstring{#1#2##1#3}%
         \else
             \def\lstenv@endstring{#1##1}%
         \fi
%    \end{macrocode}
% We redefine (locally) `end environment' since ending is legal now.
% Note that the redefinition also works inside a \TeX\ comment line.
%    \begin{macrocode}
         \@namedef{end##2}{\lst@DeInit ##5\endgroup
                          \@doendpe \@ignoretrue}%
%    \end{macrocode}
% |\@doendpe| again removes the indention problem.
% Finally we start the processing.
%    \begin{macrocode}
         \lst@Init\lstenv@backslash
         \let\lst@EndProcessListing\lstenv@SkipToEnd
         \lst@ifprint
             \expandafter\lstenv@Process
         \else
             \expandafter\lstenv@SkipToEnd
         \fi}}%
}
\let\lst@arg\@empty \lst@false \lst@FVConvert{end}\{\}\@nil
\expandafter\@tempa\lst@arg
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@SkipToEnd}
% We use the temporary definition
% \begin{itemize}\item[]
%    |\long\def\lst@temp##1\|\meta{content of \textup{\cs{lstenv@endstring}}}|{\lstenv@End}|
% \end{itemize}
% which gobbles all characters up to the end of environment and finishes it.
%    \begin{macrocode}
\begingroup \lccode`\~=`\\\lowercase{%
\gdef\lstenv@SkipToEnd{%
    \long\expandafter\def\expandafter\lst@temp\expandafter##\expandafter
        1\expandafter~\lstenv@endstring{\lstenv@End}%
    \lst@temp}
}\endgroup
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstenv@Error}
% is called by a lonely `end environment'.
%    \begin{macrocode}
\def\lstenv@Error#1{\PackageError{Listings}{Extra \string\end#1}%
    {I'm ignoring this, since I wasn't doing a \csname#1\endcsname.}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@TestEOLChar}
% \begin{macro}{\lst@EOLCharError}
% Here we test for the two possible EOL characters.
%    \begin{macrocode}
\begingroup \lccode`\~=`\^^M\lowercase{%
\gdef\lst@TestEOLChar#1{%
    \ifx ~#1\@empty \lst@EOLCharError \else
    \ifx^^J#1\@empty \lst@EOLCharError \else
        \gdef\lst@intname{#1}%
    \fi \fi}
}\endgroup
%    \end{macrocode}
% The error message.
%    \begin{macrocode}
\def\lst@EOLCharError{%
    \PackageError{Listings}%
    {Oops! It seems you've forgotten the argument to\MessageBreak
     a listing environment. Assuming empty argument}%
    {Type <RETURN> to proceed.}}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{environment}{lstlisting}
% The awkward work is done, the definition is quite easy now. We test whether
% the user has forgotten the name argument, set the keys, and deal with
% continued line numbering.
%    \begin{macrocode}
\lstnewenvironment{lstlisting}[2][]
    {\lst@TestEOLChar{#2}%
     \lstset{#1}%
     \csname lst@SetFirstLabel\endcsname}
    {\csname lst@SaveFirstLabel\endcsname}
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \end{environment}
%
%
% \section{Documentation support}
%
% \begin{syntax}
% \item \texttt{lstsample}\marg{left}\marg{right}
%
%       Roughly speaking all material in between this environment is executed
%       `on the left side' and typeset verbatim on the right. \meta{left} is
%       executed before the left side is typeset, and similarly \meta{right}
%       before the right-hand side.
%
% \item[0.21] |\newdocenvironment|\marg{name}\marg{short name}\marg{begin code}\marg{end code}
%
%       The \meta{name} environment can be used in the same way as `macro'.
%       The provided(!) definitions
%           |\Print|\meta{short name}|Name|
%       and |\SpecialMain|\meta{short name}|Index|
%       control printing in the margin and control indexing as the defaults
%       |\PrintMacroName| and |\SpecialMainIndex| do.
%
%       This command is used to define the `aspect' and `lstkey' environments
%       which enclose lst-aspect and key definitions, respectively.
%
%\item[0.21] \texttt{macroargs} environment
%
%       This `enumerate' environment uses as labels `|#1| $=$', `|#2| $=$',
%       and so on.
%
% \item \texttt{TODO}
% \item \texttt{ALTERNATIVE}
% \item \texttt{REMOVED}
% \item \texttt{OLDDEF}
%
%       These environment enclose comments on `to do's', alternatives and
%       removed or old definitions.
%
% \item[0.21] |\lstscanlanguages|\meta{list macro}\marg{input files}\marg{don't input}
%
%       scans \marg{input files}$\setminus$\marg{don't input} for language
%       definitions. The available languages are stored in \meta{list macro}
%       using the form \meta{language}|(|\meta{dialtect}|),|.
%
% \item[0.21] |\lstprintlanguages|\meta{list macro}
%
%       prints the languages in two column format.
%
% \end{syntax}
%
%
% \subsection{Environments for notes}
%
% \begin{macro}{\lst@BeginRemark}
% \begin{macro}{\lst@EndRemark}
% We begin with two simple definitions \ldots
%    \begin{macrocode}
%<*doc>
%    \end{macrocode}
%    \begin{macrocode}
\def\lst@BeginRemark#1{%
    \begin{quote}\topsep0pt\let\small\footnotesize\small#1:}
\def\lst@EndRemark{\end{quote}}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{environment}{TODO}
% \begin{environment}{ALTERNATIVE}
% \begin{environment}{REMOVED}
% \begin{environment}{OLDDEF}
% used to define some environments.
%    \begin{macrocode}
\newenvironment{TODO}
    {\lst@BeginRemark{To do}}{\lst@EndRemark}
\newenvironment{ALTERNATIVE}
    {\lst@BeginRemark{Alternative}}{\lst@EndRemark}
\newenvironment{REMOVED}
    {\lst@BeginRemark{Removed}}{\lst@EndRemark}
\newenvironment{OLDDEF}
    {\lst@BeginRemark{Old definition}}{\lst@EndRemark}
%    \end{macrocode}
% \end{environment}\end{environment}\end{environment}\end{environment}
%
%
% \subsection{Extensions to \textsf{doc}}
%
% \begin{macro}{\m@cro@}
% We need a slight modification of \packagename{doc}'s internal macro.
% The former argument |#2| has become |#3|. This change is not marked below.
% The second argument is now \meta{short name}.
%    \begin{macrocode}
\long\def\m@cro@#1#2#3{\endgroup \topsep\MacroTopsep \trivlist
  \edef\saved@macroname{\string#3}%
  \def\makelabel##1{\llap{##1}}%
  \if@inlabel
    \let\@tempa\@empty \count@\macro@cnt
    \loop \ifnum\count@>\z@
      \edef\@tempa{\@tempa\hbox{\strut}}\advance\count@\m@ne \repeat
    \edef\makelabel##1{\llap{\vtop to\baselineskip
                               {\@tempa\hbox{##1}\vss}}}%
    \advance \macro@cnt \@ne
  \else  \macro@cnt\@ne  \fi
  \edef\@tempa{\noexpand\item[%
     #1%
       \noexpand\PrintMacroName
     \else
%    \end{macrocode}
% The next line has been modified.
%    \begin{macrocode}
       \expandafter\noexpand\csname Print#2Name\endcsname % MODIFIED
     \fi
     {\string#3}]}%
  \@tempa
  \global\advance\c@CodelineNo\@ne
   #1%
      \SpecialMainIndex{#3}\nobreak
      \DoNotIndex{#3}%
   \else
%    \end{macrocode}
% Ditto.
%    \begin{macrocode}
      \csname SpecialMain#2Index\endcsname{#3}\nobreak % MODIFIED
   \fi
  \global\advance\c@CodelineNo\m@ne
  \ignorespaces}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\macro}
% \begin{macro}{\environment}
% These two definitions need small adjustments due to the modified |\m@cro@|.
%    \begin{macrocode}
\def\macro{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iftrue {Macro}}% MODIFIED
\def\environment{\begingroup
   \catcode`\\12
   \MakePrivateLetters \m@cro@ \iffalse {Env}}% MODIFIED
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{macro}{\newdocenvironment}
% This command simply makes definitions similar to `environment' and provides
% the printing and indexing commands.
%    \begin{macrocode}
\def\newdocenvironment#1#2#3#4{%
    \@namedef{#1}{#3\begingroup \catcode`\\12\relax
                  \MakePrivateLetters \m@cro@ \iffalse {#2}}%
    \@namedef{end#1}{#4\endmacro}%
    \@ifundefined{Print#2Name}{\expandafter
        \let\csname Print#2Name\endcsname\PrintMacroName}{}%
    \@ifundefined{SpecialMain#2Index}{\expandafter
        \let\csname SpecialMain#2Index\endcsname\SpecialMainIndex}{}}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{aspect}
% \begin{macro}{\PrintAspectName}
% \begin{macro}{\SpecialMainAspectIndex}
% The environment and its `print' and `index' commands.
%    \begin{macrocode}
\newdocenvironment{aspect}{Aspect}{}{}
\def\PrintAspectName#1{}
\def\SpecialMainAspectIndex#1{%
    \@bsphack
    \index{aspects:\levelchar\protect\aspectname{#1}\encapchar main}%
    \@esphack}
%    \end{macrocode}
% \end{macro}\end{macro}\end{environment}
%
% \begin{environment}{lstkey}
% \begin{macro}{\PrintKeyName}
% \begin{macro}{\SpecialMainKeyIndex}
% One more environment with its `print' and `index' commands.
%    \begin{macrocode}
\newdocenvironment{lstkey}{Key}{}{}
\def\PrintKeyName#1{\strut\keyname{#1}\ }
\def\SpecialMainKeyIndex#1{%
    \@bsphack
    \index{keys:\levelchar\protect\keyname{#1}\encapchar main}%
    \@esphack}
%    \end{macrocode}
% \end{macro}\end{macro}\end{environment}
%
% \begin{macro}{\labelargcount}
% \begin{environment}{macroargs}
% We just allocate a counter and use \LaTeX's |\list| to implement this
% environment.
%    \begin{macrocode}
\newcounter{argcount}
\def\labelargcount{\texttt{\#\arabic{argcount}}\hskip\labelsep$=$}
%    \end{macrocode}
%    \begin{macrocode}
\def\macroargs{\list\labelargcount
    {\usecounter{argcount}\leftmargin=2\leftmargin
     \parsep \z@ \@plus\z@ \@minus\z@
     \topsep4\p@ \@plus\p@ \@minus2\p@
     \itemsep\z@ \@plus\z@ \@minus\z@
     \def\makelabel##1{\hss\llap{##1}}}}
\def\endmacroargs{\endlist\@endparenv}
%    \end{macrocode}
% \end{environment}\end{macro}
%
%
% \subsection{The \texttt{lstsample} environment}
%
% \begin{environment}{lstsample}
% We store the verbatim part and write the source code also to file.
%    \begin{macrocode}
\lst@RequireAspects{writefile}
%    \end{macrocode}
%    \begin{macrocode}
\newbox\lst@samplebox
\lstnewenvironment{lstsample}[2]
    {\lst@TestEOLChar{#1}\global\let\lst@intname\@empty
     \gdef\lst@sample{#1}%
     \setbox\lst@samplebox=\hbox\bgroup
         \setkeys{lst}{language={},style={},tabsize=4,gobble=5,%
             basicstyle=\small\ttfamily,basewidth=0.51em}
         #2%
         \lst@BeginAlsoWriteFile{\jobname.tmp}}
    {\lst@EndWriteFile\egroup
%    \end{macrocode}
% Now |\lst@samplebox| contains the verbatim part.
% If it's too wide, we use atop and below instead of left and right.
%    \begin{macrocode}
     \ifdim \wd\lst@samplebox>.5\linewidth
         \begin{center}%
         \begin{minipage}{0.9\linewidth}%
             \hbox to\linewidth{\box\lst@samplebox\hss}%
         \end{minipage}%
         \end{center}%
         \lst@sampleInput
     \else
         \begin{center}%
         \begin{minipage}{0.45\linewidth}\lst@sampleInput\end{minipage}%
         \qquad
         \begin{minipage}{0.45\linewidth}%
             \hbox to\linewidth{\box\lst@samplebox\hss}%
         \end{minipage}%
         \end{center}%
     \fi}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\lst@sampleInput}
% inputs the `left-hand' side.
%    \begin{macrocode}
\def\lst@sampleInput{%
    \MakePercentComment\catcode`\^^M=10\relax
    \small\lst@sample
    {\setkeys{lst}{SelectCharTable=\lst@ReplaceInput{\^\^I}%
                                  {\lst@ProcessTabulator}}%
     \leavevmode \input{\jobname.tmp}}\MakePercentIgnore}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Scanning languages}
%
% \begin{macro}{\lstscanlanguages}
% We modify some internal definitions and input the files.
%    \begin{macrocode}
\def\lstscanlanguages#1#2#3{%
    \begingroup
        \def\lst@DefDriver@##1##2##3##4[##5]##6{%
           \lst@false
           \lst@lAddTo\lst@scan{##6(##5),}%
           \begingroup
           \@ifnextchar[{\lst@XDefDriver{##1}##3}{\lst@DefDriver@@##3}}%
        \def\lst@XXDefDriver[##1]{}%
        \lst@InputCatcodes
        \def\lst@dontinput{#3}%
        \let\lst@scan\@empty
        \lst@for{#2}\do{%
            \lst@IfOneOf##1\relax\lst@dontinput
                {}%
                {\InputIfFileExists{##1}{}{}}}%
        \global\let\@gtempa\lst@scan
    \endgroup
    \let#1\@gtempa}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstprintlanguages}
% |\do| creates a box of width 0.5|\linewidth| or |\linewidth| depending
% on how wide the argument is. This leads to `two column' output.
% The other main thing is sorting the list and begin with the output.
%    \begin{macrocode}
\def\lstprintlanguages#1{%
    \def\do##1{\setbox\@tempboxa\hbox{##1\space\space}%
        \ifdim\wd\@tempboxa<.5\linewidth \wd\@tempboxa.5\linewidth
                                   \else \wd\@tempboxa\linewidth \fi
        \box\@tempboxa\allowbreak}%
    \begin{quote}
      \par\noindent
      \hyphenpenalty=\@M \rightskip=\z@\@plus\linewidth\relax
      \lst@BubbleSort#1%
      \expandafter\lst@NextLanguage#1\relax(\relax),%
    \end{quote}}
%    \end{macrocode}
% We get and define the current language and \ldots
%    \begin{macrocode}
\def\lst@NextLanguage#1(#2),{%
    \ifx\relax#1\else
        \def\lst@language{#1}\def\lst@dialects{(#2),}%
        \expandafter\lst@NextLanguage@
    \fi}
%    \end{macrocode}
% gather all available dialect of this language (note that the list has been
% sorted)
%    \begin{macrocode}
\def\lst@NextLanguage@#1(#2),{%
    \def\lst@temp{#1}%
    \ifx\lst@temp\lst@language
        \lst@lAddTo\lst@dialects{(#2),}%
        \expandafter\lst@NextLanguage@
    \else
%    \end{macrocode}
% or begin to print this language with all its dialects. Therefor we sort the
% dialects
%    \begin{macrocode}
        \do{\lst@language
        \ifx\lst@dialects\lst@emptydialect\else
            \expandafter\lst@NormedDef\expandafter\lst@language
                \expandafter{\lst@language}%
            \space(%
            \lst@BubbleSort\lst@dialects
            \expandafter\lst@PrintDialects\lst@dialects(\relax),%
            )%
        \fi}%
        \def\lst@next{\lst@NextLanguage#1(#2),}%
        \expandafter\lst@next
    \fi}
\def\lst@emptydialect{(),}
%    \end{macrocode}
% and print the dialect with appropriate commas in between.
%    \begin{macrocode}
\def\lst@PrintDialects(#1),{%
    \ifx\@empty#1\@empty empty\else
        \lst@PrintDialect{#1}%
    \fi
    \lst@PrintDialects@}
\def\lst@PrintDialects@(#1),{%
    \ifx\relax#1\else
        ,\lst@PrintDialect{#1}%
        \expandafter\lst@PrintDialects@
    \fi}
%    \end{macrocode}
% Here we take care of default dialects.
%    \begin{macrocode}
\def\lst@PrintDialect#1{%
    \lst@NormedDef\lst@temp{#1}%
    \expandafter\ifx\csname lstdd@\lst@language\endcsname\lst@temp
        \texttt{\underbar{#1}}%
    \else
        \texttt{#1}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Bubble sort}
%
% \begin{macro}{\lst@IfLE}
% \meta{string 1}|\relax\@empty|\meta{string 2}|\relax\@empty|\marg{then}\meta{else}.
% If \meta{string 1} $\leq$ \meta{string 2}, we execute \meta{then} and
% \meta{else} otherwise.
% Note that this comparision is case insensitive.
%    \begin{macrocode}
\def\lst@IfLE#1#2\@empty#3#4\@empty{%
    \ifx #1\relax
        \let\lst@next\@firstoftwo
    \else \ifx #3\relax
        \let\lst@next\@secondoftwo
    \else
        \lowercase{\ifx#1#3}%
            \def\lst@next{\lst@IfLE#2\@empty#4\@empty}%
        \else
            \lowercase{\ifnum`#1<`#3}\relax
                \let\lst@next\@firstoftwo
            \else
                \let\lst@next\@secondoftwo
            \fi
        \fi
    \fi \fi
    \lst@next}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@BubbleSort}
% is in fact a derivation of bubble sort.
%    \begin{macrocode}
\def\lst@BubbleSort#1{%
    \ifx\@empty#1\else
        \lst@false
%    \end{macrocode}
% We `bubble sort' the first, second, \ldots\ elements and \ldots
%    \begin{macrocode}
        \expandafter\lst@BubbleSort@#1\relax,\relax,%
%    \end{macrocode}
% then the second, third, \ldots\ elements until no elemets have been swapped.
%    \begin{macrocode}
        \expandafter\lst@BubbleSort@\expandafter,\lst@sorted
                                      \relax,\relax,%
        \let#1\lst@sorted
        \lst@if
            \def\lst@next{\lst@BubbleSort#1}%
            \expandafter\expandafter\expandafter\lst@next
        \fi
    \fi}
\def\lst@BubbleSort@#1,#2,{%
    \ifx\@empty#1\@empty
        \def\lst@sorted{#2,}%
        \def\lst@next{\lst@BubbleSort@@}%
    \else
        \let\lst@sorted\@empty
        \def\lst@next{\lst@BubbleSort@@#1,#2,}%
    \fi
    \lst@next}
%    \end{macrocode}
% But the bubbles rise only one step per call. Putting the elements at their
% top most place would be inefficient (since \TeX\ had to read much more
% parameters in this case).
%    \begin{macrocode}
\def\lst@BubbleSort@@#1,#2,{%
    \ifx\relax#1\else
        \ifx\relax#2%
            \lst@lAddTo\lst@sorted{#1,}%
            \expandafter\expandafter\expandafter\lst@BubbleSort@@@
        \else
            \lst@IfLE #1\relax\@empty #2\relax\@empty
                          {\lst@lAddTo\lst@sorted{#1,#2,}}%
                {\lst@true \lst@lAddTo\lst@sorted{#2,#1,}}%
            \expandafter\expandafter\expandafter\lst@BubbleSort@@
        \fi
    \fi}
\def\lst@BubbleSort@@@#1\relax,{}
%    \end{macrocode}
%    \begin{macrocode}
%</doc>
%    \end{macrocode}
% \end{macro}
%
%
% \section{Interfaces to other programs}
%
%
% \subsection{0.19 compatibility}
%
% \begin{aspect}{0.19}
% Some keys have just been renamed.
%    \begin{macrocode}
%<*0.19>
\lst@BeginAspect{0.19}
%    \end{macrocode}
%    \begin{macrocode}
\lst@Key{nonkeywordstyle}\relax{\setkeys{lst}{identifierstyle={#1}}}
\lst@Key{cdirectives}\relax{\setkeys{lst}{directives={#1}}}
\lst@Key{doublekeywordcommentsemicolon}\relax
    {\setkeys{lst}{keywordcommentsemicolon={#1}}}
%    \end{macrocode}
% Ditto two commands.
%    \begin{macrocode}
\lst@UserCommand\listoflistings{%
    \bgroup
    \let\lstlistlistingname\listlistingsname
    \lstlistoflistings
    \egroup}
\lst@UserCommand\listlistingsname{Listings}
%    \end{macrocode}
% \keyname{baseem} appends one or two |em| and uses \keyname{basewidth}.
%    \begin{macrocode}
\lst@Key{baseem}\relax{\lstKV@CSTwoArg{#1}%
    {\ifx\@empty##2\@empty
         \setkeys{lst}{basewidth=##1em}%
     \else
         \setkeys{lst}{basewidth={##1em,##2em}}%
     \fi}}
%    \end{macrocode}
% \keyname{blankstring} is the opposite of \keyname{stringspaces}.
% We simply expand |\iffalse| or |\iftrue| and assign it.
%    \begin{macrocode}
\lst@Key{blankstring}\relax
    {\lstKV@SetIf\lst@ifblankstring
     \expandafter\let\expandafter\lst@ifstringspaces\csname
         if\lst@ifblankstring false\else true\fi \endcsname}
%    \end{macrocode}
% For |\lstbox| we use the internal |\lst@boxpos| and hope that |\lst@boxtrue|
% is not necessary. If this is wrong, the kernel needs to be changed.
%    \begin{macrocode}
\lst@UserCommand\lstbox{\@ifnextchar[{\lstbox@}{\lstbox@[c]}}
\gdef\lstbox@[#1]#2{\def\lst@boxpos{#1}}
%    \end{macrocode}
%
% \begin{lstkey}{pre}
% \begin{lstkey}{post}
% Use |[{#1}]| instead of the empty |[]| after communication with
% \lsthelper{Holger~Danielsson}{1999/01/24}{use <commands to execute> if
% <continue> empty}.
%    \begin{macrocode}
\lst@Key{pre}{}{\lstKV@OptArg[{#1}]{#1}%
    {\def\lst@prelisting{##2}\def\lst@@prelisting{##1}}}
\lst@Key{post}{}{\lstKV@OptArg[{#1}]{#1}%
    {\def\lst@postlisting{##2}\def\lst@@postlisting{##1}}}
%    \end{macrocode}
%    \begin{macrocode}
\lst@AddToHookAtTop{Init}{\lst@ifcontinue\expandafter\lst@@prelisting
                                    \else\expandafter\lst@prelisting\fi}
\lst@AddToHook{DeInit}{\lst@ifcontinue \expandafter\lst@@postlisting
                                 \else \expandafter\lst@postlisting\fi}
%    \end{macrocode}
% They are possibly unsafe if we put the listing in a box.
%    \begin{macrocode}
\lst@AddToHook{BoxUnsafe}
    {\let\lst@prelisting\relax \let\lst@postlisting\relax
     \let\lst@@prelisting\relax\let\lst@@postlisting\relax}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}
%
% \begin{macro}{\lstname}
% \begin{macro}{\lstintname}
% Just get the data from two internal definitions.
%    \begin{macrocode}
\lst@AddToHook{PreInit}
    {\global\let\lstname\lst@name \global\let\lstintname\lst@intname}
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{lstkey}{commentline}
% \begin{lstkey}{fixedcommentline}
% \begin{lstkey}{singlecomment}
% \begin{lstkey}{doublecomment}
% \begin{lstkey}{nestedcomment}
%    \begin{macrocode}
\lst@Key{commentline}\relax{\KV@lst@comment{[l]#1}}
\lst@Key{fixedcommentline}\relax{\KV@lst@comment{[f]#1}}
\lst@Key{singlecomment}\relax{\KV@lst@comment{[s]#1}}
\lst@Key{doublecomment}\relax{\KV@lst@comment{[d]#1}}
\lst@Key{nestedcomment}\relax{\KV@lst@comment{[n]#1}}
%    \end{macrocode}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
% \end{lstkey}
%
%    \begin{macrocode}
\lst@EndAspect
%</0.19>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{\textsf{fancyvrb}}
%
% \lsthelper{Denis~Girou}{1998/07/26}{fancyvrb} asked whether
% \packagename{fancyvrb} and \packagename{listings} could work together.
% This is the second attempt.
%
% \begin{lstkey}{fancyvrb}
% We set the boolean and call a submacro.
%    \begin{macrocode}
%<*kernel>
\lst@Key{fancyvrb}\relax[t]{%
    \lstKV@SetIf{#1}\lst@iffancyvrb
    \lstFV@fancyvrb}
\ifx\lstFV@fancyvrb\@undefined
    \gdef\lstFV@fancyvrb{\lst@RequireAspects{fancyvrb}\lstFV@fancyvrb}
\fi
%</kernel>
%    \end{macrocode}
% \end{lstkey}
%
% \begin{aspect}{fancyvrb}
% We end the job if \packagename{fancyvrb} is not present.
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect{fancyvrb}
%    \end{macrocode}
%    \begin{macrocode}
\@ifundefined{FancyVerbFormatLine}
    {\typeout{^^J%
     ***^^J%
     *** `listings.sty' needs `fancyvrb.sty' right now.^^J%
     *** Please ensure its availability and try again.^^J%
     ***^^J}%
     \batchmode \@@end}{}
%    \end{macrocode}
%
% \begin{macro}{\lstFV@fancyvrb}
% We assign the correct |\FancyVerbFormatLine| macro.
%    \begin{macrocode}
\gdef\lstFV@fancyvrb{%
    \lst@iffancyvrb
        \ifx\FancyVerbFormatLine\lstFV@FancyVerbFormatLine\else
            \let\lstFV@FVFL\FancyVerbFormatLine
            \let\FancyVerbFormatLine\lstFV@FancyVerbFormatLine
        \fi
    \else
        \ifx\lstFV@FVFL\@undefined\else
            \let\FancyVerbFormatLine\lstFV@FVFL
            \let\lstFV@FVFL\@undefined
        \fi
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstFV@VerbatimBegin}
% We initialize things if necessary.
%    \begin{macrocode}
\gdef\lstFV@VerbatimBegin{%
    \ifx\FancyVerbFormatLine\lstFV@FancyVerbFormatLine
        \lsthk@TextStyle \lsthk@BoxUnsafe
        \lsthk@PreSet
        \lst@activecharsfalse
        \let\normalbaselines\relax
%    \end{macrocode}
% \begin{TODO}
% Is this |\let| bad?
% \end{TODO}
% I inserted |\lst@ifwholeline|\ldots|\fi| after a bug report from
% \lsthelper{Peter~Bartke}{1999/11/18}{wrong fancyvrb frame}.
%    \begin{macrocode}
        \lst@Init\relax
        \lst@ifwholeline \advance\linewidth-\@totalleftmargin \fi
        \everypar{}\global\let\lst@newlines\@empty
        \lst@mode\lst@nomode \let\lst@entermodes\@empty
        \lst@InterruptModes
%    \end{macrocode}
% \lsthelper{Rolf~Niepraschk}{1998/11/25}{ligatures problem} reported a bug
% concerning ligatures to \lsthelper{Denis~Girou}{1998/11/27}{use |\@noligs|}.
%    \begin{macrocode}
%% D.G. modification begin - Nov. 25, 1998
        \let\@noligs\relax
%% D.G. modification end
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lstFV@VerbatimEnd}
% A box and macro must exist after |\lst@DeInit|.
% We store them globally.
%    \begin{macrocode}
\gdef\lstFV@VerbatimEnd{%
    \ifx\FancyVerbFormatLine\lstFV@FancyVerbFormatLine
        \global\setbox\lstFV@gtempboxa\box\@tempboxa
        \global\let\@gtempa\FV@ProcessLine
        \lst@mode\lst@Pmode
        \lst@DeInit
        \let\FV@ProcessLine\@gtempa
        \setbox\@tempboxa\box\lstFV@gtempboxa
    \fi}
%    \end{macrocode}
%    \begin{macrocode}
\newbox\lstFV@gtempboxa
%    \end{macrocode}
% \end{macro}
%
% \noindent
% We insert |\lstFV@VerbatimBegin| and |\lstFV@VerbatimEnd| where necessary.
%    \begin{macrocode}
\lst@AddTo\FV@VerbatimBegin\lstFV@VerbatimBegin
\lst@AddToAtTop\FV@VerbatimEnd\lstFV@VerbatimEnd
\lst@AddTo\FV@LVerbatimBegin\lstFV@VerbatimBegin
\lst@AddToAtTop\FV@LVerbatimEnd\lstFV@VerbatimEnd
\lst@AddTo\FV@BVerbatimBegin\lstFV@VerbatimBegin
\lst@AddToAtTop\FV@BVerbatimEnd\lstFV@VerbatimEnd
%    \end{macrocode}
%
% \begin{macro}{\lstFV@FancyVerbFormatLine}
% `@' terminates the argument of |\lst@FVConvert|.
% Moreover |\lst@ReenterModes| and |\lst@InterruptModes| encloses some code.
% This ensures that we have same group level at the beginning and at the end of
% the macro---even if the user begins but doesn't end a comment, which means
% one open group.
% Furthermore we use |\vtop| and reset |\lst@newlines| to allow line breaking.
%    \begin{macrocode}
\gdef\lstFV@FancyVerbFormatLine#1{%
    \let\lst@arg\@empty \lst@true \lst@FVConvert#1\@nil
    \global\let\lst@newlines\@empty
    \vtop{\leavevmode\lst@parshape
          \lst@ReenterModes
          \lst@arg \lst@PrintToken\lst@EOLUpdate
          \lst@InterruptModes}}
%    \end{macrocode}
% The |\lst@parshape| inside |\vtop| is due to a bug report from
% \lsthelper{Peter~Bartke}{1999/11/18}{wrong par indention with fancyvrb}.
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{Omega support}
%
% \begingroup
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
% $\Omega$ support looks easy---I hope it works at least in some cases.
%    \begin{macrocode}
\@ifundefined{ocp}{}
    {\lst@AddToHook{OutputBox}{\lsthk@OmegaOutputBox}
     \lst@AddToHook{OmegaOutputBox}{}}
%    \end{macrocode}
% Some special code without explanation---first I have to understand it
% completely.
%    \begin{macrocode}
\lst@AddToHook{OmegaOutputBox}
    {\let\lst@ProcessLetter\@firstofone
     \let\lst@ProcessDigit\@firstofone
     \let\lst@ProcessOther\@firstofone
     \let\lst@ProcessString@b\@firstofone
     \let\lst@ProcessString@d\@firstofone
     \let\lst@ProcessString@m\@firstofone
     \let\lst@ProcessString@bd\@firstofone
     \let\lst@ProcessString@db\@firstofone}
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \endgroup
%
%
% \subsection{\textsf{LGrind}}
%
% \begin{aspect}{lgrind}
% \begin{macro}{\lst@LGGetNames}
% is used to extract the language names from |\lst@arg| (the
% \packagename{LGrind} definition).
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords,comments,strings,language]{lgrind}
%    \end{macrocode}
%    \begin{macrocode}
\gdef\lst@LGGetNames#1:#2\relax{%
    \lst@NormedDef\lstlang@{#1}\lst@ReplaceInArg\lstlang@{|,}%
    \def\lst@arg{:#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGGetValue}
% returns in |\lst@LGvalue| the value of capability |#1| given by the list
% |\lst@arg|. If |#1| is not found, we have |\lst@if|$=$|\iffalse|.
% Otherwise it is true and the ``cap=value'' pair is removed from the list.
% First we test for |#1| and
%    \begin{macrocode}
\gdef\lst@LGGetValue#1{%
    \lst@false
    \def\lst@temp##1:#1##2##3\relax{%
        \ifx\@empty##2\else \lst@LGGetValue@{#1}\fi}
    \expandafter\lst@temp\lst@arg:#1\@empty\relax}
%    \end{macrocode}
% remove the pair if necessary.
%    \begin{macrocode}
\gdef\lst@LGGetValue@#1{%
    \lst@true
    \def\lst@temp##1:#1##2:##3\relax{%
        \@ifnextchar=\lst@LGGetValue@@{\lst@LGGetValue@@=}##2\relax
        \def\lst@arg{##1:##3}}%
    \expandafter\lst@temp\lst@arg\relax}
\gdef\lst@LGGetValue@@=#1\relax{\def\lst@LGvalue{#1}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGGetComment}
% stores the comment delimiters (enclosed in braces) in |#2| if comment of type
% |#1| is present and not a comment line. Otherwise |#2| is empty.
%    \begin{macrocode}
\gdef\lst@LGGetComment#1#2{%
    \let#2\@empty
    \lst@LGGetValue{#1b}%
    \lst@if
        \let#2\lst@LGvalue
        \lst@LGGetValue{#1e}%
        \ifx\lst@LGvalue\lst@LGEOL
            \edef\lstlang@{\lstlang@,commentline={#2}}%
            \let#2\@empty
        \else
            \edef#2{{#2}{\lst@LGvalue}}%
        \fi
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGGetString}
% does the same for string delimiters, but it doesn't `return' any value.
%    \begin{macrocode}
\gdef\lst@LGGetString#1#2{%
    \lst@LGGetValue{#1b}%
    \lst@if
        \let#2\lst@LGvalue
        \lst@LGGetValue{#1e}%
        \ifx\lst@LGvalue\lst@LGEOL
            \edef\lstlang@{\lstlang@,morestringizer=[l]{#2}}%
        \else
%    \end{macrocode}
% we must check for |\e|, i.e.~whether we have to use \texttt doubled or
% \texttt backslashed stringizer.
%    \begin{macrocode}
            \ifx #2\lst@LGvalue
                \edef\lstlang@{\lstlang@,morestringizer=[d]{#2}}%
            \else
                \edef\lst@temp{\lst@LGe#2}%
                \ifx \lst@temp\lst@LGvalue
                    \edef\lstlang@{\lstlang@,morestringizer=[b]{#2}}%
                \else
                    \PackageWarning{Listings}%
                    {String #2...\lst@LGvalue\space not supported}%
                \fi
            \fi
        \fi
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGDefLang}
% defines the language given by |\lst@arg|, the definition part, and
% |\lst@language@|, the language name. First we remove unwanted stuff from
% |\lst@arg|, e.g.~we replace |:\ :| by |:|.
%    \begin{macrocode}
\gdef\lst@LGDefLang{%
    \lst@LGReplace
    \let\lstlang@\empty
%    \end{macrocode}
% Get the keywords and values of friends.
%    \begin{macrocode}
    \lst@LGGetValue{kw}%
    \lst@if
        \lst@ReplaceInArg\lst@LGvalue{{ },}%
        \edef\lstlang@{\lstlang@,keywords={\lst@LGvalue}}%
    \fi
%    \end{macrocode}
%    \begin{macrocode}
    \lst@LGGetValue{oc}%
    \lst@if
        \edef\lstlang@{\lstlang@,sensitive=f}%
    \fi
%    \end{macrocode}
%    \begin{macrocode}
    \lst@LGGetValue{id}%
    \lst@if
        \edef\lstlang@{\lstlang@,alsoletter=\lst@LGvalue}%
    \fi
%    \end{macrocode}
% Now we get the comment delimiters and use them as single or double comments
% according to whether there are two or four delimiters.
% Note that |\lst@LGGetComment| takes care of comment lines.
%    \begin{macrocode}
    \lst@LGGetComment a\lst@LGa
    \lst@LGGetComment c\lst@LGc
    \ifx\lst@LGa\@empty
        \ifx\lst@LGc\@empty\else
            \edef\lstlang@{\lstlang@,singlecomment=\lst@LGc}%
        \fi
    \else
        \ifx\lst@LGc\@empty
            \edef\lstlang@{\lstlang@,singlecomment=\lst@LGa}%
        \else
            \edef\lstlang@{\lstlang@,doublecomment=\lst@LGc\lst@LGa}%
        \fi
    \fi
%    \end{macrocode}
% Now we parse the stringizers.
%    \begin{macrocode}
    \lst@LGGetString s\lst@LGa
    \lst@LGGetString l\lst@LGa
%    \end{macrocode}
% We test for the continuation capability and
%    \begin{macrocode}
    \lst@LGGetValue{tc}%
    \lst@if
        \edef\lstlang@{\lstlang@,lgrindef=\lst@LGvalue}%
    \fi
%    \end{macrocode}
% define the language.
%    \begin{macrocode}
    \expandafter\xdef\csname lstLGlang@\lst@language@\endcsname
        {\noexpand\lstset{\lstlang@}}%
%    \end{macrocode}
% Finally we inform the user of all ignored capabilities.
%    \begin{macrocode}
    \lst@ReplaceInArg\lst@arg{{: :}:}\let\lst@LGvalue\@empty
    \expandafter\lst@LGDroppedCaps\lst@arg\relax\relax
    \ifx\lst@LGvalue\@empty\else
        \PackageWarningNoLine{Listings}{Ignored capabilities for
            \space `\lst@language@' are\MessageBreak\lst@LGvalue}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGDroppedCaps}
% just drops a previous value and appends the next capabilty name to
% |\lst@LGvalue|.
%    \begin{macrocode}
\gdef\lst@LGDroppedCaps#1:#2#3{%
    \ifx#2\relax
        \lst@RemoveCommas\lst@LGvalue
    \else
        \edef\lst@LGvalue{\lst@LGvalue,#2#3}%
        \expandafter\lst@LGDroppedCaps
    \fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lst@LGReplace}
% \begin{macro}{\lst@LGe}
% We replace `escaped \verb!:^$|!' by catcode 11 versions, and other strings
% by some kind of short versions (which is necessary to get the above
% definitions work).
%    \begin{macrocode}
\begingroup
\catcode`\/=0
\lccode`\z=`\:\lccode`\y=`\^\lccode`\x=`\$\lccode`\v=`\|
\catcode`\\=12\relax
/lowercase{%
/gdef/lst@LGReplace{/lst@ReplaceInArg/lst@arg
    {{\:}{z }{\^}{y}{\$}{x}{\|}{v}{ \ }{ }{:\ :}{:}{\ }{ }{\(}({\)})}}
/gdef/lst@LGe{\e}
}
/endgroup
%    \end{macrocode}
% \end{macro}\end{macro}
%
% \begin{macro}{\lst@LGRead}
% reads one language definition and defines the language if the correct one
% is found.
%    \begin{macrocode}
\gdef\lst@LGRead#1\par{%
    \lst@LGGetNames#1:\relax
    \def\lst@temp{endoflanguagedefinitions}%
    \ifx\lstlang@\lst@temp
        \let\lst@next\endinput
    \else
        \expandafter\lst@IfOneOf\lst@language@\relax\lstlang@
            {\lst@LGDefLang \let\lst@next\endinput}%
            {\let\lst@next\lst@LGRead}%
    \fi
    \lst@next}
%    \end{macrocode}
% \end{macro}
%
% \begin{lstkey}{lgrindef}
% We only have to request the language and
%    \begin{macrocode}
\lst@Key{lgrindef}\relax{%
    \lst@NormedDef\lst@language@{#1}%
    \begingroup
    \@ifundefined{lstLGlang@\lst@language@}%
        {\everypar{\lst@LGRead}%
         \catcode`\\=12\catcode`\{=12\catcode`\}=12\catcode`\%=12%
         \catcode`\#=14\catcode`\$=12\catcode`\^=12\catcode`\_=12\relax
         \input{\lstlgrindeffile}%
        }{}%
    \endgroup
%    \end{macrocode}
% select it or issue an error message.
%    \begin{macrocode}
    \@ifundefined{lstLGlang@\lst@language@}%
        {\PackageError{Listings}%
         {LGrind language \lst@language@\space undefined}%
         {The language is not loadable or just mispellt.^^J%
          Type <RETURN> to proceed without changing the language.}}%
        {\lsthk@SetLanguage
         \csname lstLGlang@\lst@language@\endcsname}}
%    \end{macrocode}
% \end{lstkey}
%
% \begin{macro}{\lstlgrindeffile}
% contains just the file name.
%    \begin{macrocode}
\@ifundefined{lstlgrindeffile}
    {\lst@UserCommand\lstlgrindeffile{lgrindef.}}{}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \subsection{\textsf{hyperref}}
%
% \begin{aspect}{hyper}
%    \begin{macrocode}
%<*misc>
\lst@BeginAspect[keywords]{hyper}
%    \end{macrocode}
%
% \begin{lstkey}{hyperanchor}
% \begin{lstkey}{hyperlink}
% determine the macro to set an anchor and a link, respectively.
%    \begin{macrocode}
\lst@Key{hyperanchor}\hyper@@anchor{\let\lst@hyperanchor#1}
\lst@Key{hyperlink}\hyperlink{\let\lst@hyperlink#1}
%    \end{macrocode}
% \end{lstkey}\end{lstkey}
% Again, the main thing is a special working procedure. First we extract the
% contents of |\lst@token| and get a free macro name for this current character
% string (using prefix |lstHR@| and a number as suffix). Then we make this
% free macro equivalent to |\@empty|, so it is not used the next time.
%    \begin{macrocode}
\lst@InstallKeywords{h}{hyperref}{}\relax{}
    {\begingroup
         \let\lst@UM\@empty \xdef\@gtempa{\the\lst@token}%
     \endgroup
     \lst@GetFreeMacro{lstHR@\@gtempa}%
     \global\expandafter\let\lst@freemacro\@empty
%    \end{macrocode}
% |\@tempcnta| is the suffix of the free macro. We use it here to refer to
% the last occurence of the same string. To do this, we redefine the output
% macro |\lst@alloverstyle| to set an anchor \ldots
%    \begin{macrocode}
     \@tempcntb\@tempcnta \advance\@tempcntb\m@ne
     \edef\lst@alloverstyle##1{%
         \let\noexpand\lst@alloverstyle\noexpand\@empty
         \noexpand\smash{\raise\baselineskip\hbox
             {\noexpand\lst@hyperanchor{lst.\@gtempa\the\@tempcnta}%
                                       {\relax}}}%
%    \end{macrocode}
% and a link to the last occurence (if there is any).
%    \begin{macrocode}
         \ifnum\@tempcnta=\z@ ##1\else
             \noexpand\lst@hyperlink{lst.\@gtempa\the\@tempcntb}{##1}%
         \fi}%
    }
    od
%    \end{macrocode}
%
%    \begin{macrocode}
\lst@EndAspect
%</misc>
%    \end{macrocode}
% \end{aspect}
%
%
% \section{*Epilogue}
%
% \begingroup
%    \begin{macrocode}
%<*kernel>
%    \end{macrocode}
% Each option adds the aspect name to |\lst@loadaspects| or removes it from that data macro.
%    \begin{macrocode}
\DeclareOption*{\expandafter\lst@ProcessOption\CurrentOption\relax}
\def\lst@ProcessOption#1#2\relax{%
    \ifx #1!%
        \lst@DeleteKeysIn\lst@loadaspects{#2}%
    \else
        \lst@lAddTo\lst@loadaspects{,#1#2}%
    \fi}
%    \end{macrocode}
% The following aspects are loaded by default.
%    \begin{macrocode}
\ifx\lst@loadaspects\@undefined
    \def\lst@loadaspects{strings,comments,escape,style,language,%
        keywords,labels,lineshape,frames,emph,breaklines,index}%
\fi
%    \end{macrocode}
% Here come last minute changes. These are changes previously made by a
% patch file.
%    \begin{macrocode}
\lst@AddToHook{DeInit}{\everypar{}}
\def\lst@DefineSAC#1#2#3{%
    \ifx\@empty#3%
        \expandafter\@gobblethree
    \else
        \lccode`\~=`#3\lccode`\/=`#3\lowercase{\def\lst@temp{#1/}}%
        \lowercase{\ifx~}\lst@temp\else % not defined yet
            \lowercase{\expandafter\let\csname\@lst s@#2/\endcsname~%
            \let~}\lst@temp
        \fi
    \fi
    \lst@DefineSAC#1{#2}}
\lst@AddToHook{Init}{\lst@ifactivechars \catcode13\active \fi}
\def\lst@MakeCaption#1{%
    \ifx #1t%
        \ifx\lst@@caption\@empty\expandafter\lst@HRefStepCounter \else
                                \expandafter\refstepcounter
        \fi {lstlisting}%
        \ifx\lst@label\@empty\else \label{\lst@label}\fi
    \fi
    \ifx\lst@caption\@empty\else
        \lst@IfSubstring #1\lst@captionpos
            {\lst@Let{13}\space
             \protected@edef\lst@caption{\lst@caption}%
             \protected@edef\lst@@caption{\lst@@caption}%
             \par\normalsize\normalfont
             \ifx\lst@title\@empty
                 \expandafter\@makecaption
             \else
                 \expandafter\lst@maketitle
             \fi
                {\noindent\lstlistingname
                 \ifx\lst@@caption\@empty\else~\thelstlisting\fi}%
                \lst@caption}{}%
    \fi}
\lst@NewMode\lst@commentmode
\gdef\lst@BeginCDATA#1\@empty{%
    \lst@TrackNewLines \lst@PrintToken
    \lst@EnterMode\lst@GPmode{}\let\lst@ifmode\iffalse
    \lst@mode\lst@insidemode #1\lst@mode\lst@GPmode\relax\lst@modetrue}
%    \end{macrocode}
% We end the job if the patch file has wrong version.
%    \begin{macrocode}
\IfFileExists{lstpatch.sty}
    {\def\lst@topatch{0.19}\input{lstpatch.sty}%
     \let\lst@next\relax
     \ifx\lstlanguage@\@undefined\else \let\lst@next\@empty \fi
     \ifx\lst@version\lst@topatch\else \let\lst@next\@empty \fi
     \ifx\lst@next\relax\else
        \typeout{^^J%
        ***^^J%
        *** Patch file `lstpatch.sty' for version \lst@topatch^^J%
        *** is not suitable for `listings.sty' version \lst@version.^^J%
        *** Please delete old patch files and try again.^^J%
        ***^^J}%
        \batchmode \@@end
     \fi}{}
%    \end{macrocode}
% Process the options and load the aspects.
%    \begin{macrocode}
\let\lst@ifsavemem\iffalse
\DeclareOption{savemem}{\let\lst@ifsavemem\iftrue}
\DeclareOption{noaspects}{\let\lst@loadaspects\@empty}
\ProcessOptions
\lst@RequireAspects\lst@loadaspects
\let\lst@loadaspects\@empty
%    \end{macrocode}
% Now selecting empty style and language (if present).
%    \begin{macrocode}
\lst@UseHook{SetStyle}\lst@UseHook{EmptyStyle}
\lst@UseHook{SetLanguage}\lst@UseHook{EmptyLanguage}
%    \end{macrocode}
% Finally we load the configuration files.
%    \begin{macrocode}
\InputIfFileExists{listings.cfg}{}{}
\InputIfFileExists{lstlocal.cfg}{}{}
%<info>\lst@ReportAllocs
%    \end{macrocode}
%    \begin{macrocode}
%</kernel>
%    \end{macrocode}
% \endgroup
%
%
% \begingroup\small
% \section{*History}
% Only major changes after version 0.15 are listed here.
% Previous changes are still present in the \texttt{.dtx}-file.
% Introductory version numbers of commands and keys are listed in the user's guide, which makes this history fairly short.
% \renewcommand\labelitemi{--}
% \begin{itemize}
% \iffalse
% \item[0.1] from 1996/03/09
%   \item test version to look whether package is possible or not
% \item[0.11] from 1996/08/19
%   \item additional blank option (= language)
%   \item alignment improved by rewriting some macros
% \item[0.12] from 1997/01/16
%   \item nearly `perfect' alignment
% \item[0.13] from 1997/02/11
%   \item additional languages: Eiffel, Fortran 90, Modula-2, Pascal XSC
%   \item load on demand: language specific macros moved to driver files
%   \item comments are declared now and not implemented for each language again (this makes the \TeX\ sources easier to read)
% \item[0.14] from 1997/02/18
%   \item user's guide rewritten
%   \item implementation guide uses macro environment from the doc package
%   \item (non) case sensitivity implemented, e.g.~Pascal is not
%   \item multiple stringizer implemented, i.e.~Modula-2 handles both string types: quotes and double quotes
%   \item comment declaration is user-accessible
%   \item package compatible to \verb!german.sty!
% \item[0.15] from 1997/04/18
%   \item additional languages: Java, Turbo Pascal
%   \item package renamed from listing.dtx to listings.dtx since there is already a package named listing
% \fi
% \item[0.16] from 1997/06/01
% \iffalse
%   \item changed `$<$' to `$>$' in \verb!\lst@SkipToFirst!
%   \item bug removed: \verb!\lst@Init! must be placed before \verb!\lst@SkipToFirst!
% \fi
%   \item listing environment rewritten
% \item[0.17] from 1997/09/29
%   \item |\spreadlisting| works correct now (e.g.~page numbers don't move right)
%   \item speed up things (quick `if parameter empty', all |\long| except one removed, faster \verb!\lst@GotoNextTabStop!, etc.)
%   \item alignment of wide other characters improved (e.g.~$==$)
% \iffalse
%   \item many new languages: Ada, Algol, Cobol, Comal 80, Elan, Fortran 77, Lisp, Logo, Matlab, Oberon, Perl, PL/I, Simula, SQL, \TeX
% \fi
% \item[pre-0.18] from 1998/03/24 (unpublished)
%   \item bug concerning |\labelstyle| removed (now oldstylenum example works)
%   \item experimental implementation of character classes
% \item[0.19] from 1998/11/09
%   \item character classes and new \lst-aspects seem to be the ultimate
%   \item user interface uses \packagename{keyval} package
%   \item \packagename{fancyvrb} support
% \item[0.20] from 1999/07/12
%   \item new keyword detection mechanism
%   \item new aspects: \aspectname{writefile}, \aspectname{breaklines}, captions, \aspectname{html}
%   \item improved \packagename{fancyvrb} support
%   \item all aspects reside in a single file and the language drivers in currently two files
% \item[0.21] from 2000/08/23
%   \item dynamic modes
%   \item \ldots (needs to be updated)
% \end{itemize}
% \endgroup
%
% \setcounter{IndexColumns}{2}
% \PrintIndex
%
%
% \Finale
%
\endinput
